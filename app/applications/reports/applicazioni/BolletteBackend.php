<?php
namespace applications\reports\applicazioni;

use applications\anagraficaimmobili\entities\Aggregatore;
use applications\anagraficaimmobili\entities\AmministratoreCondominio;
use applications\anagraficaimmobili\entities\Condominio;
use applications\anagraficaimmobili\entities\Contatore;
use applications\anagraficaimmobili\entities\Edificio;
use applications\anagraficaimmobili\entities\Generatore;
use applications\anagraficaimmobili\entities\LayoutProspettoMillesimale;
use applications\anagraficaimmobili\entities\LetturaAggregata;
use applications\anagraficaimmobili\entities\LetturaContatore;
use applications\anagraficaimmobili\entities\ResponsabileImpianto;
use applications\anagraficaimmobili\entities\TipoUnita;
use applications\anagraficaimmobili\entities\UnitaAbitativa;
use applications\anagraficaimmobili\entities\Vettore;
use applications\reports\Costanti;
use applications\reports\entities\Consumo;
use applications\reports\entities\EnergiaErogata;
use applications\reports\entities\Fattura;
use applications\reports\ReportsApplication;

use applications\reports\entities\Bolletta;
use applications\reports\applicazioni\PDF;

use applications\login\LoginApplication;
use applications\main\entities\Notification;
use applications\meta\entities\Meta;
use Aura\Sql\Exception;
use backend\BackendTemplate;
use core\Config;
use core\db\Query;
use core\Email;
use core\Environment;
use core\Model;

use core\Route;
use core\RouteFilter;
use core\services\Db;
use core\services\EmailService;
use core\services\Request;
use core\services\Response;
use core\services\RouterService;
use core\services\SessionService;
use function Couchbase\defaultDecoder;
use function MongoDB\BSON\fromJSON;

use Fpdf\Fpdf;
use \ZipArchive;
use \DateTime;




class BolletteBackend extends \core\abstracts\BackendApplication{

    public const CoeffConvACS = 38.346;

    static function getApplication()
    {
        return ReportsApplication::class;
    }

    static function getEntityClass()
    {
        return Bolletta::class;
    }

    public static function declareRoutes()
    {
        return array_merge(parent::declareRoutes(),
            ["Backend-UnitaAjaxList" => new Route("UnitaAjaxList","UnitaAjaxList/{id:(.*)}",
                array(static::class, "UnitaAbitativeAjaxList"))],
            ["Backend-NewBollettaStep2" => (new Route("NewBollettaStep2","NewBollettaStep2",
                array(static::class, "NewBollettaStep2")))->method(Route::METHOD_POST)],
            ["backend.bolletta.aggiornaconsumi" => (new Route("backend.bolletta.aggiornaconsumi","{id:(.*)}/aggiorna-consumi",[static::class, "aggiornaConsumi"]))->method(Route::METHOD_POST)],
            ["Backend-CalcoloBolletta" => new Route("CalcoloBolletta","{id:(.*)}/CalcoloBolletta",array(static::class, "CalcoloBolletta"))],
            ["Backend-ScaricaFatture" => new Route("ScaricaFatture","{id:(.*)}/ScaricaFatture",array(static::class, "ScaricaFatture"))],
            ["backend.bolletta.aggiornaenergiaerogata" => (new Route("backend.bolletta.aggiornaenergiaerogata","{id:(.*)}/aggiorna-energiaerogata",[static::class, "aggiornaEnergiaErogata"]))->method(Route::METHOD_POST)],
            ["backend.bolletta.caricadefault" => (new Route("backend.bolletta.caricadefault","caricadefault",[static::class, "caricaValoriDefault"]))->method(Route::METHOD_POST)]
        ); // TODO: Change the autogenerated stub
    }

    public static function actionAdd($params = [])
    {


        $m = parent::actionMod($params);



        $data = $m[1];


        if(isset($params['idCondominio'])) {

            $breadcrumbs = [];

            $n = Condominio::query(true)->setFields("denominazione")->where("id=" . $params['idCondominio'])->getOne();
            if ($n) {
                $nomeCondomino = $n->denominazione;
                $routeModificaCondominio = RouterService::getRoute(Condominio::getEntity() . ".mod");
                $linkCondominio = $routeModificaCondominio->build(["id" => $params['idCondominio']]);

                $breadcrumbs[] = ["label" => $nomeCondomino, "link" => $linkCondominio];


                $breadcrumbs[] = ["label" => "Lista bollette", "link" => $routeModificaCondominio->build(["id" => $params['idCondominio'], "tab" => 8])];
            }


            $breadcrumbs[] = [
                "label" => "Crea nuova bolletta", "link" => ""
            ];

            $data['breadcrumbs'] = $breadcrumbs;
        }


        $template = BackendTemplate::renderTemplate($m[0],$data);

        $extratemplate= BackendTemplate::renderTemplate("reports/templates/ricaricavalori",$data);

        return [
            "render",
            [
                "content"   =>  BackendTemplate::mergeTemplates([
                    $template,
                    $extratemplate
                    ])
            ]
        ];




        exit;
        $mod = parent::actionMod();

        $listaCondomini = Condominio::query()->getAll();
        $listaCondominiOk[] = ["value"=>0, "label"=>"-- seleziona un condominio --"];
        foreach ($listaCondomini as $key=>$val){
            $listaCondominiOk[] = array("value"=>$val->id , "label"=>$val->denominazione);
        }

        $listaTipiDocumento = [
            ["value"=>1, "label"=>"Bolletta"],
            ["value"=>2, "label"=>"Rendicontazione"],
            ["value"=>3, "label"=>"Altro"]
        ];

        return [
            "reports/templates/add", // percorso template -> primo elemento array
            array_merge($mod[1],[
                "additional_css"=>file_get_contents(__DIR__."../../assets/css/reports.css"),
                "listaCondomini"    =>  $listaCondominiOk,
                "dataodierna"   =>  date("Y-m-d"),
                "listaTipiDocumento" => $listaTipiDocumento,
                "ajaxUrl" => RouterService::getRoute("Backend-UnitaAjaxList")->build()
            ])
        ];
    }

    public static function NewBollettaStep2($params = [], $posts = [])
    {
        $mod = parent::actionMod();

        //var_dump($posts);

        // die();

        return [
            "reports/templates/add_step2", // percorso template -> primo elemento array
            array_merge($mod[1],[
                "additional_css"=>file_get_contents(__DIR__."../../assets/css/reports.css"),
                "dataodierna"   =>  date("Y-m-d"),
            ])
        ];
    }

    public static function UnitaAbitativeAjaxList($params = [])
    {
        $mod = parent::actionMod();


        $listaUnita = UnitaAbitativa::query(false)
            ->setFields(UnitaAbitativa::getTable().".*")
            ->join(Edificio::class,"id","idEdificio")
            ->join(Condominio::class,"id","idCondominio",Edificio::class)
            ->where("condominio.id = ".$params["id"])
            ->getAll();

        $listaUnitaOk[] = ["value"=>0, "label"=>"-- Seleziona un'Unità Abitativa --"];
        foreach ($listaUnita as $key=>$val){
            $listaUnitaOk[] = array("value"=>$val->id , "label"=>$val->denominazione);
        }


        $valToSel = [
            "property" => "idUnitaAbitativa",
            "field" => [
                "hint"=> "Seleziona unità Abitativa",
                "label"=> "Unità Abitativa",
                "templateVar"=> $listaUnitaOk
            ]
        ];

        return [
            "template_extend" => "empty.twig",
            "fields/select", // percorso template -> primo elemento array
            array_merge($mod[1], $valToSel)
        ];
    }



    public static function aggiornaConsumi( $params = [] , $b){

        /**
         * @var $consumo Model
         */

        //Potrei non avere consumi sui vettori (Solare Termico)
        if(!empty($b['consumo'])){

            foreach ($b['consumo'] as $body) {
                $consumo = Consumo::query()
                    ->where("idBolletta=" . $body['idBolletta'])
                    ->where("idVettore=" . $body['idVettore'])
                    ->getOne();

                if (!$consumo)
                    $consumo = new Consumo($body);
                else
                    $consumo->buildProperties($body);

                $consumo->save();
            }

        }



        return self::aggiornaEnergiaErogata($params,$b);

        return Response::redirect(RouterService::getRoute(Bolletta::class.".mod")->build([
            "id"  =>  $params['id'],
            "tab" =>  "1-tab"
        ]));
        exit;
    }

    public static function aggiornaEnergiaErogata( $params = [] , $b){

        $idGeneratore =  $b['energia'][0]["idGeneratore"];

        $energie = EnergiaErogata::query()
            ->where("idBolletta=".$params['id'])
            ->where("idGeneratore=".$idGeneratore)
            ->getAll();

        foreach ($energie as $key=>$value){
            $value->remove();
        }


        foreach ($b['energia'] as $body) {
            /**
             * @var $consumo Model
             */
            $consumo = EnergiaErogata::query()
                ->where("idBolletta=".$body['idBolletta'])
                ->where("idGeneratore=".$body['idGeneratore'])
                ->where('servizio="'.$body['servizio'].'"')
                ->getOne();


            if(!$consumo) {
                $consumo = new EnergiaErogata($body);
            }else {
                $consumo->buildProperties($body);
            }

            //Se stiamo conteggiando ACS, devo convertire il valore in KW
            /*
          if($consumo->servizio=="acs"){
              $consumo->valore = $consumo->valore*self::CoeffConvACS;
          }
            */


            $consumo->save();


        }

        self::calcolaValoriEnergiaErogata($params);

        return Response::redirect(RouterService::getRoute(Bolletta::class.".mod")->build([
            "id"  =>  $params['id'],
            "tab" =>  "1-tab"
        ]));
        exit;
    }


    public static function calcolaValoriEnergiaErogata($params=[]){

        /**
         * Chiedere se non prendere in considerazione i vettori di energia elettrica
         */
        $bolletta = Bolletta::findById($params['id']);
        $generatori = Generatore::findByIdCondominio($bolletta->idCondominio);

        foreach ($generatori as $generatore){


            $vettori = Vettore::query()
                ->where("idGeneratore=".$generatore->id)
                ->where("vettoreEnergetico=1")
                ->getAll();
            //Vettore::findByIdGeneratore($generatore->id);
            $idVettori = [];
            foreach ($vettori as $v){
                $idVettori[] = $v->id;
            }

            //Controllo perché potrei avere un generatore senza vettori associati (solare termico)
            if(!empty($idVettori)){
                $consumi = Consumo::query()
                    ->where("idBolletta=".$params['id'])
                    ->where("idVettore in (".implode(",",$idVettori).")")
                    ->getAll();
            }

//                $energie = EnergiaErogata::findByIdBolletta($params['id']);
            $energie = EnergiaErogata::query()
                ->where("idBolletta=".$params['id'])
                ->where("idGeneratore=".$generatore->id)
                ->getAll();

            $totaleConsumi = 0;
            $totaleEnergiaManuali = 0;
            $numeroEnergiaVirtuali = 0;
            $numeroEnergiaAutomatiche = 0;
            $numeroEnergiaTotali = 0;

            foreach ($consumi as $value){
                $totaleConsumi += $value->valore;
            }

            //Calcolo i K_x di ripartizione tra i servizi erogati
            $Q_gn_tot = $generatore->fabbisognoCLInominale + $generatore->fabbisognoACSnominale + $generatore->fabbisognoCLEnominale;
            if($Q_gn_tot>0){
                $K_gn["cli"] = (float)$generatore->fabbisognoCLInominale / $Q_gn_tot;
                $K_gn["acs"] = (float)$generatore->fabbisognoACSnominale / $Q_gn_tot;
                $K_gn["cle"] = (float)$generatore->fabbisognoCLEnominale / $Q_gn_tot;
            }else{
                $K_gn["cli"] = $K_gn["acs"] = $K_gn["cle"] = 0;
            }

            $totaleFabbisogno = 0;


            // manuali
            foreach ($energie as $value){
                if( $value->virtuale == 1 ){
                    //Ovvero manuali (inserite in bolletta) o derivanti da contatore (mente contorta Fabio)

                    $numeroEnergiaVirtuali++;
                    $totaleEnergiaManuali += $value->valore;

                }else{
                    //Ovvero da calcolare in automatico con formula
                    $numeroEnergiaAutomatiche++;
                    $f = "fabbisogno".strtoupper($value->servizio)."nominale";
                    $totaleFabbisogno += $generatore->$f;
                }
                $numeroEnergiaTotali++;
            }


            //Calcolo l'energia totale erogata (teorica)
            switch($generatore->tipologiaGeneratore){
                case 1: // Generatore a Combustione
                    $energiaErogataTotale = (float)$totaleConsumi * $generatore->rendimentoMedio * $generatore->potereCalorificoInferiore;
                    break;
                case 2: // Pompa di Calore
                    $energiaErogataTotale = (float)$totaleConsumi * $generatore->coefficentePrestazioneMedia;
                    break;
                case 3: // Solare Termico / applico direttamente il fabbisogno dichiarato nel generatore.
                    $energiaErogataTotale = $Q_gn_tot;
                    break;
                default: //Per ora lo tratto come caso 1 standard (?)
                    $energiaErogataTotale = (float)$totaleConsumi * $generatore->rendimentoMedio * $generatore->potereCalorificoInferiore;
            }


            /* Devo controllare varie casistiche:
             * - contatori generici a valle
             * - contatori su servizio (manuale, dovrebbe essere già precompilato
             * - nessun contatore.
             */


            foreach ($energie as $value){
                if( $value->virtuale == 1){
                    //ovvero manuale o contatore dedicato su servizio: qui sono già a posto.
                }
                if( $value->virtuale == 0){
                    //Ovvero: se da automatizzare.
                    //
                    //Posso avere contatore generico da ripartire
                    //Oppure nessun contatore.


                    //Prendo il totale, tolgo le energie erogate note, moltiplico per il coefficiente del servizio.
                    //Ma dite di no quindi si fa come sotto:
                    //$value->valore = (float)($energiaErogataTotale - $totaleEnergiaManuali) * $K_gn[$value->servizio];

                    if($numeroEnergiaAutomatiche == $numeroEnergiaTotali){
                        //Nessun contatore.
                        //
                        //Devo calcolarle tutte, uso la formula con coefficiente di ripartizione su servizio
                        $value->valore = (float)($energiaErogataTotale) * $K_gn[$value->servizio];
                    }else{
                        //Ho almeno un contatore sul servizio. L'altro come lo trovo?
                        //o c'è un contatore generale
                        //o c'è un contatore specifico sull'altro servizio
                        //
                        //Devo calcolare solo quelle non-note, uso la formula con coefficiente di ripartizione su servizio
                        $value->valore = (float)($energiaErogataTotale) * $K_gn[$value->servizio];
                    }

                    //Prendo il totale, moltiplico per il coefficiente del servizio.
                    $value->valore = (float)($energiaErogataTotale) * $K_gn[$value->servizio];
                    //Questo però va a inficiare il totale teorico... va bene lo stesso?

                    $value->save();
                }
            }
        }
    }


    public static function actionMod($params = [])
    {

        $mod = parent::actionMod($params); // TODO: Change the autogenerated stub
        $mod[1]["title"] = "Modifica Bolletta: ".$mod[1]["data"]->nomeAggregatore;

        $bolletta = $mod[1]["data"];

        $condominio = Condominio::findById( $mod[1]['data']->idCondominio );
        $generatori = Generatore::findByIdCondominio( $mod[1]['data']->idCondominio );


        Generatore::expandArray($generatori);

        foreach ($generatori as $value){
            foreach ($value->vettori as $vettore){
                if( $c = Consumo::findByBollettaVettore($bolletta->id,$vettore->id) ){
                    $vettore->consumo = $c;
                }
            }

            $energiaDaErogare = [];

            if($value->fabbisognoCLI > 0){
                $energiaDaErogare[] = [
                    "tipo" => "cli",
                    "energiaErogata"  =>  EnergiaErogata::findByGeneratoreServizio($bolletta->id,$value->id,"cli")
                ];
            }
            if($value->fabbisognoACS > 0){
                $energiaDaErogare[] = [
                    "tipo" => "acs",
                    "energiaErogata"    =>  EnergiaErogata::findByGeneratoreServizio($bolletta->id,$value->id,"acs")
                ];
            }
            if($value->fabbisognoCLE > 0){
                $energiaDaErogare[] = [
                    "tipo" => "cle",
                    "energiaErogata"    =>  EnergiaErogata::findByGeneratoreServizio($bolletta->id,$value->id,"cle")
                ];
            }


            $value->energiaDaErogare = $energiaDaErogare;
        }

        if(isset($params["dzip"]))
            $dzip = $params["dzip"];



        foreach ($generatori as $key=>$value){
            $value->findContatoriServizi();
            $value->lettureContatori=[];

            foreach ($value->contatoriServizi as $k=>$contatore){



                $query = LetturaContatore::query(false);
                //  $query = self::tipologiaMisurazionePerServizio($k,$query);
                $letture = $query->setFields(LetturaContatore::getTable().".*, ".Contatore::getTable().".codice, ".Contatore::getTable().".ubicazione")
                    ->join(Contatore::class,"id","idContatore")
                    ->where(Contatore::getTable().".id=".$contatore->id)
                    ->where(LetturaContatore::getTable().".dataLettura >= '".$bolletta->data_periodo_inizio."'")
                    ->where(LetturaContatore::getTable().".dataLettura <= '".$bolletta->data_periodo_fine."'")

                    ->setOrderBy("dataLettura","ASC")
                    ->setLimit(999999,1)->getAll();

                $valore = 0;


                foreach ($letture as $kk=>$lettura){
                    $valore += $lettura->deltaLettura;
                }



                $value->lettureContatori[$k] = $valore;


            }

        }



        $templateConsumi = [];
        foreach ($generatori as $value){
            $templateConsumi[] = BackendTemplate::renderTemplateGroup("Generatore ".$value->id,"generatore".$value->id,  BackendTemplate::renderTemplate("reports/templates/bolletta.consumi",[
                    "bolletta"  =>   $mod[1]["data"],
                    "generatore"  =>  $value
                ]
            ),true );
        }

        //$fattureMock = Fattura::findByIdBolletta($bolletta->id);

        $fattureConsuntivo = Fattura::query()
            ->setFields(Fattura::getTable().".*")
            ->join(UnitaAbitativa::getEntity(),"id","idUnitaAbitativa")
            ->where(Fattura::getTable().".idBolletta=".$bolletta->id)
            ->where(Fattura::getTable().".idUnitaAbitativa=-1")
            ->getAll();

        $fattureMock = Fattura::query()
            ->setFields(Fattura::getTable().".*")
            ->join(UnitaAbitativa::getEntity(),"id","idUnitaAbitativa")
            ->where(Fattura::getTable().".idBolletta=".$bolletta->id)
            ->where(Fattura::getTable().".idUnitaAbitativa>=0")
            ->getAll();

        $fattureMock = array_merge($fattureConsuntivo,$fattureMock);

        foreach ($fattureMock as $key=>$val){
            $fattureMock[$key]->nomefile = substr($fattureMock[$key]->pdf,strrpos($fattureMock[$key]->pdf,"/")+1);
        }


        $breadcrumbs = [];
        if( $condominio = Condominio::query(true)->setFields("denominazione")->where("id=".$mod[1]['data']->idCondominio)->getOne()){

            $nomeCondomino = $condominio->denominazione;
            $routeModificaCondominio = RouterService::getRoute(Condominio::getEntity().".mod");
            $linkCondominio = $routeModificaCondominio->build(["id"=>$mod[1]['data']->idCondominio]);

            $breadcrumbs[] = ["label"=>$nomeCondomino, "link"=>$linkCondominio];
            $breadcrumbs[] = ["label"=>"Lista bollette", "link"=>$routeModificaCondominio->build(["id"=>$mod[1]['data']->idCondominio,"tab"=>8])];

            $breadcrumbs[] = [
                "label" =>  "Bolletta numero ".$mod[1]["data"]->progressivo , "link"=>""
            ];

        }








        return[
            "tabs",[
                "tabs"=>[
                    /*[
                        "label" =>  "Informazioni condominio",
                        "content"   =>  Response::getTemplateToUse($mod[0],$mod[1],"empty.twig")->render()
                    ],*/
                    BackendTemplate::renderTemplateSingleTab("Informazioni Bolletta",$mod[0],$mod[1]),

                    [
                        "label" =>  "Consumi",
                        "content"   => BackendTemplate::mergeTemplates(  $templateConsumi )
                    ],

                    BackendTemplate::renderTemplateSingleTab("Fattura condominio","reports/templates/bolletta.fatturacompleta",[
                        "fatture"   =>  $fattureMock,
                        "bolletta" => $bolletta,
                        "dzip" => $dzip
                    ]),



                    /*[
                        "label" =>  "Edifici",
                        "content"   =>  Response::getTemplateToUse($listaEdifici[0],$listaEdifici[1],"empty.twig")->render()
                    ],*/
                    //BackendTemplate::renderTemplateSingleTab("Consumi","reports/templates/bolletta.consumi",[]),

                    /*BackendTemplate::renderTemplateSingleTab("Consumi","list",["data"=>$unitaAbitative]),

                    [
                        "label" =>  "Contatori",
                        "content"   => BackendTemplate::mergeTemplates([
                            BackendTemplate::renderTemplateGroup("Contatori delle Unità Abitative","contatoriunita",  BackendTemplate::renderTemplate("list",["data"  =>  $contatoriUnitaAbitative,"hideHeader"=>true]),true ),
                            BackendTemplate::renderTemplateGroup("Contatori Locali ad Uso Collettivo","contatoriusocollettivo",  BackendTemplate::renderTemplate("list",["data"  =>  $contatoriUsoCollettivo,"hideHeader"=>true]) ),
                            BackendTemplate::renderTemplateGroup("Contatori Generali","contatorigenerali",  BackendTemplate::renderTemplate("list",["data"  =>  $contatoriGenerali,"hideHeader"=>true]) )
                        ])
                    ],*/


                ],
                "title"=>"Modifica Condominio: ".$mod[1]["data"]->denominazione,
                "breadcrumbs"=> $breadcrumbs
            ]
        ];


    }

    public static function actionList($params = [])
    {
        $m = parent::actionList($params); // TODO: Change the autogenerated stub
        $m[1]['title'] = "Elenco dei Documenti";
        return $m;
    }

    public static function ScaricaFatture($params = [], $posts = []){
        $idBolletta = (int)$params["id"];
        if($idBolletta <= 0) {
            $messaggio_esito = "Id Bolletta non trovato";
            return Response::redirect(RouterService::getRoute(Bolletta::getEntity().".mod")->build(["id"=>$idBolletta, "tab"=>"2-tab","message"=>$messaggio_esito,"titlemsg"=>$titolo_esito]));
        }

        $bolletta = Bolletta::findById($idBolletta);
        $condominio = Condominio::findById($bolletta->idCondominio);


        $zip = new ZipArchive();

        $dir_period = self::data_a_url($bolletta->data_periodo_inizio)."_".self::data_a_url($bolletta->data_periodo_fine);

        $subdir = "/documenti/fornitori/bollette/".self::slugify($condominio->id."-".$condominio->denominazione)."/".$dir_period."/";
        $nomeZip = "bollette_".str_pad($idBolletta,3,"0",STR_PAD_LEFT) ."-".self::slugify($condominio->denominazione)."_".$dir_period.".zip";

        $dirZip = Environment::$ROOT.$subdir;

        if ($zip->open($dirZip.$nomeZip, ZIPARCHIVE::CREATE) !== TRUE) {
            exit("impossibile creare il file zip");
        }

        $fatture = Fattura::findByIdBolletta($bolletta->id);
        foreach ($fatture as $fattura){
            $zip->addFile(Environment::$ROOT . $fattura->pdf, basename($fattura->pdf));
        }
        $zip->close();


        $yourfile = $dirZip.$nomeZip;
        $file_name = basename($yourfile);
        header("Cache-Control: no-store, no-cache, must-revalidate, max-age=0");
        header("Cache-Control: post-check=0, pre-check=0", false);
        header("Pragma: no-cache");

        header("Content-Type: application/zip");
        header("Content-Disposition: attachment; filename=$file_name");
        header("Content-Length: " . filesize($yourfile));
        readfile($yourfile);
        exit;



        return Response::redirect(RouterService::getRoute(Bolletta::getEntity().".mod")->build(["id"=>$idBolletta, "tab"=>"2-tab", "dzip"=>$subdir.$nomeZip]));


    }

    public static function CalcoloBolletta($params = [], $posts = [])
    {

        $titolo_esito = "Operazione eseguita";
        $messaggio_esito = "Fatture generate correttamente";

        //Dato da recuperare poi in GET
        $idBolletta = (int)$params["id"];
        if($idBolletta <= 0) {
            $titolo_esito = "Operazione fallita!";
            $messaggio_esito = "Id Bolletta non trovato";
            return Response::redirect(RouterService::getRoute(Bolletta::getEntity().".mod")->build(["id"=>$idBolletta, "tab"=>"2-tab","message"=>$messaggio_esito,"titlemsg"=>$titolo_esito]));
        }

        //Da cui devo poi recuperare l'idCondominio
        $bolletta = Bolletta::findById($idBolletta);
        if(!$bolletta) {
            $titolo_esito = "Operazione fallita!";
            $messaggio_esito = "Bolletta non trovata";
            return Response::redirect(RouterService::getRoute(Bolletta::getEntity().".mod")->build(["id"=>$idBolletta, "tab"=>"2-tab","message"=>$messaggio_esito,"titlemsg"=>$titolo_esito]));
        }

        $idCondominio = $bolletta->idCondominio;
        if($idCondominio <= 0) {
            $titolo_esito = "Operazione fallita!";
            $messaggio_esito = "Id Condominio non trovato";
            return Response::redirect(RouterService::getRoute(Bolletta::getEntity().".mod")->build(["id"=>$idBolletta, "tab"=>"2-tab","message"=>$messaggio_esito,"titlemsg"=>$titolo_esito]));
        }

        //recupero il condomino
        $condominio = Condominio::findById($idCondominio);
        if(!$condominio) {
            $titolo_esito = "Operazione fallita!";
            $messaggio_esito = "Condominio non trovato";
            return Response::redirect(RouterService::getRoute(Bolletta::getEntity().".mod")->build(["id"=>$idBolletta, "tab"=>"2-tab","message"=>$messaggio_esito,"titlemsg"=>$titolo_esito]));
        }




        //Dati utili per il calcolo presi dal condominio
        $Q_inv_cli["cli"] = $condominio->perditeClimatizzazioneInvernale; //Q.inv.cli - Kwh
        $Q_inv_cli["acs"] = 0; // $condominio->perditeAcquaCaldaSanitaria; //Q.inv.cli - Kwh
        $Q_inv_cli["cle"] = 0; //$condominio->perditeClimatizzazioneEstiva; //Q.inv.cli - Kwh
        //queste 2 le calcolo come differenza perché qui ho sempre i ripartitori.


        $matricedatipdf = $matricecontatorigenerali = $matricelettureunitaimmobiliare = [];
        $dati_gen = $dati_vett = $dati_unita = $dati_unita_uc = $dati_consumitot = [];
        $index_unita = $index_unita_uc = $index_consumitot = 0;
        $indice_riga = $indice_riga_contatorigenerali = 0;
        $matrice_spesetot = $matrice_spesesingole = [];
        $indice_spesetot = $indice_spesesingole = 0;


        $tot_fabbisogno["cli"] = $tot_fabbisogno["acs"] = $tot_fabbisogno["cle"] = 0;

        //Cerco tutti i generatori del condominio (non so se mi servono) ed i relativi vettori
        $generatori = Generatore::query()->where("idCondominio=".$idCondominio)->getAll();
        $vettori = [];
        if(!$generatori){
            $titolo_esito = "Operazione fallita!";
            $messaggio_esito = "Nessun generatore trovato per il condominio";
            return Response::redirect(RouterService::getRoute(Bolletta::getEntity().".mod")->build(["id"=>$idBolletta, "tab"=>"2-tab","message"=>$messaggio_esito,"titlemsg"=>$titolo_esito]));
        }else{
            $index_gen = 1;
            $index_vett = 1;
            foreach($generatori as $key=>$val){

                $tot_fabbisogno["cli"] += $val->fabbisognoCLInominale;
                $tot_fabbisogno["acs"] += $val->fabbisognoACSnominale;
                $tot_fabbisogno["cle"] += $val->fabbisognoCLEnominale;
                $tot_fabbisogno_generatore = $val->fabbisognoCLInominale + $val->fabbisognoACSnominale + $val->fabbisognoCLEnominale;

                $matricedatipdf[$indice_riga][0] = "Tipologia di generatore ".$index_gen;
                $matricedatipdf[$indice_riga][1] = "";
                $matricedatipdf[$indice_riga][2] = $val->displayValue("tipologiaGeneratore");
                $matricedatipdf[$indice_riga][3] = "";
                $indice_riga++;

                $matricedatipdf[$indice_riga][0] = "Fabbisogno Energia Termica generatore nel periodo considerato - CLIMATIZZAZIONE INVERNALE";
                $matricedatipdf[$indice_riga][1] = "Q'gn,cli,".$index_gen;
                $matricedatipdf[$indice_riga][2] = (float)$val->fabbisognoCLInominale;
                $matricedatipdf[$indice_riga][3] = "kWh";
                $indice_riga++;
                $matricedatipdf[$indice_riga][0] = "Fabbisogno Energia Termica generatore nel periodo considerato - ACS";
                $matricedatipdf[$indice_riga][1] = "Q'gn,acs,".$index_gen;
                $matricedatipdf[$indice_riga][2] = (float)$val->fabbisognoACSnominale;
                $matricedatipdf[$indice_riga][3] = "kWh";
                $indice_riga++;
                $matricedatipdf[$indice_riga][0] = "Fabbisogno Energia Termica generatore nel periodo considerato - CLIMATIZZAZIONE ESTIVA";
                $matricedatipdf[$indice_riga][1] = "Q'gn,cle,".$index_gen;
                $matricedatipdf[$indice_riga][2] = (float)$val->fabbisognoCLEnominale;
                $matricedatipdf[$indice_riga][3] = "kWh";
                $matricedatipdf[$indice_riga][4] = "B";
                $indice_riga++;

                //Cerco tutti i vettori del condominio [in teoria non mi servono]
                $questi_vettori = Vettore::query()->where("idGeneratore=".$val->id)->getAll();
                foreach($questi_vettori as $key_vett=>$val_vett) {
                    $consumo_vettore = Consumo::query()
                        ->where("idBolletta=".$idBolletta)
                        ->where("idVettore=".$val_vett->id)
                        ->getOne();


                    $matricedatipdf[$indice_riga][0] = "Vettore Energetico ".$index_vett;
                    $matricedatipdf[$indice_riga][1] = "";
                    $matricedatipdf[$indice_riga][2] = $val_vett->displayValue("tipologiaVettore");
                    $matricedatipdf[$indice_riga][3] = "";
                    $indice_riga++;
                    $matricedatipdf[$indice_riga][0] = "Fabbisogno nel periodo considerato - CLIMATIZZAZIONE INVERNALE";
                    $matricedatipdf[$indice_riga][1] = "Q've,cli,".$index_vett;
                    $matricedatipdf[$indice_riga][2] = $val_vett->fabbisognoCLI;
                    //$matricedatipdf[$indice_riga][2] = number_format($consumo_vettore->valore * $val->fabbisognoCLI / $tot_fabbisogno_generatore, 1, ",",".");
                    $matricedatipdf[$indice_riga][3] = $val_vett->displayValue("tipologiaVettore_unitamisura");
                    $indice_riga++;
                    $matricedatipdf[$indice_riga][0] = "Fabbisogno nel periodo considerato - ACS";
                    $matricedatipdf[$indice_riga][1] = "Q've,acs,".$index_vett;
                    $matricedatipdf[$indice_riga][2] = $val_vett->fabbisognoACS;
                    //$matricedatipdf[$indice_riga][2] = number_format($consumo_vettore->valore * $val->fabbisognoACS / $tot_fabbisogno_generatore, 1, ",",".");
                    $matricedatipdf[$indice_riga][3] = $val_vett->displayValue("tipologiaVettore_unitamisura");
                    $indice_riga++;
                    $matricedatipdf[$indice_riga][0] = "Fabbisogno nel periodo considerato - CLIMATIZZAZIONE ESTIVA";
                    $matricedatipdf[$indice_riga][1] = "Q've,cle,".$index_vett;
                    $matricedatipdf[$indice_riga][2] = $val_vett->fabbisognoCLE;
                    //$matricedatipdf[$indice_riga][2] = number_format($consumo_vettore->valore * $val->fabbisognoCLE / $tot_fabbisogno_generatore, 1, ",",".");
                    $matricedatipdf[$indice_riga][3] = $val_vett->displayValue("tipologiaVettore_unitamisura");
                    $indice_riga++;
                    $matricedatipdf[$indice_riga][0] = "Costo Totale Vettore Energetico ".$index_vett;
                    $matricedatipdf[$indice_riga][1] = "";
                    $matricedatipdf[$indice_riga][2] = self::set_euro($consumo_vettore->spesa_nel_periodo);
                    $matricedatipdf[$indice_riga][3] = PDF::EURO();
                    $indice_riga++;
                    $matricedatipdf[$indice_riga][0] = "Costo Unitario Vettore Energetico ".$index_vett;
                    $matricedatipdf[$indice_riga][1] = "cve,".$index_vett;
                    $matricedatipdf[$indice_riga][2] = self::set_euro($consumo_vettore->spesa_nel_periodo/$consumo_vettore->valore);
                    $matricedatipdf[$indice_riga][3] = PDF::EURO()."/".$val_vett->displayValue("tipologiaVettore_unitamisura");
                    $matricedatipdf[$indice_riga][4] = "B";
                    $indice_riga++;

                    $matricecontatorigenerali[$indice_riga_contatorigenerali][0] = "Consumo Vettore Energetico ".$index_vett;
                    $matricecontatorigenerali[$indice_riga_contatorigenerali][1] = "";
                    $matricecontatorigenerali[$indice_riga_contatorigenerali][2] = $consumo_vettore->valore;
                    $matricecontatorigenerali[$indice_riga_contatorigenerali][3] = $val_vett->displayValue("tipologiaVettore_unitamisura");
                    $indice_riga_contatorigenerali++;

                    //Per Consuntivo - INIZIO
                    // --
                    $dati_vett[$index_vett-1][0] = $index_vett;
                    $dati_vett[$index_vett-1][1] = $val_vett->displayValue("tipologiaVettore");
                    $dati_vett[$index_vett-1][2] = $val_vett->displayValue("tipologiaVettore_unitamisura");

                    //Dati reali consumo vettore
                    /*
                    $fabbisognoTotaleServizi = $val->fabbisognoACS + $val->fabbisognoCLE + $val->fabbisognoCLI;
                    $K_vett = [
                        "cli"   =>  $vettore->fabbisognoCLI / $fabbisognoTotaleServizi,
                        "cle"   =>  $vettore->fabbisognoCLE / $fabbisognoTotaleServizi,
                        "acs"   =>  $vettore->fabbisognoACS / $fabbisognoTotaleServizi,
                    ];
                    */
                    $dati_vett[$index_vett-1][3] = number_format((float)$consumo_vettore->valore * $val->fabbisognoCLInominale / $tot_fabbisogno_generatore, 1, ",",".");
                    $dati_vett[$index_vett-1][4] = number_format((float)$consumo_vettore->valore * $val->fabbisognoACSnominale / $tot_fabbisogno_generatore, 1, ",",".");
                    $dati_vett[$index_vett-1][5] = number_format((float)$consumo_vettore->valore * $val->fabbisognoCLEnominale / $tot_fabbisogno_generatore, 1, ",",".");

                    //Uso i dati teorici del vettore
                    //$dati_vett[$index_vett-1][3] = number_format($val_vett->fabbisognoCLI, 1, ",",".");
                    //$dati_vett[$index_vett-1][4] = number_format($val_vett->fabbisognoACS, 1, ",",".");
                    //$dati_vett[$index_vett-1][5] = number_format($val_vett->fabbisognoCLE, 1, ",",".");

                    $dati_vett[$index_vett-1][6] = self::set_euro($consumo_vettore->spesa_nel_periodo/$consumo_vettore->valore);
                    $dati_vett[$index_vett-1][7] = self::set_euro($consumo_vettore->spesa_nel_periodo);
                    $index_vett++;
                    // --
                    //Per Consuntivo - FINE

                }

                $vettori = array_merge(
                    $vettori,
                    $questi_vettori
                );

                $val_erogate = [];
                $energieErogateGeneratore = EnergiaErogata::query()->where("idBolletta=".$idBolletta)->where("idGeneratore=".$val->id)->getAll();
                foreach ($energieErogateGeneratore as $key_ener => $value_ener){
                    $matricecontatorigenerali[$indice_riga_contatorigenerali][0] = "Lettura Iniziale Contatore Generatore ".$index_gen;
                    $matricecontatorigenerali[$indice_riga_contatorigenerali][1] = "L".$index_gen.",cc,".$value_ener->servizio;
                    $matricecontatorigenerali[$indice_riga_contatorigenerali][2] = (float)$value_ener->lettura_iniziale;
                    $matricecontatorigenerali[$indice_riga_contatorigenerali][3] = "kWh";
                    $indice_riga_contatorigenerali++;
                    $matricecontatorigenerali[$indice_riga_contatorigenerali][0] = "Lettura Finale Contatore Generatore ".$index_gen;
                    $matricecontatorigenerali[$indice_riga_contatorigenerali][1] = "L".$index_gen.",cc,".$value_ener->servizio;
                    $matricecontatorigenerali[$indice_riga_contatorigenerali][2] = (float)$value_ener->lettura_finale;
                    $matricecontatorigenerali[$indice_riga_contatorigenerali][3] = "kWh";
                    $indice_riga_contatorigenerali++;
                    $val_erogate[$value_ener->servizio] += $value_ener->valore;
                }

                $dati_gen[$index_gen-1][0] = $index_gen;
                $dati_gen[$index_gen-1][1] = $val->displayValue("tipologiaGeneratore");
                $dati_gen[$index_gen-1][2] = self::set_euro($val_erogate["cli"]);
                $dati_gen[$index_gen-1][3] = self::set_euro($val_erogate["acs"]);
                $dati_gen[$index_gen-1][4] = self::set_euro($val_erogate["cle"]);



                $index_gen++;
            }
        }



        //Energia Erogata inserita in bolletta
        $energieErogateReal = EnergiaErogata::query()->where("idBolletta=".$idBolletta)->getAll();
        if(!$energieErogateReal){
            $titolo_esito = "Operazione fallita!";
            $messaggio_esito = "Nessun dato di energia erogata trovato per la bolletta";
            return Response::redirect(RouterService::getRoute(Bolletta::getEntity().".mod")->build(["id"=>$idBolletta, "tab"=>"2-tab","message"=>$messaggio_esito,"titlemsg"=>$titolo_esito]));
        }
        //Consumi (dei Vettori) inseriti in bolletta [in teoria non mi servono]
        $consumi = Consumo::query()->where("idBolletta=".$idBolletta)->getAll();
        if(!$consumi){
            $titolo_esito = "Operazione fallita!";
            $messaggio_esito = "Nessun dato di consumo vettore trovato per la bolletta";
            return Response::redirect(RouterService::getRoute(Bolletta::getEntity().".mod")->build(["id"=>$idBolletta, "tab"=>"2-tab","message"=>$messaggio_esito,"titlemsg"=>$titolo_esito]));
        }

        $energieErogate = [
            "cli"   =>  0,
            "cle"   =>  0,
            "acs"   =>  0
        ];

        $energieErogateTot = 0;
        foreach ($energieErogateReal as $key=>$value){
            $energieErogateTot += $value->valore;
            $energieErogate[$value->servizio] += $value->valore;
        }



        $totaliLettureServizi = self::calcoloConsumoCondominio($condominio->id,array_keys($energieErogate),$bolletta->data_periodo_inizio,$bolletta->data_periodo_fine);



        // Consumo di tutte le unità di ripartizione
        $UR_tot = $totaliLettureServizi['totali'];

        $Qx_tot = $energieErogate;



        $Qx_inv  = $Q_inv_cli; //di default associo così ma non è corretto in tutte le normative. Correggo dopo dove serve nello switch normativa.

        $Qx_uc =
        $Q_cc_sum =
        $Qx_vol =
        $Cx=
        $Sx_e=
        $Sx_uc=
        $Sx_p=
        $K_coeff=
            [
                "cli"   =>  0,
                "cle"   =>  0,
                "acs"   => 0
            ];

        $millesimipercalcolo_PDF = [];




        //DEVO CALCOLARE I COEFFICIENTI PER SPLITTARE LE SPESE SUL SERVIZIO E CALCOLARE LA SPESA ALL'INTERNO DEL SINGOLO SERVIZIO (NEW)
        foreach ($energieErogate as $key=>$value){


            //Utilizzo i consumi erogati sul servizio in quanto:
            //1 - Se noti (contatore) devi usare effettivamente questi
            //2 - Se teorici (Fabbisogno) questi valori sono già calcolati in modo proporzionale al fabbisogno e considerano già i dati teorici del generatore
            $K_coeff[$key] = (float) $energieErogate[$key] / $energieErogateTot;

            //Nel caso ci ripensassi, i fabbisogno sono qui:
            //$tot_fabbisogno["cli"]
            //$tot_fabbisogno["acs"]
            //$tot_fabbisogno["cle"]
        }


        //Somma contatori spazi ad uso collettivo
        $Qcc = $totaliLettureServizi['totaliQcc'];


        // $Qx_uc = $totaliLettureServizi['totaliConsumoCollettivo'];


        $consideraUsoCollettivo = true;




        foreach ($energieErogate as $nomeServizio=>$valoreServizio){
            if($valoreServizio == 0) continue;

            //Devo effettivamente considerare la normativa di calcolo scelta
            switch($bolletta->normativa){

                case 0: //'10200:2015'
                    $consideraUsoCollettivo = true;

                    //$Qx_inv[$nomeServizio]  = $Q_inv_cli[$nomeServizio]; //già associato sopra
                    $nome_costi = "UNI 10200:2015";
                    $millesimi_da_usare = "millesimiNuovi";
                    $descrizione_normativa_pdf = "Deroga D.Lgs. 10200:2015 | Criterio millesimi termici nuovi";
                    $footer_normativa = "Servizio bolletta con ripartizione costi e consumi in ottemperanza alla norma UNI 10200:2015";
                    $millesimi_usati_label = "millesimi termici nuovi";
                    break;

                case 1: //'141:2016'
                    $consideraUsoCollettivo = true;
                    $Qx_inv[$nomeServizio]  = $Qx_tot[$nomeServizio] * $bolletta->coeff;

                    $nome_costi = "Deroga D.Lgs. 141/2016";
                    $descrizione_normativa_pdf = "Deroga D.Lgs. 141/2016 | Criterio ";
                    $millesimi_usati_label = "";
                    $footer_normativa = "Servizio bolletta con ripartizione costi e consumi in ottemperanza alla Deroga D.Lgs. 141/2016 | Criterio ";

                    //Se ho definito la label nella bolletta, uso questa nel PDF
                    $label_millesimi="";
                    if($bolletta->label_millesimi!=""){
                        $label_millesimi = $bolletta->label_millesimi;
                    }
                    //altrimenti uso il nome standard dei millesimi
                    switch($bolletta->millesimi_utilizzati){
                        case 0: $millesimi_da_usare = "millesimiNuovi";
                            $label_millesimi_pdf = "millesimi termici nuovi";
                            $millesimi_usati_label = "millesimi termici nuovi";
                            break; //nuovi

                        case 1: $millesimi_da_usare = "millesimiVecchi";
                            $label_millesimi_pdf = "millesimi termici vecchi";
                            $millesimi_usati_label = "millesimi termici vecchi";
                            break; //vecchi

                        case 2: $millesimi_da_usare = "millesimiGenerali";
                            $label_millesimi_pdf = "altri millesimi";
                            $millesimi_usati_label = "generali";
                            break; //altri

                        case 3: $millesimi_da_usare = "millesimi";
                            $label_millesimi_pdf = "millesimi di proprietà";
                            $millesimi_usati_label = "millesimi di proprietà";
                            break; //di proprietà

                        case 4: $millesimi_da_usare = "equiripartizione";
                            $label_millesimi_pdf = "Equiripartizione";
                            $millesimi_usati_label = "Equiripartizione";
                            break; //Equiripartizione

                        default: $millesimi_da_usare = "millesimiNuovi";
                            $label_millesimi_pdf = "millesimi termici nuovi";
                            $millesimi_usati_label = "millesimi termici nuovi";
                    }
                    if($label_millesimi=="")
                        $label_millesimi = $label_millesimi_pdf;
                    $descrizione_normativa_pdf .= $label_millesimi;
                    $footer_normativa .= $label_millesimi;


                    break;


                case 2: //'10200:2018'
                    $consideraUsoCollettivo = false;
                    $Qx_inv[$nomeServizio]  = $Qx_tot[$nomeServizio] * $bolletta->coeff;
                    $millesimi_da_usare = "millesimiNuovi";

                    $nome_costi = "UNI 10200:2018";
                    $descrizione_normativa_pdf = "Deroga D.Lgs. 10200:2018 | Criterio millesimi termici nuovi";
                    $footer_normativa = "Servizio bolletta con ripartizione costi e consumi in ottemperanza alla norma UNI 10200:2018";
                    $millesimi_usati_label = "millesimi termici nuovi";
                    break;
                default:
                    $titolo_esito = "Operazione fallita!";
                    $messaggio_esito = "Nessuna normativa valida selezionata";
                    return Response::redirect(RouterService::getRoute(Bolletta::getEntity().".mod")->build(["id"=>$idBolletta, "tab"=>"2-tab","message"=>$messaggio_esito,"titlemsg"=>$titolo_esito]));
            }






            //Somma di tutte le spese di tutti i vettori energetici (compresa elettricita)
            $Sx_tot =  0;
            $Sx_tot_servizi= [
                "cli"   =>  0,
                "cle"   =>  0,
                "acs"   =>0
            ];


            foreach ($consumi as $value){
                $vettore = Vettore::findById($value->idVettore);
                $fabbisognoTotaleServizi = $vettore->fabbisognoACS + $vettore->fabbisognoCLE + $vettore->fabbisognoCLI;



                $K_vett = [
                    "cli"   =>  $vettore->fabbisognoCLI / $fabbisognoTotaleServizi,
                    "cle"   =>  $vettore->fabbisognoCLE / $fabbisognoTotaleServizi,
                    "acs"   =>  $vettore->fabbisognoACS / $fabbisognoTotaleServizi,
                ];

                /*foreach ($K_coeff as $key=>$val){
                    $fabbisognoTotaleServizi = $vettore->fabbisognoACS + $vettore->fabbisognoCLE + $vettore->fabbisognoCLI;
                    $pro = "fabbisogno".strtoupper($K_coeff[$servizio]);
                }*/

                foreach ($K_vett as $key=>$v){
                    $Sx_tot_servizi[$key] += $value->spesa_nel_periodo * $K_vett[$key];
                }


                $Sx_tot += $value->spesa_nel_periodo;
            }


            //Serve per il calcolo dei ripartitori in caso di contatori misti.
            $Qx_vol_daripartire[$nomeServizio] = $Qx_tot[$nomeServizio] - $Qx_inv[$nomeServizio] - $Qcc[$nomeServizio];

            $n_unita = 0;
            $n_locali_uc = 0;
            $sommaripartitori[$nomeServizio] = 0;
            $sommacontatori[$nomeServizio] = 0;
            $consumirilevati[$nomeServizio] = 0;
            foreach ($totaliLettureServizi['unitaAbitative'] as $unita){

                if( !isset($unita->qx_vol_j) ){
                    $unita->qx_vol_j;
                }
                if( !isset($unita->qx_vol_j) ){
                    $unita->sx_vol_j;
                }

                // Consumo appartamento
                $sommaripartitori[$nomeServizio] += $unita->totaliLetture[$nomeServizio]['ur'];
                $sommacontatori[$nomeServizio] += $unita->totaliLetture[$nomeServizio]['cc'];
                $unita->qx_vol_j[$nomeServizio] =  ($UR_tot[$nomeServizio] > 0 ? $Qx_vol_daripartire[$nomeServizio] * $unita->totaliLetture[$nomeServizio]['ur'] / $UR_tot[$nomeServizio] : 0) + $unita->totaliLetture[$nomeServizio]['cc'];


                //Consumi rilevati totali di unità abitative e spazi collettivi
                $consumirilevati[$nomeServizio] += $unita->qx_vol_j[$nomeServizio];

                if( $unita->isUsoCollettivo() ) {

                    $Qx_uc[$nomeServizio] += $unita->qx_vol_j[$nomeServizio];
                    $n_locali_uc++;
                }else{
                    $n_unita++;
                }

            }


            //TODO: Verifica
            //La somma tra involontario e volontario non da l'energia erogata. Devo stoppare o adeguare l'involontario?
            if( ($Qx_vol_daripartire[$nomeServizio]>0) && ($sommaripartitori[$nomeServizio]==0) ){

                // 1 - C'è un'incongruenza tra i valori. Esco e segnalo l'errore.
                /*
                $titolo_esito = "Attenzione!";
                $messaggio_esito = "La somma tra involontario e volontario non da l'energia erogata";
                return Response::redirect(RouterService::getRoute(Bolletta::getEntity().".mod")->build(["id"=>$idBolletta, "tab"=>"2-tab","message"=>$messaggio_esito,"titlemsg"=>$titolo_esito]));
                */

                // 2 - C'è un'incongruenza tra i valori. Adeguo l'involontario.
                $Qx_inv[$nomeServizio] = $Qx_tot[$nomeServizio] - $sommacontatori[$nomeServizio];
                $Qx_vol_daripartire[$nomeServizio] = 0;
            }

            /*
             * Problema dell'involontario (calcolato o preso dai dati?)
             * Se ho i dati rilevati dai conta calorie sia in uscita che di consumo allora lo rilevo come differenza?
             * */
            if( ($sommaripartitori[$nomeServizio]>0)&&($sommacontatori[$nomeServizio]>0) ){
                //Contatori E Ripartitori
                //Teoricamente questo caso è già controllato e gestito sopra
            }else if( ($sommaripartitori[$nomeServizio]==0)&&($sommacontatori[$nomeServizio]>0) ){
                //Solo Contatori
                //Adeguo l'involontario
                $Qx_inv[$nomeServizio] = $Qx_tot[$nomeServizio] - $sommacontatori[$nomeServizio];
            }else if( ($sommaripartitori[$nomeServizio]>0)&&($sommacontatori[$nomeServizio]==0) ){
                //Solo Ripartitori
                //Va bene così.
            }else{
                //Nessun consumo - Esci
                $titolo_esito = "Operazione fallita!";
                $messaggio_esito = "Nessun consumo rilevato nel periodo considerato.";
                return Response::redirect(RouterService::getRoute(Bolletta::getEntity().".mod")->build(["id"=>$idBolletta, "tab"=>"2-tab","message"=>$messaggio_esito,"titlemsg"=>$titolo_esito]));
            }


            //
            // TODO: Capire come gestire il caso di ripartitori + Contatori sullo stesso servizio.
            //
            $Qx_vol[$nomeServizio] = $Qx_tot[$nomeServizio] - $Qx_inv[$nomeServizio]; // - $Qcc[$nomeServizio];
            if( $Qx_vol[$nomeServizio] < 0 ){
                $titolo_esito = "Operazione fallita!";
                $messaggio_esito = "Il QX vol è < 0 - I Consumi erogati sono minori di quelli dispersi dal sistema";
                return Response::redirect(RouterService::getRoute(Bolletta::getEntity().".mod")->build(["id"=>$idBolletta, "tab"=>"2-tab","message"=>$messaggio_esito,"titlemsg"=>$titolo_esito]));
            }

            if($Qx_inv[$nomeServizio] < 0){
                $titolo_esito = "Operazione fallita!";
                $messaggio_esito = "Il QX_INV è < 0 - I Consumi involontari risultano negativi!";
                return Response::redirect(RouterService::getRoute(Bolletta::getEntity().".mod")->build(["id"=>$idBolletta, "tab"=>"2-tab","message"=>$messaggio_esito,"titlemsg"=>$titolo_esito]));
            }


            if($Qx_vol_daripartire[$nomeServizio] < 0){

                $titolo_esito = "Operazione fallita!";
                $messaggio_esito = "Il QX vol - Qx_cc è < 0 - I Consumi erogati sono minori di quelli dispersi dal sistema sommati a quelli rilevati dai Contacalorie. <br /><br /> Calorie: $Qx_vol_daripartire[$nomeServizio] - Servizio: $nomeServizio";
                return Response::redirect(RouterService::getRoute(Bolletta::getEntity().".mod")->build(["id"=>$idBolletta, "tab"=>"2-tab","message"=>$messaggio_esito,"titlemsg"=>$titolo_esito]));
            }



            // Calcolo CX (nuovo metodo)

            //Se normativa 1 qui devo usare il $K_coeff_vett per dividere la spesa sul servizio.

            //$spesa_volontaria[$nomeServizio] = $Sx_tot * $K_coeff[$nomeServizio] / $Qx_tot[$nomeServizio] * $consumirilevati[$nomeServizio];
            $spesa_volontaria[$nomeServizio] = $Sx_tot_servizi[$nomeServizio]  / $Qx_tot[$nomeServizio] * $consumirilevati[$nomeServizio];
            //$spesa_volontaria[$nomeServizio] = $Sx_tot * $K_coeff[$nomeServizio] / $Qx_tot[$nomeServizio] * ($Qx_tot[$nomeServizio] - $Qx_inv[$nomeServizio]);



            //Dato da unità abitative e spazi collettivi
            $consumo_volontario[$nomeServizio] = $consumirilevati[$nomeServizio];



            try{
                $Cx_nuovo[$nomeServizio] = $spesa_volontaria[$nomeServizio] / $consumo_volontario[$nomeServizio];
                //$Cx_nuovo[$nomeServizio] = $Sx_tot_servizi[$nomeServizio] / $Qx_tot[$nomeServizio];
                $Cx[$nomeServizio] = $Cx_nuovo[$nomeServizio];
            }catch(\Exception $e){
                $Cx[$nomeServizio] = 0;

                $titolo_esito = "Operazione fallita!";
                $messaggio_esito = "Errore nel calcolo del Cx - Nessun consumo volontario sul servizio: ".$nomeServizio;
                return Response::redirect(RouterService::getRoute(Bolletta::getEntity().".mod")->build(["id"=>$idBolletta, "tab"=>"2-tab","message"=>$messaggio_esito,"titlemsg"=>$titolo_esito]));
            }


            /*
            var_dump("Qx_vol: ".$Qx_vol[$nomeServizio]);
            echo "<br />";
            var_dump("UR_tot: ".$UR_tot[$nomeServizio]);
            echo "<br />";
            var_dump("spesa_volontaria: ".$spesa_volontaria[$nomeServizio]);
            echo "<br />";
            var_dump("conumo volontario: ".$consumo_volontario[$nomeServizio]);
            echo "<br />";
            var_dump("Cx nuovo: $Cx_nuovo[$nomeServizio] = $spesa_volontaria[$nomeServizio] / $consumo_volontario[$nomeServizio]");
            echo "<br />";
            var_dump("vecchio metodo: $Cx[$nomeServizio] = $Sx_tot * $K_coeff[$nomeServizio] / $Qx_tot[$nomeServizio]");
            echo "<br />";
            */


            //Ora che ho il CX - ciclo nuovamente gli appartamenti per il calcolo della spesa volontaria
            foreach ($totaliLettureServizi['unitaAbitative'] as $key => $unita){
                if( $unita->isUsoCollettivo() ) continue;

                // Spesa volontaria appartamento
                $unita->sx_vol_j[$nomeServizio] = $Cx[$nomeServizio] * $unita->qx_vol_j[$nomeServizio];

            }




            if($consideraUsoCollettivo){
                //scindo le spese tra uso collettivo e non
                //normative: 10200:2015 e 141/2016

                //Spesa locali ad uso collettivo
                $Sx_uc[$nomeServizio] = $Cx[$nomeServizio] * $Qx_uc[$nomeServizio];
                //Spesa involontaria
                $Sx_p[$nomeServizio] = ($Cx[$nomeServizio] * $Qx_inv[$nomeServizio]);



            }else{
                //metto tutto nelle spese totali, niente spese collettive
                //normativa: 10200:2018
                $Sx_uc[$nomeServizio] = 0;
                $Sx_p[$nomeServizio] = $Cx[$nomeServizio] * ($Qcc[$nomeServizio] + $Qx_inv[$nomeServizio]);
            }



            //PORTO IL CALCOLO DELLA SPESA DENTRO IL SERVIZIO (NEW)

            //Le spese le divido in base a questo coefficiente: $K_coeff[$nomeServizio]

            //Spesa totale comprensiva di manutenzione e spesa contatori
            $Sx_p_tot[$nomeServizio] = $Sx_p[$nomeServizio]
                + $bolletta->spese_di_manutenzione * $K_coeff[$nomeServizio]
                + ( $bolletta->tipo_gestione == 0 ? $bolletta->costo_gestione_contatori * $K_coeff[$nomeServizio] :0 );

            /*
            if($nomeServizio=="acs"){
                echo "$Sx_p[$nomeServizio] = ($Cx[$nomeServizio] * $Qx_inv[$nomeServizio])";
                echo "<br>";
                var_dump($Sx_p[$nomeServizio]);
                echo "<br>";
                var_dump($bolletta->spese_di_manutenzione);
                echo "<br>";
                var_dump($bolletta->costo_gestione_contatori);
                exit;
            }
            */



            $millesimi_per_calcolo = "";
            if($nomeServizio=="cli"){
                switch($millesimi_da_usare){
                    case "millesimiNuovi":
                        $millesimi_per_calcolo = "millesimi".strtoupper($nomeServizio);
                        break;

                    case "equiripartizione":
                        //Devo calcolare i millesimi da ripartire ed associarli alle unità abitative
                        $millesimi_per_calcolo = $millesimi_da_usare; //"equiripartizione";

                        $num_unit_utili = 0;
                        foreach ($totaliLettureServizi['unitaAbitative'] as $item) {
                            if( $item->isUsoCollettivo() ) continue;
                            $num_unit_utili++;
                        }
                        $millesimi_unitari = (float)1000.0/$num_unit_utili;
                        foreach ($totaliLettureServizi['unitaAbitative'] as $item) {
                            if( $item->isUsoCollettivo() ) continue;
                            $item->$millesimi_per_calcolo = number_format($millesimi_unitari,1);
                        }
                        break;

                    default:
                        $millesimi_per_calcolo = $millesimi_da_usare;

                }
            }else{
                //per ACS e CLE uso sempre il millesimo standard
                $millesimi_per_calcolo = "millesimi".strtoupper($nomeServizio);
            }


            if($millesimi_per_calcolo!=""){
                $millesimipercalcolo_PDF[$nomeServizio] = $millesimi_per_calcolo;
            }


            //Calcolo millesimi totali
            $millesimiUtilizzatiTot = 0;
            $millesimiProprietaTot = 0;
            foreach ($totaliLettureServizi['unitaAbitative'] as $item) {
                if( $item->isUsoCollettivo() ) continue;
                $millesimiUtilizzatiTot += $item->$millesimi_per_calcolo;
                $millesimiProprietaTot += $item->millesimi;
            }

            if($millesimiUtilizzatiTot==0){
                //darebbe un errore di divisione per 0 sui calcoli. Esco subito con errore.
                $titolo_esito = "Operazione fallita!";
                $messaggio_esito = "<br>Millesimi scelti non definiti nelle unità abitative.<br><br>La somma totale dei ".$millesimi_usati_label." è pari a zero.<br><br>Controllare l'anagrafica delleUnità Abitative del condominio ed assicurarsi di aver inserito correttamente i millesimi.";
                return Response::redirect(RouterService::getRoute(Bolletta::getEntity().".mod")->build(["id"=>$idBolletta, "tab"=>"2-tab","message"=>$messaggio_esito,"titlemsg"=>$titolo_esito]));
            }


            $costocontatoriCondominio = 0;
            $numeroTotaleContatori = 0;

            foreach ($totaliLettureServizi['unitaAbitative'] as $unita){
                //Non calcolo le bollette sui locali ad uso collettivo
                if( $unita->isUsoCollettivo() ) continue;

                $totaleCostoContatori = 0;

                //Calcolo la spesa dei contatori nel caso in cui sia fissato un costo-a-ripartitore e non un costo totale.
                if( $bolletta->tipo_gestione == 1 ){
                    // controllare contatore se attivo o no ( probabilmente da aggiungere un campo nello schema contatore )
                    $numeroContatori = Contatore::query(true)->where("idUnitaAbitativa=".$unita->id)->count();

                    $totaleCostoContatori = $numeroContatori * $bolletta->costo_gestione_contatori;
                    $numeroTotaleContatori += $numeroContatori;
                    $costocontatoriCondominio += $totaleCostoContatori;
                    $unita->costocontatori = $totaleCostoContatori;
                    $unita->numerocontatori = $numeroContatori;

                }

                // Calcolo della spesa dell'unità abitativa:
                $unita->spesa_involontaria[$nomeServizio] = $Sx_p_tot[$nomeServizio] * ($unita->$millesimi_per_calcolo /$millesimiUtilizzatiTot)
                    + $totaleCostoContatori * $K_coeff[$nomeServizio];



                if($Sx_uc[$nomeServizio]>0){
                    if($millesimiProprietaTot>0){
                        $unita->spesa_usocollettivo[$nomeServizio] = $Sx_uc[$nomeServizio] * $unita->millesimi / $millesimiProprietaTot;
                    }else{
                        echo "Occorre definire i millesimi di proprietà dei locali.";
                        exit();
                    }
                }
                else{
                    $unita->spesa_usocollettivo[$nomeServizio] = 0;
                }


                $unita->Sx_tot_j[$nomeServizio] = $unita->sx_vol_j[$nomeServizio]
                    + $unita->spesa_involontaria[$nomeServizio]
                    + $unita->spesa_usocollettivo[$nomeServizio];
                //FINE DEL CALCOLO


            }

            $bolletta->costocontatoriCondominio = $costocontatoriCondominio;
            $bolletta->numeroTotaleContatori = $numeroTotaleContatori;

        }





        $totunita=0;
        foreach($totaliLettureServizi['unitaAbitative'] as $unita){
            if(is_array($unita->Sx_tot_j))
                $totunita += array_sum($unita->Sx_tot_j);
        }


        //RICALCOLO IL TOTALE DELLE BOLLETTE PER IL REPORT E COME CONTROLLO
        foreach ($consumi as $value){
            $totaleConsumi += $value->spesa_nel_periodo;
        }


        $totale_spese_condominio = $totaleConsumi + $bolletta->spese_di_manutenzione + ( $bolletta->tipo_gestione == 0 ? $bolletta->costo_gestione_contatori :0 ) + ( $bolletta->tipo_gestione == 1 ? $costocontatoriCondominio :0 );


        $totale_bollette_unita = 0;
        foreach ($totaliLettureServizi['unitaAbitative'] as $unita){
            if(is_array($unita->Sx_tot_j))
                $totale_bollette_unita += array_sum($unita->Sx_tot_j);
        }

        //Controllo che la somma delle spese coincida con la somma delle bollette
        //Mi lascio uno scarto di 1€ per eventuali arrotondamenti
        if(abs($totale_bollette_unita - $totale_spese_condominio) > 1){

            $titolo_esito = "Attenzione!!";
            $messaggio_esito = "Errore nel calcolo bolletta - Totali bollette non coerenti con le spese";
            /*
            return Response::redirect(RouterService::getRoute(Bolletta::getEntity().".mod")->build(["id"=>$idBolletta, "tab"=>"2-tab","message"=>$messaggio_esito,"titlemsg"=>$titolo_esito]));
            */
        }


        $matricedatipdf[$indice_riga][0] = "Numero Unita' immobiliari";
        $matricedatipdf[$indice_riga][1] = "";
        $matricedatipdf[$indice_riga][2] = $n_unita;
        $matricedatipdf[$indice_riga][3] = "";
        $indice_riga++;
        $matricedatipdf[$indice_riga][0] = "Numero Locali Uso Collettivo";
        $matricedatipdf[$indice_riga][1] = "";
        $matricedatipdf[$indice_riga][2] = $n_locali_uc;
        $matricedatipdf[$indice_riga][3] = "";
        $indice_riga++;

        if($sommaripartitori["cli"]+$sommaripartitori["cle"] >0){
            if($sommacontatori["cli"]+$sommacontatori["cle"] > 0){
                $tipocontab = "Misto";
            }else{
                $tipocontab = "Ripartitore";
            }
        }else{
            if($sommacontatori["cli"]+$sommacontatori["cle"] > 0){
                $tipocontab = "Contatore";
            }else{
                $tipocontab = "-";
            }
        }
        $sommacontatori[$nomeServizio] = 0;
        $matricedatipdf[$indice_riga][0] = "Tipologia Contabilizzazione Energia Termica Unita' Immobiliari - CLIMA";
        $matricedatipdf[$indice_riga][1] = "";
        $matricedatipdf[$indice_riga][2] = $tipocontab;
        $matricedatipdf[$indice_riga][3] = "";
        $indice_riga++;
        if($sommaripartitori["acs"] >0){
            if($sommacontatori["acs"] > 0){
                $tipocontab = "Misto";
            }else{
                $tipocontab = "Ripartitore";
            }
        }else{
            if($sommacontatori["acs"] > 0){
                $tipocontab = "Contatore";
            }else{
                $tipocontab = "-";
            }
        }
        $matricedatipdf[$indice_riga][0] = "Tipologia Contabilizzazione Energia Termica Unita' Immobiliari - ACS";
        $matricedatipdf[$indice_riga][1] = "";
        $matricedatipdf[$indice_riga][2] = $tipocontab;
        $matricedatipdf[$indice_riga][3] = "";
        $indice_riga++;
        $matricedatipdf[$indice_riga][0] = "Periodo di Contabilizzazione";
        $matricedatipdf[$indice_riga][1] = "";
        $matricedatipdf[$indice_riga][2] = $condominio->PeriodoContabilizzazione;
        $matricedatipdf[$indice_riga][3] = "";
        $matricedatipdf[$indice_riga][4] = "B";
        $indice_riga++;

        $matricedatipdf[$indice_riga][0] = "Spesa Totale per Conduzione e Manutenzione Impianto Termico";
        $matricedatipdf[$indice_riga][1] = "Scm";
        $matricedatipdf[$indice_riga][2] = self::set_euro($bolletta->spese_di_manutenzione);
        $matricedatipdf[$indice_riga][3] = PDF::EURO();
        $indice_riga++;
        $matricedatipdf[$indice_riga][0] = "Spesa Totale per Gestione Servizio di Contabilizzazione Consumi";
        $matricedatipdf[$indice_riga][1] = "Scr";
        $matricedatipdf[$indice_riga][2] = self::set_euro( $bolletta->tipo_gestione == 0 ? $bolletta->costo_gestione_contatori :0 );
        $matricedatipdf[$indice_riga][3] = PDF::EURO();
        $matricedatipdf[$indice_riga][4] = "B";
        $indice_riga++;

        $matricedatipdf[$indice_riga][0] = "Fabbisogno Annuo Energia Termica Utile Edificio - CLIMATIZZAZIONE INVERNALE";
        $matricedatipdf[$indice_riga][1] = "Qh,cli";
        $matricedatipdf[$indice_riga][2] = (float)$tot_fabbisogno["cli"];
        $matricedatipdf[$indice_riga][3] = "kWh";
        $indice_riga++;
        $matricedatipdf[$indice_riga][0] = "Fabbisogno Annuo Energia Termica Utile Edificio - ACS";
        $matricedatipdf[$indice_riga][1] = "Qh,acs";
        $matricedatipdf[$indice_riga][2] = (float)$tot_fabbisogno["acs"];
        $matricedatipdf[$indice_riga][3] = "kWh";
        $indice_riga++;
        $matricedatipdf[$indice_riga][0] = "Fabbisogno Annuo Energia Termica Utile Edificio - CLIMATIZZAZIONE ESTIVA";
        $matricedatipdf[$indice_riga][1] = "Qh,cle";
        $matricedatipdf[$indice_riga][2] = (float)$tot_fabbisogno["cle"];
        $matricedatipdf[$indice_riga][3] = "kWh";
        $indice_riga++;
        /*
        // ************************
        //controllo esito del calcolo (riprova)
        // ************************

        $totalePrezzoAbitazioni = 0;
        foreach ($totaliLettureServizi['unitaAbitative'] as $unita){
            $totalePrezzoAbitazioni += array_sum($unita->Sx_tot_j);
        }
        $totaleConsumi = 0;
        foreach ($consumi as $value){
            $totaleConsumi += $value->spesa_nel_periodo;
        }

        var_dump($totalePrezzoAbitazioni,$totaleConsumi + $bolletta->spese_di_manutenzione + ( $bolletta->tipo_gestione == 0 ? $bolletta->costo_gestione_contatori :0 ) + ( $bolletta->tipo_gestione == 1 ? $costocontatoriCondominio :0 ) );

        */


        /*
         * ELIMINO TUTTE LE FATTURE PRECEDENTEMENTE CREATE
         * */
        $fatturetoremove = Fattura::query()->where("idBolletta=".$idBolletta)->getAll();
        foreach ($fatturetoremove as $key => $thisfattura){
            $ilfile = Environment::$ROOT . $thisfattura->pdf;
            if(is_file($ilfile) && file_exists($ilfile)){
                unlink($ilfile);
            }
            $thisfattura->remove();
        }



        //
        //Da Terminare... la creazione dei report PDF:
        //

        $subdir = self::slugify($condominio->id."-".$condominio->denominazione);

        $dir_period = self::data_a_url($bolletta->data_periodo_inizio)."_".self::data_a_url($bolletta->data_periodo_fine);
        $dir = Environment::$ROOT."/documenti/fornitori/bollette/".$subdir."/".$dir_period."/";

        //Carico i dati del prospetto millesimale per il layout del PDF

        //prima lo recupero dal condominio
        $idLayout = $condominio->idLayoutProspettoMillesimale;
        //poi controllo se è definito a livello di Bolletta, nel caso uso questo.
        if($bolletta->idLayoutProspettoMillesimale>0)
            $idLayout = $bolletta->idLayoutProspettoMillesimale;

        $layout = LayoutProspettoMillesimale::findById($idLayout);
        if(!$layout){
            $titolo_esito = "Operazione fallita!";
            $messaggio_esito = "Nessun Layout impostato per la bollettazione. Associarlo al condominio.";
            return Response::redirect(RouterService::getRoute(Bolletta::getEntity().".mod")->build(["id"=>$idBolletta, "tab"=>"2-tab","message"=>$messaggio_esito,"titlemsg"=>$titolo_esito]));
        }

        $margine = 5;
        $margineTop = $margine;
        $largA4 = 210;
        $altA4 = 297;
        $lameta = ($largA4-($margine*2))/2;
        $unterzo = ($largA4-($margine*2))/3;
        $unquarto = ($largA4-($margine*2))/4;
        $mioFont = $layout->font;
        $colore = $layout->colore;
        $colore = ($colore!="")?$colore:"#FF0000";
        $hriga = 7;
        $fontsizebase = 10;

        foreach ($totaliLettureServizi['unitaAbitative'] as $unita){
            if( $unita->isUsoCollettivo() ){
                $dati_unita_uc[$index_unita_uc][0] = $index_unita_uc+1;
                $dati_unita_uc[$index_unita_uc][1] = $unita->denominazione;
                $tot_ur = $unita->totaliLetture["cli"]['ur'] + $unita->totaliLetture["acs"]['ur'] + $unita->totaliLetture["cle"]['ur'];
                $tot_cc = $unita->totaliLetture["cli"]['cc'] + $unita->totaliLetture["acs"]['cc'] + $unita->totaliLetture["cle"]['cc'];
                if(($tot_ur>0)&&($tot_cc>0)){
                    $tipocontab = "Mista";
                }else{
                    if($tot_ur>0){
                        $tipocontab = "Ripartitore";
                    }else if($tot_cc>0){
                        $tipocontab = "Contacalorie";
                    }else{
                        $tipocontab = "-";
                    }
                }
                $dati_unita_uc[$index_unita_uc][2] = $tipocontab;
                $dati_unita_uc[$index_unita_uc][3] = self::set_euro($unita->qx_vol_j["cli"]);
                $dati_unita_uc[$index_unita_uc][4] = self::set_euro($unita->qx_vol_j["acs"]);
                $dati_unita_uc[$index_unita_uc][5] = self::set_euro($unita->qx_vol_j["cle"]);
                $dati_unita_uc[$index_unita_uc][6] = $tot_ur;
                $dati_unita_uc[$index_unita_uc][7] = $tot_cc;
                $index_unita_uc++;

                $dati_consumitot[0+3][1] += (float)$unita->qx_vol_j["cli"];
                $dati_consumitot[1+3][1] += (float)$unita->qx_vol_j["acs"];
                $dati_consumitot[2+3][1] += (float)$unita->qx_vol_j["cle"];
            }else{
                $dati_unita[$index_unita][0] = $index_unita+1;
                $dati_unita[$index_unita][1] = $unita->denominazione;
                $tot_ur = $unita->totaliLetture["cli"]['ur'] + $unita->totaliLetture["acs"]['ur'] + $unita->totaliLetture["cle"]['ur'];
                $tot_cc = $unita->totaliLetture["cli"]['cc'] + $unita->totaliLetture["acs"]['cc'] + $unita->totaliLetture["cle"]['cc'];
                if(($tot_ur>0)&&($tot_cc>0)){
                    $tipocontab = "Mista";
                }else{
                    if($tot_ur>0){
                        $tipocontab = "Ripartitore";
                    }else if($tot_cc>0){
                        $tipocontab = "Contacalorie";
                    }else{
                        $tipocontab = "-";
                    }
                }
                $dati_unita[$index_unita][2] = $tipocontab;
                $dati_unita[$index_unita][3] = self::set_euro($unita->qx_vol_j["cli"]);
                $dati_unita[$index_unita][4] = self::set_euro($unita->qx_vol_j["acs"]);
                $dati_unita[$index_unita][5] = self::set_euro($unita->qx_vol_j["cle"]);
                $dati_unita[$index_unita][6] = self::set_euro($tot_ur);
                $dati_unita[$index_unita][7] = self::set_euro($tot_cc);
                $index_unita++;

                $dati_consumitot[0][1] += (float)$unita->qx_vol_j["cli"];
                $dati_consumitot[1][1] += (float)$unita->qx_vol_j["acs"];
                $dati_consumitot[2][1] += (float)$unita->qx_vol_j["cle"];
            }



            //Se uso collettivo salto tutto il resto
            if( $unita->isUsoCollettivo() ) continue;

            $pdf = new PDF('P','mm','A4');

            $pdf->setLogo(Environment::$ROOT . $layout->logo);
            $pdf->creaIntestazionePDF($mioFont, $fontsizebase, $layout, $margine, $unterzo, $margineTop, $colore, $footer_normativa);


            //DA QUI INIZIANO I DATI
            $datiYleft = $pdf->GetY();


            /******************************/
            /* COLONNA DI DESTRA */
            /*****************************/

            //colonna di sinistra
            $offset_colonna = 0;
            $width = $lameta;
            //colonna di destra
            //$offset_colonna = $lameta;
            //$width = 0;


            $pdf->SetX($margine + $offset_colonna);
            $pdf->stampaTitolo("DATI CLIENTE",$fontsizebase,$hriga,'B','L',0,$width);
            //
            $pdf->setColoreBasePari();
            $pdf->SetX($margine + $offset_colonna);
            $pdf->Cell($width,$hriga,'Numero Cliente: '.$unita->codice."/".$condominio->codice,0,1,'L',1);
            $pdf->setColoreInverso();
            $pdf->SetX($margine + $offset_colonna);
            $pdf->Cell($width,$hriga,'Riferimento: '. $condominio->denominazione,0,1,'L',1);
            $pdf->setColoreInverso();
            $pdf->SetX($margine + $offset_colonna);
            $pdf->Cell($width,$hriga,'Scala: '.$unita->scala.', Piano '.$unita->piano.', Interno: '.$unita->interno,0,1,'L',1);

            $pdf->SetX($margine + $offset_colonna);
            $pdf->stampaTitolo("ANAGRAFICA",$fontsizebase,$hriga,'B','L',0,$width);
            //
            $pdf->setColoreBasePari();
            $pdf->SetX($margine + $offset_colonna);
            $pdf->Cell($width,$hriga, strtoupper($unita->denominazione),0,1,'L',1);
            $pdf->setColoreInverso();
            $pdf->SetX($margine + $offset_colonna);
            $pdf->Cell($width,$hriga,'',0,1,'L',1);
            $pdf->setColoreInverso();
            $pdf->SetX($margine + $offset_colonna);
            $pdf->Cell($width,$hriga,'',0,1,'L',1);

            $pdf->SetX($margine + $offset_colonna);
            $pdf->stampaTitolo("RIEPILOGO IMPORTI FATTURATI",$fontsizebase,$hriga,'B','L',0,$width);




            //
            $pdf->SetFontSize($fontsizebase);
            $pdf->setColoreBasePari();
            $pdf->SetX($margine + $offset_colonna);
            $pdf->Cell($unquarto+30,$hriga, "Spese climatizzazione invernale",0,0,'L',1);
            $spesa = self::set_euro($unita->Sx_tot_j["cli"]);
            $pdf->Cell($unquarto-30,$hriga, $spesa . " Euro",0,1,'R',1);

            $pdf->setColoreInverso();
            $pdf->SetX($margine + $offset_colonna);
            $pdf->Cell($unquarto+30,$hriga, "Spese acqua calda sanitaria",0,0,'L',1);
            $spesa = self::set_euro($unita->Sx_tot_j["acs"]);
            $pdf->Cell($unquarto-30,$hriga, $spesa . " Euro",0,1,'R',1);

            $pdf->setColoreInverso();
            $pdf->SetX($margine + $offset_colonna);
            $pdf->Cell($unquarto+30,$hriga, "Spese climatizzazione estiva",0,0,'L',1);
            $spesa = self::set_euro($unita->Sx_tot_j["cle"]);
            $pdf->Cell($unquarto-30,$hriga, $spesa . " Euro",0,1,'R',1);


            $pdf->SetFontSize($fontsizebase-1);
            $pdf->setColoreInverso();
            $hcurr = $pdf->GetY();
            $pdf->SetX($margine + $offset_colonna);
            $pdf->MultiCell($unquarto,$hriga-2,'Criterio di ripartizione della spesa totale per potenza termica installata',0,'L',1);
            $pdf->SetXY($margine + $offset_colonna + $unquarto, $hcurr  );
            $pdf->MultiCell($unquarto,$hriga-2,$descrizione_normativa_pdf,0,'R',1);


            $pdf->SetFontSize($fontsizebase);
            $pdf->setColoreInverso();
            $pdf->SetX($margine + $offset_colonna);

            if(($bolletta->normativa==0)||($bolletta->coeff==0)){
                //normativa 10200:2015
                $pdf->Cell($unquarto+30,$hriga, "Tipologia calcolo involontario",0,0,'L',1);
                $pdf->Cell($unquarto-30,$hriga, "UNI TS 11300",0,1,'R',1);
            }else{
                $pdf->Cell($unquarto+30,$hriga, "Percentuale quota fissa",0,0,'L',1);
                $spesa = number_format($bolletta->coeff*100, 0,',',".");
                $pdf->Cell($unquarto-30,$hriga, $spesa,0,1,'R',1);
            }





            //Altezza raggiunta con la colonna di destra
            $hcurr = $pdf->GetY();


            /******************************/
            /* BOX TOTALE DI SINISTRA */
            /*****************************/

            //colonna di sinistra
            //$offset_colonna = 0;
            //colonna di destra
            $offset_colonna = $lameta + $margine;


            /* VECCHIO BOX con bordo arrotondato
            $pdf->setColoreTitoli();
            $pdf->RoundedRect($margine, $datiYleft, $lameta-$margine, ($hcurr-$datiYleft), 5, '1234', 'DF');
            $pdf->setColoreBasePari();
            $pdf->RoundedRect($margine+$margine, $datiYleft+$margine, $lameta-$margine-($margine*2), ($hcurr-$datiYleft-($margine*2)), 5, '1234', 'DF');
             */
            $pdf->setColoreTitoli();
            $pdf->RoundedRect($margine + $offset_colonna, $datiYleft, $lameta-$margine, ($hcurr-$datiYleft), 0, '1234', 'DF');
            $pdf->setColoreBasePari();
            $pdf->RoundedRect($margine+1 + $offset_colonna, $datiYleft+1, $lameta-$margine-2, ($hcurr-$datiYleft-2), 0, '1234', 'DF');


            $pdf->setXY($margine+$margine+$offset_colonna, $datiYleft+$margine + $hriga );
            $pdf->setColorePrincipaleTesti();
            $pdf->Cell($lameta-$margine-($margine*2), $hriga,"SPESA PER CLIMATIZZAZIONE E ACS",0,1,'C',0);

            $pdf->setXY($margine+$margine+$offset_colonna, $datiYleft+$margine + $hriga*2 );
            $pdf->setColoreBase();
            $pdf->Cell($lameta-$margine-($margine*2), $hriga,"dal ".self::data_a_video($bolletta->data_periodo_inizio)." al ".self::data_a_video($bolletta->data_periodo_fine),0,1,'C',0);

            //
            $pdf->setColoreBase();
            $pdf->SetFont($mioFont,'B',$fontsizebase+10);

            $pdf->setXY($margine+$margine+$margine+$offset_colonna, $datiYleft+$margine + (($hcurr-$datiYleft-($margine*2))/2) - ($hriga) );
            $spesa = self::set_euro(array_sum($unita->Sx_tot_j));
            $pdf->Cell($lameta-$margine-($margine*4), $hriga+2,'Totale',0,1,'C',0);
            $pdf->setX($margine+$margine+$margine+$offset_colonna );
            $pdf->Cell($lameta-$margine-($margine*4), $hriga+5,PDF::EURO()." ".$spesa,0,1,'C',0);




            /******************************/
            /* SEZIONE CLIMA ESTIVO E INVERNALE */
            /*****************************/
            $pdf->SetY($hcurr + $margine +$hriga/2);
            $pdf->SetX($margine);

            $pdf->stampaTitolo("DETTAGLIO CLIMATIZZAZIONE",$fontsizebase,$hriga,'B','L',0,$lameta,0);
            $pdf->stampaTitolo("",$fontsizebase,$hriga,'B','C',0,$lameta/3,0);
            $pdf->stampaTitolo("ESTIVA",$fontsizebase,$hriga,'B','C',0,$lameta/3,0);
            $pdf->stampaTitolo("INVERNALE",$fontsizebase,$hriga,'B','C',0,0,1);


            //           $pdf->SetY($pdf->GetY()+$hriga/2);

            $pdf->SetFont($mioFont,'',$fontsizebase);
            $pdf->setColoreBasePari();
            $pdf->Cell($lameta,$hriga,'Consumo dal '.self::data_a_video($bolletta->data_periodo_inizio)." al ".self::data_a_video($bolletta->data_periodo_fine),0,0,'L',1);
            $pdf->Cell($lameta/3,$hriga,'Ur',0,0,'C',1);
            $pdf->Cell($lameta/3,$hriga,str_replace(".",",", $unita->totaliLetture["cle"]['ur']),0,0,'C',1);
            $pdf->Cell(0,$hriga,str_replace(".",",", $unita->totaliLetture["cli"]['ur']) ,0,1,'C',1);
            $pdf->setColoreInverso();
            $pdf->Cell($lameta,$hriga,'Consumo dal '.self::data_a_video($bolletta->data_periodo_inizio)." al ".self::data_a_video($bolletta->data_periodo_fine),0,0,'L',1);
            $pdf->Cell($lameta/3,$hriga,'Cc',0,0,'C',1);
            $pdf->Cell($lameta/3,$hriga,str_replace(".",",", $unita->totaliLetture["cle"]['cc']),0,0,'C',1);
            $pdf->Cell(0,$hriga,str_replace(".",",", $unita->totaliLetture["cli"]['cc']),0,1,'C',1);

            $pdf->SetY($pdf->GetY()+$hriga/2);


            foreach ($K_coeff as $kkey => $vval){
                //DIVIDO LE SPESE INVOLONTARIE SECONDO IL COEFFICIENTE CALCOLATO SOPRA
                $spesa_inv_x[$kkey] = $unita->spesa_involontaria[$kkey];
                //DIVIDO LE SPESE LOCALI USO COLLETTIVO SECONDO IL COEFFICIENTE CALCOLATO SOPRA
                $spesa_UC_x[$kkey] = $unita->spesa_usocollettivo[$kkey];
            }




            $pdf->SetFont($mioFont,'',$fontsizebase);
            $pdf->setColoreInverso();
            $pdf->Cell($lameta,$hriga,"Spesa per consumo volontario",0,0,'L',1);
            $pdf->Cell($lameta/3,$hriga,PDF::EURO(),0,0,'C',1);
            $pdf->Cell($lameta/3,$hriga,self::set_euro($unita->sx_vol_j["cle"]),0,0,'C',1);
            $pdf->Cell(0,$hriga,self::set_euro($unita->sx_vol_j["cli"]) ,0,1,'C',1);
            $pdf->setColoreInverso();
            $pdf->Cell($lameta,$hriga,"Spesa per consumo involontario",0,0,'L',1);
            $pdf->Cell($lameta/3,$hriga,PDF::EURO(),0,0,'C',1);
            $pdf->Cell($lameta/3,$hriga,self::set_euro($spesa_inv_x["cle"]),0,0,'C',1);
            $pdf->Cell(0,$hriga,self::set_euro($spesa_inv_x["cli"]),0,1,'C',1);
            $pdf->setColoreInverso();
            $pdf->Cell($lameta,$hriga,"Spesa locali uso collettivo",0,0,'L',1);
            $pdf->Cell($lameta/3,$hriga,PDF::EURO(),0,0,'C',1);
            $pdf->Cell($lameta/3,$hriga,self::set_euro($spesa_UC_x["cle"]),0,0,'C',1);
            $pdf->Cell(0,$hriga,self::set_euro($spesa_UC_x["cli"]) ,0,1,'C',1);


            $pdf->SetFont($mioFont,'B',$fontsizebase);
            $pdf->setColoreInverso();
            $pdf->Cell($lameta,$hriga+1,"Spesa per climatizzazione",0,0,'L',1);
            $pdf->Cell($lameta/3,$hriga+1,PDF::EURO(),0,0,'C',1);
            $pdf->Cell($lameta/3,$hriga+1,self::set_euro($unita->Sx_tot_j["cle"]),0,0,'C',1);
            $pdf->Cell(0,$hriga+1,self::set_euro($unita->Sx_tot_j["cli"]) ,0,1,'C',1);

            $pdf->SetFont($mioFont,'',$fontsizebase);


            /******************************/
            /* SEZIONE ACQUA CALDA SANITARIA */
            /*****************************/
            $pdf->SetX($margine);
            $pdf->SetY($pdf->GetY()+$hriga/2);
            $pdf->stampaTitolo("DETTAGLIO ACQUA CALDA SANITARIA (ACS)",$fontsizebase,$hriga);

//            $pdf->SetY($pdf->GetY()+$hriga/2);

            $pdf->SetFont($mioFont,'',$fontsizebase+1);
            $pdf->setColoreBasePari();
            $pdf->Cell($lameta,$hriga,'Consumo dal '.self::data_a_video($bolletta->data_periodo_inizio)." al ".self::data_a_video($bolletta->data_periodo_fine),0,0,'L',1);
            $pdf->Cell($lameta/3,$hriga,'',0,0,'C',1);
            $pdf->Cell($lameta/3,$hriga,"Mc",0,0,'C',1);
            $pdf->Cell(0,$hriga,number_format($unita->totaliLetture["acs"]['cc']/self::CoeffConvACS,2,",",".") ,0,1,'C',1);

            $pdf->SetY($pdf->GetY()+$hriga/2);

            $pdf->SetFont($mioFont,'',$fontsizebase);
            $pdf->setColoreInverso();
            $pdf->Cell($lameta,$hriga,"Spesa per consumo volontario",0,0,'L',1);
            $pdf->Cell($lameta/3,$hriga,"",0,0,'C',1);
            $pdf->Cell($lameta/3,$hriga,PDF::EURO(),0,0,'C',1);
            $pdf->Cell(0,$hriga,self::set_euro($unita->sx_vol_j["acs"]) ,0,1,'C',1);
            $pdf->setColoreInverso();
            $pdf->Cell($lameta,$hriga,"Spesa per consumo involontario",0,0,'L',1);
            $pdf->Cell($lameta/3,$hriga,"",0,0,'C',1);
            $pdf->Cell($lameta/3,$hriga,PDF::EURO(),0,0,'C',1);
            $pdf->Cell(0,$hriga,self::set_euro($spesa_inv_x["acs"]),0,1,'C',1);
            $pdf->setColoreInverso();
            $pdf->Cell($lameta,$hriga,"Spesa locali uso collettivo",0,0,'L',1);
            $pdf->Cell($lameta/3,$hriga,"",0,0,'C',1);
            $pdf->Cell($lameta/3,$hriga,PDF::EURO(),0,0,'C',1);
            $pdf->Cell(0,$hriga,self::set_euro($spesa_UC_x["acs"]) ,0,1,'C',1);



            //Servono per il report consuntivo
            $matrice_spesetot[0] = $bolletta->tipo_gestione == 0 ? $bolletta->costo_gestione_contatori : $bolletta->costocontatoriCondominio;
            $matrice_spesetot[1] += $unita->sx_vol_j["cli"];
            $matrice_spesetot[2] += $unita->sx_vol_j["acs"];
            $matrice_spesetot[3] += $unita->sx_vol_j["cle"];
            $matrice_spesetot[4] += $spesa_UC_x["cli"];
            $matrice_spesetot[5] += $spesa_UC_x["acs"];
            $matrice_spesetot[6] += $spesa_UC_x["cle"];
            $matrice_spesetot[7] += $spesa_inv_x["cli"];
            $matrice_spesetot[8] += $spesa_inv_x["acs"];
            $matrice_spesetot[9] += $spesa_inv_x["cle"];
            $matrice_spesesingole[$indice_spesesingole][0] = $indice_spesesingole+1;
            $matrice_spesesingole[$indice_spesesingole][1] = $unita->sx_vol_j["cli"];
            $matrice_spesesingole[$indice_spesesingole][2] = $unita->sx_vol_j["acs"];
            $matrice_spesesingole[$indice_spesesingole][3] = $unita->sx_vol_j["cle"];
            $matrice_spesesingole[$indice_spesesingole][4] = $spesa_UC_x["cli"];
            $matrice_spesesingole[$indice_spesesingole][5] = $spesa_UC_x["acs"];
            $matrice_spesesingole[$indice_spesesingole][6] = $spesa_UC_x["cle"];
            $matrice_spesesingole[$indice_spesesingole][7] = $spesa_inv_x["cli"];
            $matrice_spesesingole[$indice_spesesingole][8] = $spesa_inv_x["acs"];
            $matrice_spesesingole[$indice_spesesingole][9] = $spesa_inv_x["cle"];
            $indice_spesesingole++;


            $pdf->SetFont($mioFont,'B',$fontsizebase);
            $pdf->setColoreInverso();
            $pdf->Cell($lameta,$hriga+1,"Spesa per acqua calda sanitaria (ACS)",0,0,'L',1);
            $pdf->Cell($lameta/3,$hriga+1,"",0,0,'C',1);
            $pdf->Cell($lameta/3,$hriga+1,PDF::EURO(),0,0,'C',1);
            $pdf->Cell(0,$hriga+1,self::set_euro($unita->Sx_tot_j["acs"]) ,0,1,'C',1);

            $pdf->SetFont($mioFont,'',$fontsizebase);

            /******************************/
            /* SECONDA PAGINA */
            /*****************************/
            $pdf->AddPage();

            $pdf->SetFont($mioFont,'B',$fontsizebase);
            $pdf->setColoreBase();
            $pdf->Cell(0,$hriga+1,"VALORI UTILIZZATI SECONDO LA DETERMINAZIONE DEI COSTI ".$nome_costi,0,1,'C',0);
            $pdf->SetY($pdf->GetY()+$hriga/2);

            $pdf->stampaTitolo("DETTAGLIO CONSUMI E SPESE TOTALI",$fontsizebase+3,$hriga+2);

            $pdf->SetFont($mioFont,'',$fontsizebase-2);
            $pdf->setColoreBasePari();
            $unoottavo = ($largA4-($margine*2))/8;
            foreach ($matricedatipdf as $key=>$riga) {
                if(isset($riga[4]) && $riga[4]=="B"){
                    $pdf->SetDrawColor(50,50,50);
                    $bordi = 'B';
                }else{
                    $bordi = 0;
                }
                $pdf->Cell($unoottavo*5 + 10,$hriga-1,$riga[0],$bordi,0,'L',1);
                $pdf->Cell($unoottavo-10,$hriga-1, $riga[1] ,$bordi,0,'L',1);
                $pdf->Cell($unoottavo+10,$hriga-1, $riga[2] ,$bordi,0,'C',1);
                $pdf->Cell($unoottavo-10,$hriga-1, $riga[3] ,$bordi,1,'C',1);
                $pdf->setColoreInverso();
            }

            $pdf->SetY($pdf->GetY()+$hriga/2);

            $pdf->stampaTitolo("CONSUMI CONTATORI GENERALI",$fontsizebase,$hriga);

            $pdf->SetFont($mioFont,'',$fontsizebase-2);
            $pdf->setColoreBasePari();
            foreach ($matricecontatorigenerali as $key=>$riga) {
                $pdf->Cell($unoottavo*5 + 10,$hriga-1,$riga[0],0,0,'L',1);
                $pdf->Cell($unoottavo-10,$hriga-1, $riga[1] ,0,0,'L',1);
                $pdf->Cell($unoottavo+10,$hriga-1, $riga[2] ,0,0,'C',1);
                $pdf->Cell($unoottavo-10,$hriga-1, $riga[3] ,0,1,'C',1);
                $pdf->setColoreInverso();
            }


            //Salto pagina e vado ai dettagli unità abitativa
            $pdf->AddPage();
            $pdf->SetFont($mioFont,'B',$fontsizebase);
            $pdf->setColoreBase();
            $pdf->Cell(0,$hriga+1,"VALORI UTILIZZATI SECONDO LA DETERMINAZIONE DEI COSTI ".$nome_costi,0,1,'C',0);



            //ciclo i servizi
            $elencoripartitori = [];
            $elencocontatori = [];
            $elencoripartitori_tot = 0;
            $elencocontatori_tot = 0;
            foreach($K_coeff as $servizio=>$valoreinutile){



                $totali[$servizio] = [];

                //recupero elenco delle matricole dei ripartitori
                $query = Contatore::query(false);
                $query = self::tipologiaMisurazionePerServizio($servizio,$query);
                $contatori = $query->setFields(Contatore::getTable().".*")
                    ->where("idUnitaAbitativa = ".$unita->id)
                    ->where("tipoDispositivo=1")
                    ->setOrderBy("codice","ASC")
                    ->getAll();


                $totale = 0;
                foreach ($contatori as $contatore){
                    // Letture per ripartitori
                    $query = LetturaContatore::query(false);
                    $query = self::tipologiaMisurazionePerServizio($servizio,$query);
                    $letture = $query->setFields(LetturaContatore::getTable().".*, ".Contatore::getTable().".codice, ".Contatore::getTable().".ubicazione")
                        ->join(Contatore::class,"id","idContatore")
                        ->where("contatore.id = ".$contatore->id)
                        ->where(LetturaContatore::getTable().".dataLettura >= '".$bolletta->data_periodo_inizio."'")
                        ->where(LetturaContatore::getTable().".dataLettura <= '".$bolletta->data_periodo_fine."'")
                        ->where("contatore.tipoDispositivo=1")
                        ->setOrderBy("dataLettura","ASC")
                        ->setLimit(999999,0)
                        ->getAll();

                    $contalo = 0;
                    foreach ($letture as $value){
                        if($contalo==0){
                            $elencoripartitori[$value->codice]["data_primo"] = $value->dataLettura;
                        }else{
                            $elencoripartitori[$value->codice]["data_ultimo"] = $value->dataLettura;
                            $elencoripartitori[$value->codice]["val"] += (float)$value->deltaLettura;
                            $elencoripartitori[$value->codice]["serv"] = $servizio;
                            $elencoripartitori[$value->codice]["ubic"] = $value->ubicazione;
                            $elencoripartitori_tot += (float)$value->deltaLettura;
                        }
                        $contalo++;
                    }
                }



                //recupero elenco delle matricole dei contacalorie
                $query = Contatore::query(false);
                $query = self::tipologiaMisurazionePerServizio($servizio,$query);
                $contatori = $query->setFields(Contatore::getTable().".*")
                    ->where("idUnitaAbitativa = ".$unita->id)
                    ->where("contatore.tipoDispositivo=2")
                    ->setOrderBy("codice","ASC")
                    ->getAll();

                $totale = 0;
                foreach ($contatori as $contatore){
                    // Letture per contatori calorie
                    $query = LetturaContatore::query(false);
                    $query = self::tipologiaMisurazionePerServizio($servizio,$query);
                    $letture = $query->setFields(LetturaContatore::getTable().".*, ".Contatore::getTable().".codice, ".Contatore::getTable().".ubicazione")
                        ->join(Contatore::class,"id","idContatore")
                        ->where("contatore.id = ".$contatore->id)
                        ->where(LetturaContatore::getTable().".dataLettura >= '".$bolletta->data_periodo_inizio."'")
                        ->where(LetturaContatore::getTable().".dataLettura <= '".$bolletta->data_periodo_fine."'")
                        ->setOrderBy("dataLettura","ASC")
                        ->setLimit(999999,0)
                        ->where("contatore.tipoDispositivo=2")->getAll();

                    $contalo = 0;
                    foreach ($letture as $value){
                        if($contalo==0){
                            $elencocontatori[$value->codice]["data_primo"] = $value->dataLettura;
                        }else {
                            $elencocontatori[$value->codice]["data_ultimo"] = $value->dataLettura;
                            $elencocontatori[$value->codice]["val"] += (float)$value->deltaLettura;
                            $elencocontatori[$value->codice]["serv"] = $servizio;
                            $elencocontatori[$value->codice]["ubic"] = $value->ubicazione;
                            $elencocontatori_tot += (float)$value->deltaLettura;
                        }
                        $contalo++;
                    }

                }


            }


            $matricelettureunitaimmobiliare = [];
            $indice_riga_unitaimmobiliare = 0;

            if(count($elencoripartitori)>0 || count($elencocontatori)>0){

                $pdf->SetY($pdf->GetY()+$hriga/2);

                $pdf->stampaTitolo("DETTAGLIO CONSUMI E SPESE INDIVIDUALI",$fontsizebase+3,$hriga+2);

                $pdf->SetFont($mioFont,'',$fontsizebase-2);
                $pdf->setColoreBasePari();

            }


            $progr=1;
            foreach($elencocontatori as $key=>$val){
                $matricelettureunitaimmobiliare[$indice_riga_unitaimmobiliare][0] = "Consumo totale del contatore " . ($indice_riga_unitaimmobiliare+1) . " serv: ".$val["serv"]. " - ".$val["ubic"] . " - mat. " . $key;
                $matricelettureunitaimmobiliare[$indice_riga_unitaimmobiliare][1] = "C,c," . $progr . ",".self::indiceDaServizio($val["serv"]);
                $matricelettureunitaimmobiliare[$indice_riga_unitaimmobiliare][2] = number_format($val["val"], 2,",",".");
                $matricelettureunitaimmobiliare[$indice_riga_unitaimmobiliare][3] = "kWh";
                $matricelettureunitaimmobiliare[$indice_riga_unitaimmobiliare][4] = "";
                $matricelettureunitaimmobiliare[$indice_riga_unitaimmobiliare][5] = self::data_a_video($val["data_primo"],"d/m/y");
                $matricelettureunitaimmobiliare[$indice_riga_unitaimmobiliare][6] = self::data_a_video($val["data_ultimo"],"d/m/y");
                $indice_riga_unitaimmobiliare++;
                $progr++;
            }
            if(count($elencocontatori)>0){
                $matricelettureunitaimmobiliare[$indice_riga_unitaimmobiliare][0] = "Consumi totali dei contatori";
                $matricelettureunitaimmobiliare[$indice_riga_unitaimmobiliare][1] = "C,c,tot";
                $matricelettureunitaimmobiliare[$indice_riga_unitaimmobiliare][2] = number_format($elencocontatori_tot, 2,",",".");
                $matricelettureunitaimmobiliare[$indice_riga_unitaimmobiliare][3] = "kWh";
                $matricelettureunitaimmobiliare[$indice_riga_unitaimmobiliare][4] = "B";
                $indice_riga_unitaimmobiliare++;
            }



            $progr=1;
            foreach($elencoripartitori as $key=>$val){
                $matricelettureunitaimmobiliare[$indice_riga_unitaimmobiliare][0] = "Consumo totale del ripartitore " . ($indice_riga_unitaimmobiliare+1) . " serv: ".$val["serv"]. " - ".$val["ubic"] . " - mat. " . $key;
                $matricelettureunitaimmobiliare[$indice_riga_unitaimmobiliare][1] = "C,r," . $progr . ",".self::indiceDaServizio($val["serv"]);
                $matricelettureunitaimmobiliare[$indice_riga_unitaimmobiliare][2] = number_format($val["val"], 2,",",".");
                $matricelettureunitaimmobiliare[$indice_riga_unitaimmobiliare][3] = "Ur";
                $matricelettureunitaimmobiliare[$indice_riga_unitaimmobiliare][4] = "";
                $matricelettureunitaimmobiliare[$indice_riga_unitaimmobiliare][5] = self::data_a_video($val["data_primo"],"d/m/y");
                $matricelettureunitaimmobiliare[$indice_riga_unitaimmobiliare][6] = self::data_a_video($val["data_ultimo"],"d/m/y");
                $indice_riga_unitaimmobiliare++;
                $progr++;
            }
            if(count($elencoripartitori)>0){
                $matricelettureunitaimmobiliare[$indice_riga_unitaimmobiliare][0] = "Consumi totali dei ripartitori";
                $matricelettureunitaimmobiliare[$indice_riga_unitaimmobiliare][1] = "Cr1";
                $matricelettureunitaimmobiliare[$indice_riga_unitaimmobiliare][2] = number_format($elencoripartitori_tot, 2,",",".");
                $matricelettureunitaimmobiliare[$indice_riga_unitaimmobiliare][3] = "Ur";
                $matricelettureunitaimmobiliare[$indice_riga_unitaimmobiliare][4] = "B";
                $indice_riga_unitaimmobiliare++;
            }


            foreach ($matricelettureunitaimmobiliare as $key=>$riga) {
                $pdf->SetFont("",$riga[4]);
                $pdf->Cell($unoottavo*4+15,$hriga-1,$riga[0],0,0,'L',1);
                $pdf->Cell($unoottavo-5,$hriga-1, $riga[5] ,0,0,'L',1);
                $pdf->Cell($unoottavo-5,$hriga-1, $riga[6] ,0,0,'L',1);
                $pdf->Cell($unoottavo-10,$hriga-1, $riga[1] ,0,0,'L',1);
                $pdf->Cell($unoottavo-5,$hriga-1, $riga[2] ,0,0,'C',1);
                $pdf->Cell(10,$hriga-1, $riga[3] ,0,1,'C',1);
                $pdf->setColoreInverso();
            }

            $pdf->SetY($pdf->GetY()+$hriga/2);
            $pdf->stampaTitolo("MILLESIMI",$fontsizebase,$hriga);

            $pdf->SetFont($mioFont,'',$fontsizebase-2);
            $pdf->setColoreBasePari();

            $matricelettureunitaimmobiliare = [];
            $indice_riga_unitaimmobiliare = 0;

            if(self::showthisservice("cli",$K_coeff,$layout->nascondiServiziInutilizzati)){
                $mill_to_print = $unita->millesimiCLI;
                $matricelettureunitaimmobiliare[$indice_riga_unitaimmobiliare][0] = "Millesimi di fabbisogno energia termica utile per climatizzazione invernale";
                $matricelettureunitaimmobiliare[$indice_riga_unitaimmobiliare][1] = "mQh,cli,1";
                $matricelettureunitaimmobiliare[$indice_riga_unitaimmobiliare][2] = $mill_to_print;
                $matricelettureunitaimmobiliare[$indice_riga_unitaimmobiliare][3] = "";
                $indice_riga_unitaimmobiliare++;
            }

            if(self::showthisservice("acs",$K_coeff,$layout->nascondiServiziInutilizzati)) {
                $mill_to_print = $unita->millesimiACS;
                $matricelettureunitaimmobiliare[$indice_riga_unitaimmobiliare][0] = "Millesimi di fabbisogno energia termica utile per ACS";
                $matricelettureunitaimmobiliare[$indice_riga_unitaimmobiliare][1] = "mQh,acs,1";
                $matricelettureunitaimmobiliare[$indice_riga_unitaimmobiliare][2] = $mill_to_print;
                $matricelettureunitaimmobiliare[$indice_riga_unitaimmobiliare][3] = "";
                $indice_riga_unitaimmobiliare++;
            }

            if(self::showthisservice("cle",$K_coeff,$layout->nascondiServiziInutilizzati)) {
                $mill_to_print = $unita->millesimiCLE;
                $matricelettureunitaimmobiliare[$indice_riga_unitaimmobiliare][0] = "Millesimi di fabbisogno energia termica utile per climatizzazione estiva";
                $matricelettureunitaimmobiliare[$indice_riga_unitaimmobiliare][1] = "mQh,cle,1";
                $matricelettureunitaimmobiliare[$indice_riga_unitaimmobiliare][2] = $mill_to_print;
                $matricelettureunitaimmobiliare[$indice_riga_unitaimmobiliare][3] = "";
                $indice_riga_unitaimmobiliare++;
            }


            if($unita->millesimi>0){
                //millesimi di proprietà
                $mill_to_print = $unita->millesimi;
                $matricelettureunitaimmobiliare[$indice_riga_unitaimmobiliare][0] = "Millesimi di proprietà";
                $matricelettureunitaimmobiliare[$indice_riga_unitaimmobiliare][1] = "mQh,pro,1";
                $matricelettureunitaimmobiliare[$indice_riga_unitaimmobiliare][2] = $mill_to_print;
                $matricelettureunitaimmobiliare[$indice_riga_unitaimmobiliare][3] = "";
                $indice_riga_unitaimmobiliare++;
            }

            if ( ($millesimi_da_usare == "millesimiVecchi") || ($millesimi_da_usare == "millesimiGenerali")  || ($millesimi_da_usare == "equiripartizione") ) {
                $mill_to_print = $unita->$millesimi_da_usare;
                //$millesimi_usati_label
                $matricelettureunitaimmobiliare[$indice_riga_unitaimmobiliare][0] = "Altri millesimi ($millesimi_usati_label)";
                $matricelettureunitaimmobiliare[$indice_riga_unitaimmobiliare][1] = "mQh,ami,1";
                $matricelettureunitaimmobiliare[$indice_riga_unitaimmobiliare][2] = $mill_to_print;
                $matricelettureunitaimmobiliare[$indice_riga_unitaimmobiliare][3] = "";
                $indice_riga_unitaimmobiliare++;
            }

            foreach ($matricelettureunitaimmobiliare as $key=>$riga) {
                $pdf->Cell($unoottavo*5 + 10,$hriga-1,$riga[0],0,0,'L',1);
                $pdf->Cell($unoottavo-10,$hriga-1, $riga[1] ,0,0,'L',1);
                $pdf->Cell($unoottavo+10,$hriga-1, $riga[2] ,0,0,'C',1);
                $pdf->Cell($unoottavo-10,$hriga-1, $riga[3] ,0,1,'C',1);
                $pdf->setColoreInverso();
            }


            /*
             * RIEPILOGO CALCOLO DEI CONSUMI ENERGIA
             * */
            $pdf->SetY($pdf->GetY()+$hriga/2);
            $pdf->stampaTitolo("CALCOLO DELL'ENERGIA CONSUMATA UNITA' IMMOBILIARE",$fontsizebase,$hriga);

            $pdf->SetFont($mioFont,'',$fontsizebase-2);
            $pdf->setColoreBasePari();

            //tutto questo mega casino è per la gestione del saltopagina sulla riga
            if($pdf->GetY()>PDF::MAXSALTOPAGINA)
                $pdf->AddPage();
            $hcurr = $pdf->GetY();
            $pdf->SetX($lameta+$margine);
            $pdf->Cell($lameta-10,($hriga-1)*2, "(".$Qx_tot["cli"]." - " .$Qx_inv["cli"]. " - " . $Qcc["cli"] . ") * ".$unita->totaliLetture["cli"]['ur']." / (".$UR_tot["cli"].") = ". number_format($unita->qx_vol_j["cli"],2,",",".") ,0,0,'C',1);
            $pdf->Cell(10,($hriga-1)*2, "kWh" ,0,1,'C',1);
            if($pdf->GetY()<$hcurr){
                $pdf->SetY( $pdf->GetY() - ($hriga-1)*2 );
            }else{
                $pdf->SetY($hcurr);
            }
            $pdf->MultiCell($lameta,$hriga-1,"Calcolo del consumo di energia termica utile per climatizzazione invernale\nQui,cli,1 = (Qcli - Qinv,cli - Qcc,cli) * Cr1 / (Cr1 + Cr2 +...+ Crn)",0,'L',1);

            if($unita->totaliLetture["acs"]['cc']>0){
                $pdf->setColoreInverso();

                //tutto questo mega casino è per la gestione del saltopagina sulla riga
                if($pdf->GetY()>PDF::MAXSALTOPAGINA)
                    $pdf->AddPage();
                $hcurr = $pdf->GetY();
                $pdf->SetX($lameta+$margine);
                $pdf->Cell($lameta-10,($hriga-1)*2, number_format($unita->totaliLetture["acs"]['cc']/self::CoeffConvACS,2,",",".") . " * 38.346,00 = ". number_format($unita->totaliLetture["acs"]['cc'],2,",",".") ,0,0,'C',1);
                $pdf->Cell(10,($hriga-1)*2, "kWh" ,0,1,'C',1);
                if($pdf->GetY()<$hcurr){
                    $pdf->SetY( $pdf->GetY() - ($hriga-1)*2 );
                }else{
                    $pdf->SetY($hcurr);
                }
                $pdf->MultiCell($lameta,$hriga-1,"Calcolo del consumo di energia termica utile per acqua calda sanitaria\nQui,acs,1 = Mc,acs,1 * mv * qt * (Oacs - Of)",0,'L',1);

            }



            /*
             * RIEPILOGO CALCOLI DELLE SPESE
             * */

            $pdf->SetY($pdf->GetY()+$hriga/2);
            $pdf->stampaTitolo("CALCOLO DELLA SPESA TOTALE UNITA' IMMOBILIARE",$fontsizebase,$hriga);

            $pdf->SetFont($mioFont,'',$fontsizebase-2);
            $pdf->setColoreBasePari();

            $matricecalcolispese = [];
            $indice_riga_calcolispese = 0;


            $matricecalcolispese[$indice_riga_calcolispese][0] = "Costo unitario dell'energia termica utile per climatizzazione invernale";
            $matricecalcolispese[$indice_riga_calcolispese][1] = "Ccli = Sp,v,cli / Qcli";
            $matricecalcolispese[$indice_riga_calcolispese][2] = $Cx["cli"]>0 ? self::set_euro($spesa_volontaria["cli"]) . " / ".self::set_euro($consumo_volontario["cli"])." = " . number_format($Cx["cli"],3,",","''") : "";
            $matricecalcolispese[$indice_riga_calcolispese][3] = "[".PDF::EURO()."/kWh]";
            $matricecalcolispese[$indice_riga_calcolispese][4] = $Cx["cli"];
            $matricecalcolispese[$indice_riga_calcolispese][5] = "cli";
            $indice_riga_calcolispese++;

            $matricecalcolispese[$indice_riga_calcolispese][0] = "Costo unitario dell'energia termica utile per ACS";
            $matricecalcolispese[$indice_riga_calcolispese][1] = "Cacs = Sp,v,acs / Qacs";
            $matricecalcolispese[$indice_riga_calcolispese][2] = $Cx["acs"]>0 ? self::set_euro($spesa_volontaria["acs"]) . " / ".self::set_euro($consumo_volontario["acs"])." = " . number_format($Cx["acs"],3,",","''") : "";
            $matricecalcolispese[$indice_riga_calcolispese][3] = "[".PDF::EURO()."/kWh]";
            $matricecalcolispese[$indice_riga_calcolispese][4] = $Cx["acs"];
            $matricecalcolispese[$indice_riga_calcolispese][5] = "acs";
            $indice_riga_calcolispese++;

            $matricecalcolispese[$indice_riga_calcolispese][0] = "Costo unitario dell'energia termica utile per climatizzazione estiva";
            $matricecalcolispese[$indice_riga_calcolispese][1] = "Ccle = Sp,v,cle / Qcle";
            $matricecalcolispese[$indice_riga_calcolispese][2] = $Cx["cle"]>0 ? self::set_euro($spesa_volontaria["cle"]) . " / ".self::set_euro($consumo_volontario["cle"])." = " . number_format($Cx["cle"],3,",","''") : "";
            $matricecalcolispese[$indice_riga_calcolispese][3] = "[".PDF::EURO()."/kWh]";
            $matricecalcolispese[$indice_riga_calcolispese][4] = $Cx["cle"];
            $matricecalcolispese[$indice_riga_calcolispese][5] = "cle";
            $indice_riga_calcolispese++;



            $matricecalcolispese[$indice_riga_calcolispese][0] = "Calcolo spesa per consumo energia termica utile per climatiz. invernale";
            $matricecalcolispese[$indice_riga_calcolispese][1] = "Sui,cli,1 = Ccli * Qui,cli,1";
            $matricecalcolispese[$indice_riga_calcolispese][2] = number_format($Cx["cli"],3,",",".") . " * " . self::set_euro($unita->qx_vol_j["cli"]) . " = " . self::set_euro($unita->sx_vol_j["cli"]);
            $matricecalcolispese[$indice_riga_calcolispese][3] = PDF::EURO();
            $matricecalcolispese[$indice_riga_calcolispese][4] = $unita->sx_vol_j["cli"];
            $matricecalcolispese[$indice_riga_calcolispese][5] = "cli";
            $indice_riga_calcolispese++;

            $matricecalcolispese[$indice_riga_calcolispese][0] = "Calcolo della spesa per consumo di energia termica utile per ACS";
            $matricecalcolispese[$indice_riga_calcolispese][1] = "Sui,acs,1 = Cacs * Qui,acs,1";
            $matricecalcolispese[$indice_riga_calcolispese][2] = number_format($Cx["acs"],3,",",".") . " * " . self::set_euro($unita->qx_vol_j["acs"]) . " = " . self::set_euro($unita->sx_vol_j["acs"]);
            $matricecalcolispese[$indice_riga_calcolispese][3] = PDF::EURO();
            $matricecalcolispese[$indice_riga_calcolispese][4] = $unita->sx_vol_j["acs"];
            $matricecalcolispese[$indice_riga_calcolispese][5] = "acs";
            $indice_riga_calcolispese++;

            $matricecalcolispese[$indice_riga_calcolispese][0] = "Calcolo spesa per consumo di energia termica utile per climatiz. estiva";
            $matricecalcolispese[$indice_riga_calcolispese][1] = "Sui,cle,1 = Ccle * Qui,cle,1";
            $matricecalcolispese[$indice_riga_calcolispese][2] = number_format($Cx["cle"],3,",",".") . " * " . self::set_euro($unita->qx_vol_j["cle"]) . " = " . self::set_euro($unita->sx_vol_j["cle"]);
            $matricecalcolispese[$indice_riga_calcolispese][3] = PDF::EURO();
            $matricecalcolispese[$indice_riga_calcolispese][4] = $unita->sx_vol_j["cle"];
            $matricecalcolispese[$indice_riga_calcolispese][5] = "cle";
            $indice_riga_calcolispese++;

            $matricecalcolispese[$indice_riga_calcolispese][0] = "Calcolo della spesa per servizio di contabilizzazione";
            $matricecalcolispese[$indice_riga_calcolispese][1] = "scr = costo a ripartitore * numero ripartitori";
            $matricecalcolispese[$indice_riga_calcolispese][2] = ($bolletta->tipo_gestione == 1 ? self::set_euro($bolletta->costo_gestione_contatori) : 0) . " * ". (int)$unita->numerocontatori ." = ".self::set_euro($unita->costocontatori);
            $matricecalcolispese[$indice_riga_calcolispese][3] = PDF::EURO();
            $matricecalcolispese[$indice_riga_calcolispese][4] = $unita->costocontatori;
            $matricecalcolispese[$indice_riga_calcolispese][5] = "all";
            $indice_riga_calcolispese++;


            $valmill = $millesimipercalcolo_PDF["cli"];
            $matricecalcolispese[$indice_riga_calcolispese][0] = "Calcolo spesa per potenza termica installata per climatiz. invernale";
            $matricecalcolispese[$indice_riga_calcolispese][1] = "Sp,cli,1 = scr + (Spcli * mCli,1 / mCli,tot)";
            $matricecalcolispese[$indice_riga_calcolispese][2] = self::set_euro($bolletta->tipo_gestione == 1 ? ($unita->costocontatori*$K_coeff["cli"]) : ($totaleCostoContatori * $K_coeff["cli"])). " + (". self::set_euro($Sx_p_tot["cli"])." * ".$unita->$valmill." / ".$millesimiUtilizzatiTot.") = ".self::set_euro($unita->spesa_involontaria["cli"]);
            $matricecalcolispese[$indice_riga_calcolispese][3] = PDF::EURO();
            $matricecalcolispese[$indice_riga_calcolispese][4] = $unita->spesa_involontaria["cli"];
            $matricecalcolispese[$indice_riga_calcolispese][5] = "cli";
            $indice_riga_calcolispese++;

            $valmill = $millesimipercalcolo_PDF["acs"];
            $matricecalcolispese[$indice_riga_calcolispese][0] = "Calcolo della spesa per potenza termica installata per ACS";
            $matricecalcolispese[$indice_riga_calcolispese][1] = "Sp,acs,1 = scr + (Spacs * mAcs,1 / mAcs,tot)";
            $matricecalcolispese[$indice_riga_calcolispese][2] = self::set_euro($bolletta->tipo_gestione == 1 ? ($unita->costocontatori*$K_coeff["acs"]) : ($totaleCostoContatori * $K_coeff["acs"])). " + (". self::set_euro($Sx_p_tot["acs"])." * ".$unita->$valmill." / ".$millesimiUtilizzatiTot.") = ".self::set_euro($unita->spesa_involontaria["acs"]);
            $matricecalcolispese[$indice_riga_calcolispese][3] = PDF::EURO();
            $matricecalcolispese[$indice_riga_calcolispese][4] = $unita->spesa_involontaria["acs"];
            $matricecalcolispese[$indice_riga_calcolispese][5] = "acs";
            $indice_riga_calcolispese++;

            $valmill = $millesimipercalcolo_PDF["cle"];
            $matricecalcolispese[$indice_riga_calcolispese][0] = "Calcolo spesa per potenza termica installata per climatiz. estiva";
            $matricecalcolispese[$indice_riga_calcolispese][1] = "Sp,cle,1 = scr + (Spcle * mCle,1 / mCle,tot)";
            $matricecalcolispese[$indice_riga_calcolispese][2] = self::set_euro($bolletta->tipo_gestione == 1 ? ($unita->costocontatori*$K_coeff["cle"]) : ($totaleCostoContatori * $K_coeff["cle"])). " + (". self::set_euro($Sx_p_tot["cle"])." * ".$unita->$valmill." / ".$millesimiUtilizzatiTot.") = ".self::set_euro($unita->spesa_involontaria["cle"]);
            $matricecalcolispese[$indice_riga_calcolispese][3] = PDF::EURO();
            $matricecalcolispese[$indice_riga_calcolispese][4] = $unita->spesa_involontaria["cle"];
            $matricecalcolispese[$indice_riga_calcolispese][5] = "cle";
            $indice_riga_calcolispese++;

//

            $matricecalcolispese[$indice_riga_calcolispese][0] = "Calcolo spesa per locali uso collettivo per climatiz. invernale";
            $matricecalcolispese[$indice_riga_calcolispese][1] = "Sp_uc,cli,1 = Stot_uc,cli * mPr,1 / mPr_tot";
            $matricecalcolispese[$indice_riga_calcolispese][2] = self::set_euro($Sx_uc["cli"])." * ".self::set_euro($unita->millesimi)." / ".self::set_euro($millesimiProprietaTot)." = ".self::set_euro($unita->spesa_usocollettivo["cli"]);
            $matricecalcolispese[$indice_riga_calcolispese][3] = PDF::EURO();
            $matricecalcolispese[$indice_riga_calcolispese][4] = $unita->spesa_usocollettivo["cli"];
            $matricecalcolispese[$indice_riga_calcolispese][5] = "cli";
            $indice_riga_calcolispese++;

            $matricecalcolispese[$indice_riga_calcolispese][0] = "Calcolo della spesa per locali uso collettivo per ACS";
            $matricecalcolispese[$indice_riga_calcolispese][1] = "Sp_uc,acs,1 = Stot_uc,acs * mPr,1 / mPr_tot";
            $matricecalcolispese[$indice_riga_calcolispese][2] = self::set_euro($Sx_uc["acs"])." * ".self::set_euro($unita->millesimi)." / ".self::set_euro($millesimiProprietaTot)." = ".self::set_euro($unita->spesa_usocollettivo["acs"]);
            $matricecalcolispese[$indice_riga_calcolispese][3] = PDF::EURO();
            $matricecalcolispese[$indice_riga_calcolispese][4] = $unita->spesa_usocollettivo["acs"];
            $matricecalcolispese[$indice_riga_calcolispese][5] = "acs";
            $indice_riga_calcolispese++;

            $matricecalcolispese[$indice_riga_calcolispese][0] = "Calcolo spesa per locali uso collettivo per climatiz. estiva";
            $matricecalcolispese[$indice_riga_calcolispese][1] = "Sp_uc,cle,1 = Stot_uc,cle * mPr,1 / mPr_tot";
            $matricecalcolispese[$indice_riga_calcolispese][2] = self::set_euro($Sx_uc["cle"])." * ".self::set_euro($unita->millesimi)." / ".self::set_euro($millesimiProprietaTot)." = ".self::set_euro($unita->spesa_usocollettivo["cle"]);
            $matricecalcolispese[$indice_riga_calcolispese][3] = PDF::EURO();
            $matricecalcolispese[$indice_riga_calcolispese][4] = $unita->spesa_usocollettivo["cle"];
            $matricecalcolispese[$indice_riga_calcolispese][5] = "cle";
            $indice_riga_calcolispese++;

//

            $matricecalcolispese[$indice_riga_calcolispese][0] = "Calcolo della spesa totale per climatizzazione invernale (CLI)";
            $matricecalcolispese[$indice_riga_calcolispese][1] = "Scli,1 = Sui,cli,1 + Sp,cli,1 + Sp_uc,cli,1";
            $matricecalcolispese[$indice_riga_calcolispese][2] = self::set_euro($unita->sx_vol_j["cli"])." + ".self::set_euro($unita->spesa_involontaria["cli"])." + ".self::set_euro($unita->spesa_usocollettivo["cli"])." = ".self::set_euro($unita->Sx_tot_j["cli"]);
            $matricecalcolispese[$indice_riga_calcolispese][3] = PDF::EURO();
            $matricecalcolispese[$indice_riga_calcolispese][4] = $unita->Sx_tot_j["cli"];
            $matricecalcolispese[$indice_riga_calcolispese][5] = "cli";
            $indice_riga_calcolispese++;

            $matricecalcolispese[$indice_riga_calcolispese][0] = "Calcolo della spesa totale per ACS";
            $matricecalcolispese[$indice_riga_calcolispese][1] = "Sacs,1 = Sui,acs,1 + Sp,acs,1 + Sp_uc,acs,1";
            $matricecalcolispese[$indice_riga_calcolispese][2] = self::set_euro($unita->sx_vol_j["acs"])." + ".self::set_euro($unita->spesa_involontaria["acs"])." + ".self::set_euro($unita->spesa_usocollettivo["acs"])." = ".self::set_euro($unita->Sx_tot_j["acs"]);
            $matricecalcolispese[$indice_riga_calcolispese][3] = PDF::EURO();
            $matricecalcolispese[$indice_riga_calcolispese][4] = $unita->Sx_tot_j["acs"];
            $matricecalcolispese[$indice_riga_calcolispese][5] = "acs";
            $indice_riga_calcolispese++;

            $matricecalcolispese[$indice_riga_calcolispese][0] = "Calcolo della spesa totale per climatizzazione estiva (CLE)";
            $matricecalcolispese[$indice_riga_calcolispese][1] = "Scle,1 = Sui,cle,1 + Sp,cle,1 + Sp_uc,cle,1";
            $matricecalcolispese[$indice_riga_calcolispese][2] = self::set_euro($unita->sx_vol_j["cle"])." + ".self::set_euro($unita->spesa_involontaria["cle"])." + ".self::set_euro($unita->spesa_usocollettivo["cle"])." = ".self::set_euro($unita->Sx_tot_j["cle"]);
            $matricecalcolispese[$indice_riga_calcolispese][3] = PDF::EURO();
            $matricecalcolispese[$indice_riga_calcolispese][4] = $unita->Sx_tot_j["cle"];
            $matricecalcolispese[$indice_riga_calcolispese][5] = "cle";
            $indice_riga_calcolispese++;

            $matricecalcolispese[$indice_riga_calcolispese][0] = "Calcolo della spesa totale per climatizzazione (CLI, CLE) e ACS";
            $matricecalcolispese[$indice_riga_calcolispese][1] = "St,1 = Scli,1 + Sacs,1 + Scle,1";
            $matricecalcolispese[$indice_riga_calcolispese][2] = self::set_euro($unita->Sx_tot_j["cli"])." + ".self::set_euro($unita->Sx_tot_j["acs"])." + ".self::set_euro($unita->Sx_tot_j["cle"])." = ".self::set_euro(array_sum($unita->Sx_tot_j));
            $matricecalcolispese[$indice_riga_calcolispese][3] = PDF::EURO();
            $matricecalcolispese[$indice_riga_calcolispese][4] = array_sum($unita->Sx_tot_j);
            $matricecalcolispese[$indice_riga_calcolispese][5] = "all";
            $indice_riga_calcolispese++;

            foreach ($matricecalcolispese as $key=>$riga) {
                if(!self::showthisservice($riga[5],$K_coeff,$layout->nascondiServiziInutilizzati)){
                    continue;
                }

                if($pdf->GetY()>PDF::MAXSALTOPAGINA)
                    $pdf->AddPage();
                $hcurr = $pdf->GetY();
                $pdf->SetX($lameta+$margine);

                $pdf->Cell($lameta-10,($hriga-1)*2, $riga[2] ,0,0,'C',1);
                $pdf->Cell(10,($hriga-1)*2, $riga[3] ,0,1,'C',1);
                if($pdf->GetY()<$hcurr){
                    $pdf->SetY( $pdf->GetY() - ($hriga-1)*2 );
                }else{
                    $pdf->SetY($hcurr);
                }
                $pdf->MultiCell($lameta,$hriga-1,$riga[0]."\n".$riga[1],0,'L',1);

                $pdf->setColoreInverso();
            }




            @mkdir($dir,0777,true);

            $filename = $dir . self::slugify(str_pad($bolletta->id,5,"0",STR_PAD_LEFT) . str_pad($unita->codice,3,"0",STR_PAD_LEFT) . "_" . $dir_period . "_" . $unita->denominazione) . ".pdf";
            $pdf->Output("F", $filename);

            $fattura = Fattura::query()->where("idBolletta=".$idBolletta)->where("idUnitaAbitativa=".$unita->id)->getOne();
            if(!$fattura)
                $fattura = new Fattura();

            $fattura->buildProperties([
                "idBolletta"    =>  $idBolletta,
                "idUnitaAbitativa" =>  $unita->id,
                "pdf"    =>  str_replace(Environment::$ROOT,"",$filename),
                "data_generazione"  =>  date("Y-m-d"),
                "totale"    =>  array_sum($unita->Sx_tot_j)
            ]);
            $fattura->save();


        }

        /*
         * ADESSO CREO IL PROSPETTO CONSUNTIVO
         * */


        $pdf = new PDF('P','mm','A4');

        $pdf->setLogo(Environment::$ROOT . $layout->logo);
        $pdf->creaIntestazionePDF($mioFont, $fontsizebase, $layout, $margine, $unterzo, $margineTop, $colore, $footer_normativa);


        //DA QUI INIZIANO I DATI [CONSUNTIVO]
        $hriga = $hriga;
        $fontsizebase = $fontsizebase;

        $pdf->SetFont($mioFont,'B',$fontsizebase+2);
        $pdf->Cell(0,$hriga+1,"PROSPETTO CONSUNTIVO DI RIPARTIZIONE DELLE SPESE",0,1,'L',0);

        $pdf->SetFont($mioFont,'',$fontsizebase+2);
        $pdf->Cell(0,$hriga+1,"PERIODO DAL ".self::data_a_video($bolletta->data_periodo_inizio). " AL ". self::data_a_video($bolletta->data_periodo_fine) ,0,1,'L',0);
        $pdf->SetY($pdf->GetY()+$hriga/2);


        $pdf->stampaTitolo("CONDOMINIO",$fontsizebase,$hriga);

        $pdf->SetFontSize($fontsizebase-1);
        //$pdf->Cell($unterzo,$hriga,"PERIODO ",0,1,'R',1);
        $pdf->setColoreBasePari();
        $pdf->Cell(0,$hriga,$condominio->denominazione,0,1,'L',1);
        //$pdf->Cell($unterzo,$hriga,"Dal: ".self::data_a_video($bolletta->data_periodo_inizio),0,1,'R',1);
        $pdf->setColoreInverso();
        $pdf->Cell(0,$hriga,"Codice Fiscale: ".$condominio->codiceFiscale,0,1,'L',1);
        //$pdf->Cell($unterzo,$hriga,"Al: ".self::data_a_video($bolletta->data_periodo_fine),0,1,'R',1);
        $pdf->setColoreInverso();
        $pdf->Cell(0,$hriga,"Indirizzo: ".self::creaIndirizzo($condominio->indirizzo,$condominio->cap,$condominio->citta,$condominio->provincia,$condominio->paese),0,1,'L',1);
        //$pdf->Cell($unterzo,$hriga,"Totale: ".self::set_euro($totale_bollette_unita)." ".PDF::EURO(),0,1,'R',1);

        $pdf->SetY($pdf->GetY()+$hriga/2);

        if($condominio->idAmministratoreCondominio>0){
            $amministratore = AmministratoreCondominio::findById($condominio->idAmministratoreCondominio);
            if($amministratore){
                $pdf->stampaTitolo("AMMINISTRATORE",$fontsizebase,$hriga);
                $pdf->SetFontSize($fontsizebase-1);
                $pdf->setColoreBasePari();
                $pdf->Cell(0,$hriga,$amministratore->nome . " " . $amministratore->cognome,0,1,'L',1);
                $pdf->setColoreInverso();
                $pdf->Cell(0,$hriga,"Codice Fiscale: ".$amministratore->codiceFiscale,0,1,'L',1);
                $pdf->setColoreInverso();
                $pdf->Cell(0,$hriga,"Indirizzo: ".self::creaIndirizzo($amministratore->indirizzo,$amministratore->cap,$amministratore->citta,$amministratore->provincia,$amministratore->paese),0,1,'L',1);
                if($amministratore->recapito!=""){
                    $pdf->setColoreInverso();
                    $pdf->Cell(0,$hriga,"Telefono: ".$amministratore->recapito,0,1,'L',1);
                }
            }
        }

        $pdf->SetY($pdf->GetY()+$hriga/2);

        if($condominio->idResponsabileImpianto>0){
            $responsabile = ResponsabileImpianto::findById($condominio->idResponsabileImpianto);
            if($responsabile){
                $pdf->stampaTitolo("RESPONSABILE DEGLI IMPIANTI",$fontsizebase,$hriga);
                $pdf->SetFontSize($fontsizebase-1);
                $pdf->setColoreBasePari();
                $pdf->Cell(0,$hriga,$responsabile->nome . " " . $responsabile->cognome,0,1,'L',1);
                $pdf->setColoreInverso();
                $pdf->Cell(0,$hriga,"Codice Fiscale: ".$responsabile->codiceFiscale,0,1,'L',1);
                $pdf->setColoreInverso();
                $pdf->Cell(0,$hriga,"Indirizzo: ".self::creaIndirizzo($responsabile->indirizzo,$responsabile->cap,$responsabile->citta,$responsabile->provincia,$responsabile->paese),0,1,'L',1);
                if($responsabile->recapito!=""){
                    $pdf->setColoreInverso();
                    $pdf->Cell(0,$hriga,"Telefono: ".$responsabile->recapito,0,1,'L',1);
                }
            }
        }

        $pdf->SetY($pdf->GetY()+$hriga/2);

        $pdf->stampaTitolo("OPZIONI DI CALCOLO",$fontsizebase,$hriga);
        $pdf->SetFontSize($fontsizebase-1);
        $pdf->setColoreBasePari();
        $pdf->stampaRigaComplessa([
            "Criterio di ripartizione della spesa totale per potenza termica",
            "installata per climatizzazione invernale (Sp,cli)",
            $descrizione_normativa_pdf],2,$hriga,$lameta,$margine);

        if(($bolletta->normativa==0)||($bolletta->coeff==0)){
            //normativa 10200:2015
            $pdf->setColoreInverso();
            $pdf->stampaRigaComplessa([
                "Tipologia di calcolo del consumo involontario di energia",
                "termica utile per climatizzazione invernale (Qinv,cli)",
                "Dato termotecnico UNI TS 11300"],2,$hriga,$lameta,$margine);
        }else{
            $pdf->setColoreInverso();
            $pdf->Cell($lameta,$hriga,"Percentuale quota fissa",0,0,'L',1);
            $pdf->Cell($lameta,$hriga,$bolletta->coeff*100 . " %",0,1,'R',1);
        }




        $pdf->SetY($pdf->GetY()+$hriga/2);
        $pdf->stampaTitolo("GENERATORI",$fontsizebase,$hriga);

        $datimat = [];
        $index = 0;
        $cols = 5;
        $datimat[$index][0] = "N.";
        $datimat[$index][1] = "Descrizione";
        $datimat[$index][2] = "Energia termica utile prodotta per";
        $datimat[$index][3] = "Energia termica utile prodotta";
        $datimat[$index][4] = "Energia termica utile prodotta per";
        $index++;
        $datimat[$index][0] = "";
        $datimat[$index][1] = "";
        $datimat[$index][2] = "climatizzazione invernale (Qgn,cli) [kWh]";
        $datimat[$index][3] = "per ACS (Qgn,acs) [kWh]";
        $datimat[$index][4] = "climatizzazione estiva (Qgn,cle) [kWh]";
        $index++;

        $datimat = array_merge($datimat, $dati_gen );
        $pdf->setColoreBasePari();
        $pdf->SetFontSize($fontsizebase-3);

        foreach($datimat as $key=>$val){
            $primacol = 8;
            $cmedia = ($largA4 - $margine*2 - $primacol ) / ($cols-1);
            for($i=0;$i<$cols;$i++){
                $lcol = ($i==0) ? $primacol : $cmedia;
                $accapo = $i==($cols-1);
                $pdf->Cell($lcol,$hriga-1,$val[$i],0,$accapo,'C',1);
            }
            if($key!=0)
                $pdf->setColoreInverso();
        }


        $pdf->SetY($pdf->GetY()+$hriga/2);
        $pdf->stampaTitolo("VETTORI ENERGETICI",$fontsizebase,$hriga);

        $pdf->SetFontSize($fontsizebase-3);
        $datimat = [];
        $index = 0;
        $cols = 8;
        $datimat[$index][0] = "N.";
        $datimat[$index][1] = "Descrizione";
        $datimat[$index][2] = "Unita' Misura";
        $datimat[$index][3] = "Consumo per CLI";
        $datimat[$index][4] = "Consumo per ACS";
        $datimat[$index][5] = "Consumo per CLE";
        $datimat[$index][6] = "Costo unitario";
        $datimat[$index][7] = "Costo totale";
        $index++;
        $datimat[$index][0] = "";
        $datimat[$index][1] = "";
        $datimat[$index][2] = "";
        $datimat[$index][3] = "(Qve,cli) [kWh,mc,kg]";
        $datimat[$index][4] = "(Qve,acs) [kWh,mc,kg]";
        $datimat[$index][5] = "(Qve,cle) [kWh,mc,kg]";
        $datimat[$index][6] = "(Cve) [".PDF::EURO()."/kWh,mc,kg]";
        $datimat[$index][7] = PDF::EURO();
        $index++;

        $datimat = array_merge($datimat, $dati_vett);
        $pdf->setColoreBasePari();
        $pdf->SetFontSize($fontsizebase-3);

        foreach($datimat as $key=>$val){
            $primacol = 8;
            $cmedia = ($largA4 - $margine*2 - $primacol ) / ($cols-1);
            for($i=0;$i<$cols;$i++){
                $lcol = ($i==0) ? $primacol : $cmedia;
                $accapo = $i==($cols-1);
                $pdf->Cell($lcol,$hriga-1,$val[$i],0,$accapo,'C',1);
            }
            if($key!=0)
                $pdf->setColoreInverso();
        }

        $pdf->SetY($pdf->GetY()+$hriga/2);
        if($pdf->GetY()>PDF::MAXSALTOPAGINA-100)
            $pdf->AddPage();
        $pdf->stampaTitolo("SPESE GESTIONALI",$fontsizebase,$hriga);

        $pdf->SetFontSize($fontsizebase-1);
        $pdf->setColoreBasePari();
        $pdf->stampaRigaComplessa([
            "Spesa totale per conduzione e manutenzione ordinaria",
            "dell'impianto centralizzato (Scm) [".PDF::EURO()." ]",
            self::set_euro($bolletta->spese_di_manutenzione)],2,$hriga,$lameta,$margine);
        $pdf->setColoreInverso();
        if($bolletta->tipo_gestione==0){
            $pdf->stampaRigaComplessa([
                "Spesa totale per la gestione del servizio di contabilizzazione",
                "dell'energia termica utile (Scr) [".PDF::EURO()." ]",
                self::set_euro( $bolletta->costo_gestione_contatori )],2,$hriga,$lameta,$margine);
        }else{
            $pdf->stampaRigaComplessa([
                "Spesa totale per la gestione del servizio di contabilizzazione dell'energia termica utile (Scr) [".PDF::EURO()." ]",
                "Scr = costo a ripartitore (".self::set_euro($bolletta->costo_gestione_contatori).") * numero ripartitori (".$bolletta->numeroTotaleContatori.")",
                self::set_euro( $bolletta->costocontatoriCondominio )],99,$hriga,$lameta,$margine);
        }

        $pdf->SetY($pdf->GetY()+$hriga/2);
        if($pdf->GetY()>PDF::MAXSALTOPAGINA-100)
            $pdf->AddPage();
        $pdf->stampaTitolo("CONSUMI TOTALI",$fontsizebase,$hriga);

        $dati_consumitot[0][0] = "Consumo totale di energia termica utile delle unita' immobiliari per climatizzazione invernale (Qui,cli,t) [kWh]";
        $dati_consumitot[1][0] = "Consumo totale di energia termica utile delle unita' immobiliari per ACS (Qui,acs,t) [kWh]";
        $dati_consumitot[2][0] = "Consumo totale di energia termica utile delle unita' immobiliari per climatizzazione estiva (Qui,cle,t) [kWh]";
        $dati_consumitot[3][0] = "Consumo totale di energia termica utile dei locali ad uso collettivo per climatizzazione invernale (Quc,cli,t) [kWh]";
        $dati_consumitot[4][0] = "Consumo totale di energia termica utile dei locali ad uso collettivo per ACS (Quc,acs,t) [kWh]";
        $dati_consumitot[5][0] = "Consumo totale di energia termica utile dei locali ad uso collettivo per climatizzazione estiva (Quc,cle,t) [kWh]";
        $dati_consumitot[6][0] = "Consumo involontario di energia termica utile per climatizzazione invernale (Qinv,cli) [kWh]";
        $dati_consumitot[7][0] = "Consumo involontario di energia termica utile per ACS (Qinv,acs) [kWh]";
        $dati_consumitot[8][0] = "Consumo involontario di energia termica utile per climatizzazione estiva (Qinv,cle) [kWh]";
        $dati_consumitot[9][0] = "Consumo totale di energia termica utile per climatizzazione invernale (Qcli) [kWh]";
        $dati_consumitot[10][0] = "Consumo totale di energia termica utile per ACS (Qacs) [kWh]";
        $dati_consumitot[11][0] = "Consumo totale di energia termica utile per climatizzazione estiva (Qcle) [kWh]";
        $dati_consumitot[12][0] = "Consumo totale di energia termica utile per climatizzazione (CLI,CLE) e ACS (Qt) [kWh]";

        $dati_consumitot[0+6][1] = $Qx_inv["cli"];
        $dati_consumitot[1+6][1] = $Qx_inv["acs"];
        $dati_consumitot[2+6][1] = $Qx_inv["cle"];
        $dati_consumitot[0+9][1] = $dati_consumitot[0+0][1] + $dati_consumitot[0+3][1] + $dati_consumitot[0+6][1];
        $dati_consumitot[1+9][1] = $dati_consumitot[1+0][1] + $dati_consumitot[1+3][1] + $dati_consumitot[1+6][1];
        $dati_consumitot[2+9][1] = $dati_consumitot[2+0][1] + $dati_consumitot[2+3][1] + $dati_consumitot[2+6][1];
        $dati_consumitot[12][1] = $dati_consumitot[0+9][1] + $dati_consumitot[1+9][1] + $dati_consumitot[2+9][1];

        $dati_consumitot[0][2] = "cli";
        $dati_consumitot[1][2] = "acs";
        $dati_consumitot[2][2] = "cle";
        $dati_consumitot[3][2] = "cli";
        $dati_consumitot[4][2] = "acs";
        $dati_consumitot[5][2] = "cle";
        $dati_consumitot[6][2] = "cli";
        $dati_consumitot[7][2] = "acs";
        $dati_consumitot[8][2] = "cle";
        $dati_consumitot[9][2] = "cli";
        $dati_consumitot[10][2] = "acs";
        $dati_consumitot[11][2] = "cle";
        $dati_consumitot[12][2] = "all";

        $pdf->setColoreBasePari();
        $pdf->SetFontSize($fontsizebase-1);

        $k = 0;
        $len = count($dati_consumitot);
        foreach($dati_consumitot as $key=>$val){
            if(!self::showthisservice($val[2],$K_coeff,$layout->nascondiServiziInutilizzati)){
                $k++;
                continue;
            }
            if($k==$len-1) {
                $pdf->SetFont("", 'B');
            }
            $pdf->Cell($largA4-($margine*2)-30,$hriga,$val[0],0,0,'L',1);
            $pdf->Cell(0,$hriga,self::set_euro($val[1]),0,1,'R',1);
            $pdf->setColoreInverso();
            $k++;
        }
        $pdf->SetFont($mioFont,'',$fontsizebase);


        $pdf->SetY($pdf->GetY()+$hriga/2);
        $pdf->stampaTitolo("COSTI UNITARI ENERGIA TERMICA UTILE",$fontsizebase,$hriga);

        $datimat = [];
        $datimat[0][0] = "Costo unitario dell'energia termica utile per climatizzazione invernale (Ccli) [".PDF::EURO()."/kWh]";
        $datimat[0][1] = $Cx["cli"]>0 ? self::set_euro($spesa_volontaria["cli"]) . " / ".self::set_euro($consumo_volontario["cli"])." = " . number_format($Cx["cli"],3,",","''") : "";
        $datimat[0][2] = "cli";
        $datimat[1][0] = "Costo unitario dell'energia termica utile per ACL (Cacs) [".PDF::EURO()."/kWh]";
        $datimat[1][1] = $Cx["acs"]>0 ? self::set_euro($spesa_volontaria["acs"]) . " / ".self::set_euro($consumo_volontario["acs"])." = " . number_format($Cx["acs"],3,",","''") : "";
        $datimat[1][2] = "acs";
        $datimat[2][0] = "Costo unitario dell'energia termica utile per climatizzazione estiva (Ccle) [".PDF::EURO()."/kWh]";
        $datimat[2][1] = $Cx["cle"]>0 ? self::set_euro($spesa_volontaria["cle"]) . " / ".self::set_euro($consumo_volontario["cle"])." = " . number_format($Cx["cle"],3,",","''") : "";
        $datimat[2][2] = "cle";

        $pdf->setColoreBasePari();
        $pdf->SetFontSize($fontsizebase-1);
        foreach($datimat as $key=>$val){
            if(!self::showthisservice($val[2],$K_coeff,$layout->nascondiServiziInutilizzati)){
                continue;
            }
            $pdf->Cell($largA4-($margine*2)-30,$hriga,$val[0],0,0,'L',1);
            $pdf->Cell(0,$hriga,$val[1],0,1,'R',1);
            $pdf->setColoreInverso();
        }



        $pdf->SetY($pdf->GetY()+$hriga/2);
        if($pdf->GetY()>PDF::MAXSALTOPAGINA)
            $pdf->AddPage();
        $pdf->stampaTitolo("SPESE TOTALI",$fontsizebase,$hriga);

        $pdf->setColoreBasePari();
        $pdf->SetFontSize($fontsizebase-1);

        $matricecalcolispese = [];
        $indice_riga_calcolispese = 0;



        $matricecalcolispese[$indice_riga_calcolispese][0] = "Spesa totale per consumo volontario per climatizzazione invernale (Svol,cli)";
        $matricecalcolispese[$indice_riga_calcolispese][1] = "";
        $matricecalcolispese[$indice_riga_calcolispese][2] = self::set_euro($matrice_spesetot[1]);
        $matricecalcolispese[$indice_riga_calcolispese][3] = PDF::EURO();
        $matricecalcolispese[$indice_riga_calcolispese][4] = 0;
        $matricecalcolispese[$indice_riga_calcolispese][5] = "cli";
        $indice_riga_calcolispese++;

        $matricecalcolispese[$indice_riga_calcolispese][0] = "Spesa totale per consumo volontario per ACS (Svol,acs)";
        $matricecalcolispese[$indice_riga_calcolispese][1] = "";
        $matricecalcolispese[$indice_riga_calcolispese][2] = self::set_euro($matrice_spesetot[2]);
        $matricecalcolispese[$indice_riga_calcolispese][3] = PDF::EURO();
        $matricecalcolispese[$indice_riga_calcolispese][4] = 0;
        $matricecalcolispese[$indice_riga_calcolispese][5] = "acs";
        $indice_riga_calcolispese++;

        $matricecalcolispese[$indice_riga_calcolispese][0] = "Spesa totale per consumo volontario per climatizzazione estiva (Svol,cle)";
        $matricecalcolispese[$indice_riga_calcolispese][1] = "";
        $matricecalcolispese[$indice_riga_calcolispese][2] = self::set_euro($matrice_spesetot[3]);
        $matricecalcolispese[$indice_riga_calcolispese][3] = PDF::EURO();
        $matricecalcolispese[$indice_riga_calcolispese][4] = 0;
        $matricecalcolispese[$indice_riga_calcolispese][5] = "cle";
        $indice_riga_calcolispese++;


        $matricecalcolispese[$indice_riga_calcolispese][0] = "Spesa per consumo involontario per climatizzazione invernale (Sinv,cli)";
        $matricecalcolispese[$indice_riga_calcolispese][1] = "";
        $matricecalcolispese[$indice_riga_calcolispese][2] = self::set_euro($matrice_spesetot[7]);
        $matricecalcolispese[$indice_riga_calcolispese][3] = PDF::EURO();
        $matricecalcolispese[$indice_riga_calcolispese][4] = 0;
        $matricecalcolispese[$indice_riga_calcolispese][5] = "cli";
        $indice_riga_calcolispese++;

        $matricecalcolispese[$indice_riga_calcolispese][0] = "Spesa per consumo involontario per ACS (Sinv,acs)";
        $matricecalcolispese[$indice_riga_calcolispese][1] = "";
        $matricecalcolispese[$indice_riga_calcolispese][2] = self::set_euro($matrice_spesetot[8]);
        $matricecalcolispese[$indice_riga_calcolispese][3] = PDF::EURO();
        $matricecalcolispese[$indice_riga_calcolispese][4] = 0;
        $matricecalcolispese[$indice_riga_calcolispese][5] = "acs";
        $indice_riga_calcolispese++;

        $matricecalcolispese[$indice_riga_calcolispese][0] = "Spesa per consumo involontario per climatizzazione estiva (Sinv,cle)";
        $matricecalcolispese[$indice_riga_calcolispese][1] = "";
        $matricecalcolispese[$indice_riga_calcolispese][2] = self::set_euro($matrice_spesetot[9]);
        $matricecalcolispese[$indice_riga_calcolispese][3] = PDF::EURO();
        $matricecalcolispese[$indice_riga_calcolispese][4] = 0;
        $matricecalcolispese[$indice_riga_calcolispese][5] = "cle";
        $indice_riga_calcolispese++;

        $matricecalcolispese[$indice_riga_calcolispese][0] = "Spesa per locali ad uso collettivo per climatizzazione invernale (Suc,cli)";
        $matricecalcolispese[$indice_riga_calcolispese][1] = "";
        $matricecalcolispese[$indice_riga_calcolispese][2] = self::set_euro($matrice_spesetot[4]);
        $matricecalcolispese[$indice_riga_calcolispese][3] = PDF::EURO();
        $matricecalcolispese[$indice_riga_calcolispese][4] = 0;
        $matricecalcolispese[$indice_riga_calcolispese][5] = "cli";
        $matricecalcolispese[$indice_riga_calcolispese][6] = "";
        $indice_riga_calcolispese++;

        $matricecalcolispese[$indice_riga_calcolispese][0] = "Spesa per locali ad uso collettivo per ACS (Suc,acs)";
        $matricecalcolispese[$indice_riga_calcolispese][1] = "";
        $matricecalcolispese[$indice_riga_calcolispese][2] = self::set_euro($matrice_spesetot[5]);
        $matricecalcolispese[$indice_riga_calcolispese][3] = PDF::EURO();
        $matricecalcolispese[$indice_riga_calcolispese][4] = 0;
        $matricecalcolispese[$indice_riga_calcolispese][5] = "acs";
        $matricecalcolispese[$indice_riga_calcolispese][6] = "";
        $indice_riga_calcolispese++;

        $matricecalcolispese[$indice_riga_calcolispese][0] = "Spesa per locali ad uso collettivo per climatizzazione estiva (Suc,cle)";
        $matricecalcolispese[$indice_riga_calcolispese][1] = "";
        $matricecalcolispese[$indice_riga_calcolispese][2] = self::set_euro($matrice_spesetot[6]);
        $matricecalcolispese[$indice_riga_calcolispese][3] = PDF::EURO();
        $matricecalcolispese[$indice_riga_calcolispese][4] = 0;
        $matricecalcolispese[$indice_riga_calcolispese][5] = "cle";
        $matricecalcolispese[$indice_riga_calcolispese][6] = "";
        $indice_riga_calcolispese++;

        //Tiro le somme
        $matrice_spesetot[10] = $matrice_spesetot[1] + $matrice_spesetot[4] + $matrice_spesetot[7];
        $matrice_spesetot[11] = $matrice_spesetot[2] + $matrice_spesetot[5] + $matrice_spesetot[8];
        $matrice_spesetot[12] = $matrice_spesetot[3] + $matrice_spesetot[6] + $matrice_spesetot[9];
        $matrice_spesetot[13] = $matrice_spesetot[10] + $matrice_spesetot[11] + $matrice_spesetot[12];

        $matricecalcolispese[$indice_riga_calcolispese][0] = "Spesa totale di energia termica utile per climatizzazione invernale (Scli)";
        $matricecalcolispese[$indice_riga_calcolispese][1] = "";
        $matricecalcolispese[$indice_riga_calcolispese][2] = self::set_euro($matrice_spesetot[10]);
        $matricecalcolispese[$indice_riga_calcolispese][3] = PDF::EURO();
        $matricecalcolispese[$indice_riga_calcolispese][4] = 0;
        $matricecalcolispese[$indice_riga_calcolispese][5] = "cli";
        $indice_riga_calcolispese++;

        $matricecalcolispese[$indice_riga_calcolispese][0] = "Spesa totale di energia termica utile per ACS (Sacs)";
        $matricecalcolispese[$indice_riga_calcolispese][1] = "";
        $matricecalcolispese[$indice_riga_calcolispese][2] = self::set_euro($matrice_spesetot[11]);
        $matricecalcolispese[$indice_riga_calcolispese][3] = PDF::EURO();
        $matricecalcolispese[$indice_riga_calcolispese][4] = 0;
        $matricecalcolispese[$indice_riga_calcolispese][5] = "acs";
        $indice_riga_calcolispese++;

        $matricecalcolispese[$indice_riga_calcolispese][0] = "Spesa totale di energia termica utile per climatizzazione estiva (Scle)";
        $matricecalcolispese[$indice_riga_calcolispese][1] = "";
        $matricecalcolispese[$indice_riga_calcolispese][2] = self::set_euro($matrice_spesetot[12]);
        $matricecalcolispese[$indice_riga_calcolispese][3] = PDF::EURO();
        $matricecalcolispese[$indice_riga_calcolispese][4] = 0;
        $matricecalcolispese[$indice_riga_calcolispese][5] = "cle";
        $matricecalcolispese[$indice_riga_calcolispese][6] = "";
        $indice_riga_calcolispese++;

        $matricecalcolispese[$indice_riga_calcolispese][0] = "Spesa totale (St)";
        $matricecalcolispese[$indice_riga_calcolispese][1] = "";
        $matricecalcolispese[$indice_riga_calcolispese][2] = self::set_euro($matrice_spesetot[13]);
        $matricecalcolispese[$indice_riga_calcolispese][3] = PDF::EURO();
        $matricecalcolispese[$indice_riga_calcolispese][4] = 0;
        $matricecalcolispese[$indice_riga_calcolispese][5] = "all";
        $matricecalcolispese[$indice_riga_calcolispese][6] = "B";
        $indice_riga_calcolispese++;


        /*
        //Costo dei Contatori
        if($bolletta->tipo_gestione == 0){
            $matricecalcolispese[$indice_riga_calcolispese][0] = "Spesa per servizio di contabilizzazione (scr)";
            $matricecalcolispese[$indice_riga_calcolispese][1] = "";
            $matricecalcolispese[$indice_riga_calcolispese][2] = self::set_euro($bolletta->costo_gestione_contatori);
        }else{
            $matricecalcolispese[$indice_riga_calcolispese][0] = "Spesa per servizio di contabilizzazione | scr = costo a ripartitore (".self::set_euro($bolletta->costo_gestione_contatori).") * numero ripartitori (".$bolletta->numeroTotaleContatori.")";
            $matricecalcolispese[$indice_riga_calcolispese][1] = "";
            $matricecalcolispese[$indice_riga_calcolispese][2] = self::set_euro($bolletta->costocontatoriCondominio);
        }
        $matricecalcolispese[$indice_riga_calcolispese][3] = PDF::EURO();
        $matricecalcolispese[$indice_riga_calcolispese][4] = 0;
        $matricecalcolispese[$indice_riga_calcolispese][5] = "all";
        $matricecalcolispese[$indice_riga_calcolispese][6] = "";
        $indice_riga_calcolispese++;
        */

        foreach ($matricecalcolispese as $key=>$riga) {
            if(!self::showthisservice($riga[5],$K_coeff,$layout->nascondiServiziInutilizzati)){
                continue;
            }
            if($riga[6]=="B")
                $pdf->SetFont("",'B');
            else
                $pdf->SetFont("",'');

            $pdf->Cell($largA4-($margine*2)-30,$hriga,$riga[0],0,0,'L',1);
            $pdf->Cell(0,$hriga,$riga[2]." ".$riga[3],0,1,'R',1);
            $pdf->setColoreInverso();

            if($key+1 == count($matricecalcolispese))
                $pdf->SetFont("",'');

        }

        $pdf->SetY($pdf->GetY()+$hriga/2);
        if($pdf->GetY()>PDF::MAXSALTOPAGINA)
            $pdf->AddPage();
        $pdf->stampaTitolo("UNITA' IMMOBILIARI",$fontsizebase,$hriga);

        $datimat = [];
        $index = 0;
        $cols = 7;
        $primacol = 8;
        $datimat[$index][0] = "N.";
        $datimat[$index][1] = "Descrizione";
        $datimat[$index][2] = "Tipo contab.";
        $datimat[$index][3] = "Consumo CLI";
        $datimat[$index][4] = "Consumo ACS";
        $datimat[$index][5] = "Consumo CLE";
        $datimat[$index][6] = "Unita' Ripartiz.";
        $datimat[$index][7] = "Contatori Cal.";
        $index++;
        $datimat[$index][0] = "";
        $datimat[$index][1] = "";
        $datimat[$index][2] = "";
        $datimat[$index][3] = "(Qui,cli) [kWh]";
        $datimat[$index][4] = "(Qui,acs) [kWh]";
        $datimat[$index][5] = "(Qui,cle) [kWh]";
        $datimat[$index][6] = "(ur) [ur]";
        $datimat[$index][7] = "(cc) [kWh]";
        $index++;

        $datimat = array_merge($datimat, $dati_unita );
        $pdf->setColoreBasePari();
        $pdf->SetFontSize($fontsizebase-1);

        $totali = [];
        foreach($datimat as $key=>$val){
            $cmedia = ($largA4 - $margine*2 - $primacol ) / ($cols-1);
            for($i=0;$i<$cols;$i++){
                $lcol = ($i==0) ? $primacol : $cmedia;
                $accapo = $i==($cols-1);
                //$pdf->Cell($lcol,$hriga-1,$val[$i],0,$accapo,'C',1);
                $pdf->CellFitScale($lcol,$hriga,$val[$i],0,$accapo,'C',1,'');

                $totali[$i] += (float)str_replace(",",".",str_replace(".","",$val[$i]));
            }
            if($key!=0)
                $pdf->setColoreInverso();
        }
        //stampo i totali
        $pdf->SetFont($mioFont,'B',$fontsizebase-1);
        for($i=0;$i<$cols;$i++){
            if($i == 0){
                $val = "TOT";
            }else{
                $val = self::set_euro($totali[$i])>0 ? self::set_euro($totali[$i]) : "";
            }
            $lcol = ($i==0) ? $primacol : $cmedia;
            $accapo = $i==($cols-1);
            $pdf->Cell($lcol,$hriga,$val,0,$accapo,'C',1);
        }
        $pdf->SetFont($mioFont,'',$fontsizebase-1);



        //Se non ho nessun locale ad uso collettivo, salto la sezione.
        if(count($dati_unita_uc)>0){
            $pdf->SetY($pdf->GetY()+$hriga/2);
            if($pdf->GetY()>PDF::MAXSALTOPAGINA)
                $pdf->AddPage();
            $pdf->stampaTitolo("LOCALI AD USO COLLETTIVO",$fontsizebase,$hriga);

            $datimat = [];
            $index = 0;
            $cols = 7;
            $primacol = 8;
            $datimat[$index][0] = "N.";
            $datimat[$index][1] = "Descrizione";
            $datimat[$index][2] = "Tipo contab.";
            $datimat[$index][3] = "Consumo CLI";
            $datimat[$index][4] = "Consumo ACS";
            $datimat[$index][5] = "Consumo CLE";
            $datimat[$index][6] = "Unita' Ripartiz.";
            $datimat[$index][7] = "Contatori Cal.";
            $index++;
            $datimat[$index][0] = "";
            $datimat[$index][1] = "";
            $datimat[$index][2] = "";
            $datimat[$index][3] = "(Qui,cli) [kWh]";
            $datimat[$index][4] = "(Qui,acs) [kWh]";
            $datimat[$index][5] = "(Qui,cle) [kWh]";
            $datimat[$index][6] = "(ur) [ur]";
            $datimat[$index][7] = "(cc) [kWh]";
            $index++;

            $datimat = array_merge($datimat, $dati_unita_uc );
            $pdf->setColoreBasePari();
            $pdf->SetFontSize($fontsizebase-1);

            $totali = [];
            foreach($datimat as $key=>$val){
                $cmedia = ($largA4 - $margine*2 - $primacol ) / ($cols-1);
                for($i=0;$i<$cols;$i++){
                    $lcol = ($i==0) ? $primacol : $cmedia;
                    $accapo = $i==($cols-1);
                    $pdf->Cell($lcol,$hriga,$val[$i],0,$accapo,'C',1);
                    $totali[$i] += (float)str_replace("'","",str_replace(",",".",$val[$i]));
                }
                if($key!=0)
                    $pdf->setColoreInverso();
            }
            //stampo i totali
            $pdf->SetFont($mioFont,'B',$fontsizebase-1);
            for($i=0;$i<$cols;$i++){
                if($i == 0){
                    $val = "TOT";
                }else{
                    $val = self::set_euro($totali[$i])>0 ? self::set_euro($totali[$i]) : "";
                }
                $lcol = ($i==0) ? $primacol : $cmedia;
                $accapo = $i==($cols-1);
                $pdf->Cell($lcol,$hriga,$val,0,$accapo,'C',1);
            }
            $pdf->SetFont($mioFont,'',$fontsizebase-1);
        }

        $pdf->SetY($pdf->GetY()+$hriga/2);
        if($pdf->GetY()>PDF::MAXSALTOPAGINA-60)
            $pdf->AddPage();
        $pdf->stampaTitolo("SPESE DELLE SINGOLE UNITA' IMMOBILIARI",$fontsizebase,$hriga);

        $datimat = [];
        $index = 0;
        $cols = 14;
        $primacol = 8;
        $datimat[$index][0] = "N.";
        $datimat[$index][1] = "Sv,cli [".PDF::EURO()." ]";
        $datimat[$index][2] = "Sv,acs [".PDF::EURO()." ]";
        $datimat[$index][3] = "Sv,cle [".PDF::EURO()." ]";
        $datimat[$index][4] = "Suc,cli [".PDF::EURO()." ]";
        $datimat[$index][5] = "Suc,acs [".PDF::EURO()." ]";
        $datimat[$index][6] = "Suc,cle [".PDF::EURO()." ]";
        $datimat[$index][7] = "Sg,cli [".PDF::EURO()." ]";
        $datimat[$index][8] = "Sg,acs [".PDF::EURO()." ]";
        $datimat[$index][9] = "Sg,cle [".PDF::EURO()." ]";
        $datimat[$index][10] = "St,cli [".PDF::EURO()." ]";
        $datimat[$index][11] = "St,acs [".PDF::EURO()." ]";
        $datimat[$index][12] = "St,cle [".PDF::EURO()." ]";
        $datimat[$index][13] = "Stot [".PDF::EURO()." ]";
        $nuovoordinecolonne = [0,1,4,7,2,5,8,3,6,9,10,11,12,13];

        if($layout->nascondiServiziInutilizzati){
            $n_real_cols = ((($K_coeff["cli"]>0 ? 1 : 0) + ($K_coeff["acs"]>0 ? 1 : 0) + ($K_coeff["cle"]>0 ? 1 : 0)) * 4) + 2;
        }else{
            $n_real_cols = $cols;
        }
        $index++;

        $pdf->setColoreBasePari();

        if($n_real_cols>=10){
            $real_font_size = $fontsizebase-3;
        }else{
            $real_font_size = $fontsizebase-1;
        }
        $pdf->SetFontSize($real_font_size);


        //stampo intestazioni
        foreach($datimat as $key=>$val){
            $cmedia = ($largA4 - $margine*2 - $primacol ) / ($n_real_cols-1);
            for($i=0;$i<$cols;$i++){
                $lcol = ($i==0) ? $primacol : $cmedia;
                $accapo = ($i==($cols-1));

                $showthiscol = true;
                $colonna_to_show = $nuovoordinecolonne[$i];
                switch($colonna_to_show){
                    case 1:
                    case 4:
                    case 7:
                    case 10:
                        if($K_coeff["cli"]==0){
                            $showthiscol = false;
                        }
                        break;
                    case 2:
                    case 5:
                    case 8:
                    case 11:
                        if($K_coeff["acs"]==0){
                            $showthiscol = false;
                        }
                        break;
                    case 3:
                    case 6:
                    case 9:
                    case 12:
                        if($K_coeff["cle"]==0){
                            $showthiscol = false;
                        }
                        break;
                }
                if(($showthiscol)||(!$layout->nascondiServiziInutilizzati)){
                    $pdf->Cell($lcol,$hriga,$val[$colonna_to_show],0,$accapo,'C',1);
                }
            }
            $pdf->setColoreInverso();
        }

        //stampo dati
        $totali = [];
        foreach($matrice_spesesingole as $key=>$val){
            $cmedia = ($largA4 - $margine*2 - $primacol ) / ($n_real_cols-1);

            //Tiro le somme
            $val[10] = $val[1] + $val[4] + $val[7];
            $val[11] = $val[2] + $val[5] + $val[8];
            $val[12] = $val[3] + $val[6] + $val[9];
            $val[13] = $val[10] + $val[11] + $val[12];

            for($i=0;$i<$cols;$i++){
                $lcol = ($i==0) ? $primacol : $cmedia;
                $accapo = $i==($cols-1);

                $colonna_to_show = $nuovoordinecolonne[$i];
                if($colonna_to_show == 0){
                    $value = $val[$colonna_to_show];
                }else{
                    $value = self::set_euro($val[$colonna_to_show]);
                }
                $totali[$colonna_to_show] += (float)str_replace("'","",str_replace(",",".",$val[$colonna_to_show]));

                $showthiscol = true;
                switch($colonna_to_show){
                    case 1:
                    case 4:
                    case 7:
                    case 10:
                        if($K_coeff["cli"]==0){
                            $showthiscol = false;
                            $value = "";
                        }
                        break;
                    case 2:
                    case 5:
                    case 8:
                    case 11:
                        if($K_coeff["acs"]==0){
                            $showthiscol = false;
                            $value = "";
                        }
                        break;
                    case 3:
                    case 6:
                    case 9:
                    case 12:
                        if($K_coeff["cle"]==0){
                            $showthiscol = false;
                            $value = "";
                        }
                        break;
                }
                if(($showthiscol)||(!$layout->nascondiServiziInutilizzati)){
                    $pdf->Cell($lcol,$hriga,$value,0,$accapo,'C',1);
                }
            }
            $pdf->setColoreInverso();
        }

        //stampo i totali
        $pdf->SetFont($mioFont,'B',$real_font_size);
        for($i=0;$i<$cols;$i++){
            $lcol = ($i==0) ? $primacol : $cmedia;
            $accapo = $i==($cols-1);

            $colonna_to_show = $nuovoordinecolonne[$i];
            if($colonna_to_show == 0){
                $val = "TOT";
            }else{
                $val = self::set_euro($totali[$colonna_to_show]);
            }

            $showthiscol = true;
            switch($colonna_to_show){
                case 1:
                case 4:
                case 7:
                case 10:
                    if($K_coeff["cli"]==0){
                        $showthiscol = false;
                        $val = "";
                    }
                    break;
                case 2:
                case 5:
                case 8:
                case 11:
                    if($K_coeff["acs"]==0){
                        $showthiscol = false;
                        $val = "";
                    }
                    break;
                case 3:
                case 6:
                case 9:
                case 12:
                    if($K_coeff["cle"]==0){
                        $showthiscol = false;
                        $val = "";
                    }
                    break;
            }
            if(($showthiscol)||(!$layout->nascondiServiziInutilizzati)) {
                $pdf->Cell($lcol, $hriga - 1, $val, 0, $accapo, 'C', 1);
            }
        }
        $pdf->SetFont($mioFont,'',$fontsizebase);



        /* LEGENDA E FIRMA - INIZIO */

        $datimat = [];
        $index_leg = 0;

        $datimat[$index_leg][0] = "Sv,cli";
        $datimat[$index_leg][1] = "Spesa per il consumo di energia termica utile della singola unita' immobiliare per climat. invernale [".PDF::EURO()." ]";
        $datimat[$index_leg++][2] = "cli";
        $datimat[$index_leg][0] = "Suc,cli";
        $datimat[$index_leg][1] = "Spesa consumo energia termica dei locali ad uso collettivo da attribuire all'unità immobiliare per CLI [".PDF::EURO()." ]";
        $datimat[$index_leg++][2] = "cli";
        $datimat[$index_leg][0] = "Sg,cli";
        $datimat[$index_leg][1] = "Spesa per potenza termica installata da attribuire alla singola unita' immobiliare per CLI [".PDF::EURO()." ]";
        $datimat[$index_leg++][2] = "cli";

        $datimat[$index_leg][0] = "Sv,acs";
        $datimat[$index_leg][1] = "Spesa per il consumo di energia termica utile della singola unita' immobiliare per ACS [".PDF::EURO()." ]";
        $datimat[$index_leg++][2] = "acs";
        $datimat[$index_leg][0] = "Suc,acs";
        $datimat[$index_leg][1] = "Spesa consumo energia termica dei locali ad uso collettivo da attribuire all'unità immobiliare per ACS [".PDF::EURO()." ]";
        $datimat[$index_leg++][2] = "acs";
        $datimat[$index_leg][0] = "Sg,acs";
        $datimat[$index_leg][1] = "Spesa per potenza termica installata da attribuire alla singola unita' immobiliare per ACS [".PDF::EURO()." ]";
        $datimat[$index_leg++][2] = "acs";

        $datimat[$index_leg][0] = "Sv,cle";
        $datimat[$index_leg][1] = "Spesa per il consumo di energia termica utile della singola unita' immobiliare per climat. estiva [".PDF::EURO()." ]";
        $datimat[$index_leg++][2] = "cle";
        $datimat[$index_leg][0] = "Suc,cle";
        $datimat[$index_leg][1] = "Spesa consumo energia termica dei locali ad uso collettivo da attribuire all'unità immobiliare per CLE [".PDF::EURO()." ]";
        $datimat[$index_leg++][2] = "cle";
        $datimat[$index_leg][0] = "Sg,cle";
        $datimat[$index_leg][1] = "Spesa per potenza termica installata da attribuire alla singola unita' immobiliare per CLE [".PDF::EURO()." ]";
        $datimat[$index_leg++][2] = "cle";

        $datimat[$index_leg][0] = "St,cli";
        $datimat[$index_leg][1] = "Spesa totale della singola unita' immobiliare per climatizzazione invernale [".PDF::EURO()." ]";
        $datimat[$index_leg++][2] = "cli";
        $datimat[$index_leg][0] = "St,acs";
        $datimat[$index_leg][1] = "Spesa totale della singola unita' immobiliare per acqua calda sanitaria [".PDF::EURO()." ]";
        $datimat[$index_leg++][2] = "acs";
        $datimat[$index_leg][0] = "St,cle";
        $datimat[$index_leg][1] = "Spesa totale della singola unita' immobiliare per climatizzazione estiva [".PDF::EURO()." ]";
        $datimat[$index_leg++][2] = "cle";

        $datimat[$index_leg][0] = "Stot";
        $datimat[$index_leg][1] = "Spesa totale della singola unita' immobiliare per CLI, ACS e CLE [".PDF::EURO()." ]";
        $datimat[$index_leg++][2] = "all";

        $datimatdef = [];
        $index_def = 0;
        foreach ($datimat as $k=>$v){
            $copialo = false;
            if($layout->nascondiServiziInutilizzati){
                if($v[2]=="all"){
                    $copialo = true;
                }elseif(($K_coeff["cli"]>0)&&($v[2]=="cli")){
                    $copialo = true;
                }elseif(($K_coeff["acs"]>0)&&($v[2]=="acs")){
                    $copialo = true;
                }elseif(($K_coeff["cle"]>0)&&($v[2]=="cle")){
                    $copialo = true;
                }
            }else{
                //mostra tutto
                $copialo = true;
            }
            if($copialo){
                $datimatdef[$index_def][0] = $v[0];
                $datimatdef[$index_def++][1] = $v[1];
            }
        }


        $filefirma = Environment::$ROOT . $layout->firma;
        $pdf->StampaLegendaFirma($layout,$datimatdef,$fontsizebase,$hriga,$mioFont,$unterzo,$margine,$bolletta,$filefirma);



        /* LEGENDA E FIRMA - fine */



        /*
         *   FINE REPORT CONSUNTIVO
         */

        $filename = $dir . self::slugify(str_pad($bolletta->id,5,"0",STR_PAD_LEFT)) . "_" . $dir_period . "_consuntivo.pdf";
        $pdf->Output("F", $filename);


        $fattura = Fattura::query()->where("idBolletta=".$idBolletta)->where("idUnitaAbitativa=0")->getOne();
        if(!$fattura)
            $fattura = new Fattura();

        $fattura->buildProperties([
            "idBolletta"    =>  $idBolletta,
            "idUnitaAbitativa" =>  -1,
            "pdf"    =>  str_replace(Environment::$ROOT,"",$filename),
            "data_generazione"  =>  date("Y-m-d"),
            "totale"    =>  $totale_bollette_unita
        ]);
        $fattura->save();





        //Redirect alla lista

        return Response::redirect(RouterService::getRoute(Bolletta::getEntity().".mod")->build(["id"=>$idBolletta, "tab"=>"2-tab","message"=>$messaggio_esito,"titlemsg"=>$titolo_esito]));



    }



    //Calcolo il consumo totale sul servizio X
    public static function calcoloConsumoCondominio($idCondominio, $servizi, $dataDa, $dataA){
        $listaUnita = UnitaAbitativa::query(false)
            ->setFields(UnitaAbitativa::getTable().".*")
            ->join(Edificio::class,"id","idEdificio")
            ->join(Condominio::class,"id","idCondominio",Edificio::class)
            ->where("condominio.id = ".$idCondominio)
            ->getAll();


        $totali = [
            "cli"=>0,
            "cle"=>0,
            "acs"=>0
        ];
        $totaliSpaziCollettivi = [
            "cli"=>0,
            "cle"=>0,
            "acs"=>0
        ];
        $totaliAppartamenti = [
            "cli"=>0,
            "cle"=>0,
            "acs"=>0
        ];


        $totaliQcc = [
            "cli"=>0,
            "cle"=>0,
            "acs"=>0
        ];


        foreach ($listaUnita as $unita){
            $totale = self::calcoloConsumoUnitaAbitativa($unita,$servizi,$dataDa,$dataA);
            $unita->totaliLetture = $totale;

            foreach ($unita->totaliLetture as $key=>$value){

                $totali[$key] += $value['ur'];

                if($key=="acs"){
                    //Se sono contatori di ACS (quindi Contatori volumetrici) applico la formula
                    $unita->totaliLetture[$key]['cc'] = (float)$value['cc'] * self::CoeffConvACS;
                    $value['cc'] = (float)$value['cc'] * self::CoeffConvACS;
                }

                $totaliQcc[$key] += $value['cc'];




                if( $unita->isUsoCollettivo() ){
                    $totaliSpaziCollettivi[$key] += array_sum($value);
                }else{
                    $totaliAppartamenti[$key] += array_sum($value);
                }



            }


        }
        


        return [
            "totali"    =>  $totali,
            "totaliQcc"    =>  $totaliQcc,
            "totaliSpaziCollettivi" => $totaliSpaziCollettivi,
            "totaliAppartamenti" => $totaliAppartamenti,
            "unitaAbitative"    =>  $listaUnita
        ];
    }

    public static function calcoloConsumoUnitaAbitativa($unita, $servizi, $dataDa, $dataA){

        $totali = [];


        foreach ($servizi as $servizio){


            $totali[$servizio] = [];

            //recupero elenco contatori
            $query = Contatore::query(false);
            $query = self::tipologiaMisurazionePerServizio($servizio,$query);
            $contatori = $query->setFields(Contatore::getTable().".*")
                ->where("idUnitaAbitativa = ".$unita->id)
                ->where("tipoDispositivo=1")
                ->setOrderBy("codice","ASC")
                ->getAll();

            $totale = 0;
            foreach ($contatori as $contatore){
                // Letture per ripartitori
                $query = LetturaContatore::query(false);
                $query = self::tipologiaMisurazionePerServizio($servizio,$query);
                $letture = $query->setFields(LetturaContatore::getTable().".*")
                    ->join(Contatore::class,"id","idContatore")
                    ->where("contatore.id = ".$contatore->id)
                    ->where(LetturaContatore::getTable().".dataLettura >= '".$dataDa."'")
                    ->where(LetturaContatore::getTable().".dataLettura <= '".$dataA."'")
                    ->where("contatore.tipoDispositivo=1")
                    ->setOrderBy("dataLettura","ASC")
                    ->setLimit(999999,1)
                    ->getAll();

                foreach ($letture as $value){
                    $totale += (float)$value->deltaLettura;
                }
            }

            $totali[$servizio]["ur"] = $totale;




            $query = Contatore::query(false);
            $query = self::tipologiaMisurazionePerServizio($servizio,$query);
            $contatori = $query->setFields(Contatore::getTable().".*")
                ->where("idUnitaAbitativa = ".$unita->id)
                ->where("contatore.tipoDispositivo=2")
                ->setOrderBy("codice","ASC")
                ->getAll();

            $totale = 0;
            foreach ($contatori as $contatore){
                // Letture per contatori calorie
                $query = LetturaContatore::query(false);
                $query = self::tipologiaMisurazionePerServizio($servizio,$query);
                $letture = $query->setFields(LetturaContatore::getTable().".*")
                    ->join(Contatore::class,"id","idContatore")
                    ->where("contatore.id = ".$contatore->id)
                    ->where(LetturaContatore::getTable().".dataLettura >= '".$dataDa."'")
                    ->where(LetturaContatore::getTable().".dataLettura <= '".$dataA."'")
                    ->setOrderBy("dataLettura","ASC")
                    ->setLimit(999999,1)
                    ->where("contatore.tipoDispositivo=2")->getAll();

                foreach ($letture as $value){
                    $totale += (float)$value->deltaLettura;
                }
            }


            $totali[$servizio]["cc"] = $totale;


        }


        return $totali;
    }


    /**
     * @param $query \core\db\Query
     * @return Query
     */
    public static function tipologiaMisurazionePerServizio( $servizio, $query ){
        if($servizio == "cli"){
            $query->where(' (contatore.tipologiaMisurazione="URR" OR contatore.tipologiaMisurazione="UR" OR contatore.tipologiaMisurazione="CC") ');
        }else if($servizio=="acs"){
            $query->where(' (contatore.tipologiaMisurazione="ACC" OR contatore.tipologiaMisurazione="AC") ');
        }else if($servizio=="cle"){
            $query->where('contatore.tipologiaMisurazione="ETA"');
        }

        return $query;
    }

    public static function data_a_video($data, $formatodest="d/m/Y"){
        $format = 'Y-m-d';
        if($data!=""){
            $myDateTime = DateTime::createFromFormat($format, $data);
            if($myDateTime && $myDateTime->format($format) === $data){
                $newDateString = $myDateTime->format($formatodest);
                return $newDateString;
            }
        }
        return "";
    }
    public static function data_a_url($data){
        $format = 'Y-m-d';
        if($data!=""){
            $myDateTime = DateTime::createFromFormat($format, $data);
            if($myDateTime && $myDateTime->format($format) === $data){
                $newDateString = $myDateTime->format('Ymd');
                return $newDateString;
            }
        }
        return "";
    }

    public static function set_euro($value){
        return number_format($value, 2,',',".");
    }

    public static function indiceDaServizio($val){
        switch($val){
            case "cli": return 1; break;
            case "acs": return 2; break;
            case "cle": return 3; break;
            default: return 1;
        }
    }
    public static function showthisservice($nomeservizio,$K_coeff,$nascondi){
        if($nascondi){
            if( ($nomeservizio!="all") && ($K_coeff[$nomeservizio]==0) )
                return false;
        }
        return true;
    }

    public static function creaIndirizzo($indirizzo,$cap="",$citta="",$provincia="",$paese=""){
        $testo = $indirizzo;
        if($cap!=""){
            $testo .= ", ".$cap;
            if($citta!=""){
                $testo .= " - ".$citta;
            }
        }else{
            if($citta!=""){
                $testo .= ", ".$citta;
            }
        }
        if($provincia!=""){
            $testo .= " (".$provincia.")";
        }
        /*
        if($paese!=""){
            $testo .= ", ".$paese;
        }
        */
        return $testo;
    }

    /* Funzione di comodo per creare il nome file dei PDF */
    public static function slugify($text)
    {
        // replace non letter or digits by -
        $text = preg_replace('~[^\pL\d]+~u', '-', $text);

        // transliterate
        $text = iconv('utf-8', 'us-ascii//TRANSLIT', $text);

        // remove unwanted characters
        $text = preg_replace('~[^-\w]+~', '', $text);

        // trim
        $text = trim($text, '-');

        // remove duplicate -
        $text = preg_replace('~-+~', '-', $text);

        // lowercase
        $text = strtolower($text);

        if (empty($text)) {
            return 'n-a';
        }

        return $text;
    }

    public static function caricaValoriDefault( $params = [] , $b){

        $idCondominio = $b["idCondominio"];
        $risposta = [];

        $condominio = Condominio::findById( $idCondominio );
        $risposta["idLayoutProspettoMillesimale"] = $condominio->idLayoutProspettoMillesimale;

        $bollette = Bolletta::query()
            ->where("idCondominio=".$idCondominio)
            ->setOrderBy("id","DESC")
            ->setLimit(1)
            ->getAll();

        foreach ($bollette as $v){
            if($v->idLayoutProspettoMillesimale>0)
                $risposta["idLayoutProspettoMillesimale"] = $v->idLayoutProspettoMillesimale;
            $risposta["normativa"] = $v->normativa;
            $risposta["millesimi_utilizzati"] = $v->millesimi_utilizzati;
            $risposta["label_millesimi"] = $v->label_millesimi;
            $risposta["coeff"] = $v->coeff;
        }

        $risposta["idCondominio"] = $idCondominio;

        echo json_encode($risposta);
        exit;
    }


}

