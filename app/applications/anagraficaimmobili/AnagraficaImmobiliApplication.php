<?php
namespace applications\anagraficaimmobili;


use applications\anagraficaimmobili\applicazioni\AmministratoriDiCondominioBackend;
use applications\anagraficaimmobili\applicazioni\ClientiFatturazioneBackend;
use applications\anagraficaimmobili\applicazioni\CondominiBackend;
use applications\anagraficaimmobili\applicazioni\EdificiBackend;
use applications\anagraficaimmobili\applicazioni\FornitoriBackend;
use applications\anagraficaimmobili\applicazioni\ResponsabiliImpiantiBackend;
use applications\anagraficaimmobili\applicazioni\UnitaAbitativeBackend;
use applications\anagraficaimmobili\applicazioni\TipiUnitaBackend;
use applications\anagraficaimmobili\applicazioni\TipiStanzaBackend;
use applications\anagraficaimmobili\applicazioni\TipiAggregatoreBackend;
use applications\anagraficaimmobili\applicazioni\TipiContatoreBackend;
use applications\anagraficaimmobili\applicazioni\LayoutsProspettoMillesimaleBackend;
use applications\anagraficaimmobili\applicazioni\StanzeBackend;
use applications\anagraficaimmobili\applicazioni\ContatoriBackend;
use applications\anagraficaimmobili\applicazioni\AggregatoriBackend;
use applications\anagraficaimmobili\applicazioni\GeneratoriBackend;
use applications\anagraficaimmobili\applicazioni\VettoriBackend;
use applications\anagraficaimmobili\applicazioni\LettureAggregateBackend;
use applications\anagraficaimmobili\applicazioni\LettureContatoriBackend;
use applications\reports\applicazioni\BolletteBackend;

use applications\anagraficaimmobili\entities\Aggregatore;
use applications\anagraficaimmobili\entities\Contatore;
use applications\anagraficaimmobili\entities\LetturaAggregata;
use applications\anagraficaimmobili\entities\LetturaContatore;
use applications\anagraficaimmobili\entities\Stanza;
use applications\anagraficaimmobili\entities\TipoUnita;
use applications\anagraficaimmobili\entities\TipoStanza;
use applications\anagraficaimmobili\entities\TipoContatore;
use applications\anagraficaimmobili\entities\TipoAggregatore;
use applications\anagraficaimmobili\entities\LayoutProspettoMillesimale;
use applications\anagraficaimmobili\entities\AmministratoreCondominio;
use applications\anagraficaimmobili\entities\ClienteFatturazione;
use applications\anagraficaimmobili\entities\Condominio;
use applications\anagraficaimmobili\entities\Edificio;
use applications\anagraficaimmobili\entities\Fornitore;
use applications\anagraficaimmobili\entities\ResponsabileImpianto;
use applications\anagraficaimmobili\entities\UnitaAbitativa;
use applications\anagraficaimmobili\entities\Generatore;
use applications\anagraficaimmobili\entities\Vettore;


use applications\ecommerce\entities\Cliente;
use applications\pages\entities\Pagina;
use applications\reports\entities\Bolletta;
use backend\Menu;
use core\abstracts\Application;
use core\Config;
use core\Model;
use core\Route;
use core\services\Response;
use core\services\RouterService;

class AnagraficaImmobiliApplication extends Application {

    static $config = [];

    static function init($n)
    {
        parent::init($n); // TODO: Change the autogenerated stub

        FiltriQuery::init();

        $menu = new Menu("Gestione Immobili","apartment");
        $menu->addItem("Condomini",RouterService::getRoute(Condominio::getEntity().".list"));
        $menu->addItem("Edifici",RouterService::getRoute(Edificio::getEntity().".list"));
        $menu->addItem("UnitaAbitative",RouterService::getRoute(UnitaAbitativa::getEntity().".list"));
        //$menu->addItem("Stanze",RouterService::getRoute(Stanza::getEntity().".list"));
        $menu->addItem("Contatori",RouterService::getRoute(Contatore::getEntity().".list"));
        $menu->addItem("Aggregatori",RouterService::getRoute(Aggregatore::getEntity().".list"));
        $menu->addItem("Vettori",RouterService::getRoute(Vettore::getEntity().".list"));
        $menu->addItem("Generatori",RouterService::getRoute(Generatore::getEntity().".list"));
        $backend = Response::getBackendTemplate();
        $backend::addMenu($menu);
        unset($menu);

        /*
        $menu = new Menu("Gestione Bollette","diamond");
        $menu->addItem("Bollette",RouterService::getRoute(Bolletta::getEntity().".list"));
        $backend = Response::getBackendTemplate();
        $backend::addMenu($menu);
        unset($menu);
        */


        $menu = new Menu("Gest. Anagrafiche","user");
        $menu->addItem("Amministratori Condominio",RouterService::getRoute(AmministratoreCondominio::getEntity().".list"));
        $menu->addItem("Responsabili Impianto",RouterService::getRoute(ResponsabileImpianto::getEntity().".list"));
        $menu->addItem("Proprietari Immobili",RouterService::getRoute(ClienteFatturazione::getEntity().".list"));
        $backend = Response::getBackendTemplate();
        $backend::addMenu($menu);
        unset($menu);


        $menu = new Menu("Letture","list");
        $menu->addItem("Letture Aggregatori",RouterService::getRoute(LetturaAggregata::getEntity().".list"));
        $menu->addItem("Letture Contatori",RouterService::getRoute(LetturaContatore::getEntity().".list"));
        $backend = Response::getBackendTemplate();
        $backend::addMenu($menu);
        unset($menu);

        $menu = new Menu("Settings","cog");
        $menu->addItem("Tipologia Aggregatore",RouterService::getRoute(TipoAggregatore::getEntity().".list"));
        $menu->addItem("Tipologia Contatore",RouterService::getRoute(TipoContatore::getEntity().".list"));
        $menu->addItem("Layout Prospetto Millesimale",RouterService::getRoute(LayoutProspettoMillesimale::getEntity().".list"));
        $backend = Response::getBackendTemplate();
        $backend::addMenu($menu);
        unset($menu);

        $menu = new Menu("Settings di Sistema","magic-wand");
        $menu->addItem("Tipologie UnitÃ  Abitativa",RouterService::getRoute(TipoUnita::getEntity().".list"));
        $menu->addItem("Tipologia Stanza",RouterService::getRoute(TipoStanza::getEntity().".list"));
        $backend = Response::getBackendTemplate();
        $backend::addMenu($menu);
        unset($menu);

        $menu = new Menu("Gestione Fornitori","diamond");
        $menu->addItem("Fornitori",RouterService::getRoute(Fornitore::getEntity().".list"));
        $backend = Response::getBackendTemplate();
        $backend::addMenu($menu);
        unset($menu);



    }

    static function install()
    {

        return [
            TipoStanza::class,
            TipoContatore::class,
            TipoAggregatore::class,
            TipoUnita::class,
            LayoutProspettoMillesimale::class,
            Fornitore::class,
            AmministratoreCondominio::class,
            ResponsabileImpianto::class,
            ClienteFatturazione::class,
            Condominio::class,
            Edificio::class,
            UnitaAbitativa::class,
            //Stanza::class,
            Aggregatore::class,
            Contatore::class,
            Generatore::class,
            Vettore::class,
            LetturaAggregata::class,
            LetturaContatore::class,
        ];
    }


    static function declareRoutes()
    {


        RouterService::addRoutesPrefixed(FornitoriBackend::declareRoutes(),"/backend/fornitori/");
        RouterService::addRoutesPrefixed(AmministratoriDiCondominioBackend::declareRoutes(),"/backend/amministratori-di-condominio/");
        RouterService::addRoutesPrefixed(ResponsabiliImpiantiBackend::declareRoutes(),"/backend/responsabili-impianto/");
        RouterService::addRoutesPrefixed(ClientiFatturazioneBackend::declareRoutes(),"/backend/proprietari-immobile/");

        RouterService::addRoutesPrefixed(CondominiBackend::declareRoutes(),"/backend/condomini/");
        RouterService::addRoutesPrefixed(EdificiBackend::declareRoutes(),"/backend/edifici/");
        RouterService::addRoutesPrefixed(UnitaAbitativeBackend::declareRoutes(),"/backend/unita-abitative/");
        //RouterService::addRoutesPrefixed(StanzeBackend::declareRoutes(),"/backend/stanze/");
        RouterService::addRoutesPrefixed(ContatoriBackend::declareRoutes(),"/backend/contatori/");
        RouterService::addRoutesPrefixed(GeneratoriBackend::declareRoutes(),"/backend/generatori/");
        RouterService::addRoutesPrefixed(VettoriBackend::declareRoutes(),"/backend/vettori/");

        RouterService::addRoutesPrefixed(TipiUnitaBackend::declareRoutes(),"/backend/tipologie-unita-abitativa/");
        RouterService::addRoutesPrefixed(TipiStanzaBackend::declareRoutes(),"/backend/tipologie-stanza/");
        RouterService::addRoutesPrefixed(TipiAggregatoreBackend::declareRoutes(),"/backend/tipologie-aggregatore/");
        RouterService::addRoutesPrefixed(AggregatoriBackend::declareRoutes(),"/backend/aggregatori/");
        RouterService::addRoutesPrefixed(TipiContatoreBackend::declareRoutes(),"/backend/tipologie-contatore/");
        RouterService::addRoutesPrefixed(LayoutsProspettoMillesimaleBackend::declareRoutes(),"/backend/layouts-prospetto-millesimale/");

        RouterService::addRoutesPrefixed(LettureAggregateBackend::declareRoutes(),"/backend/letture-aggregate/");
        RouterService::addRoutesPrefixed(LettureContatoriBackend::declareRoutes(),"/backend/letture-contatori/");

        return [];

        //return [];

        /*
        $condominio = [
            Condominio::getEntity().".list"  =>  new Route( Condominio::getEntity()."list" ,"/backend/anagraficaimmobili/condominio",[Condominio::class,"listaCondomini"]),
            Condominio::getEntity().".mod"  =>  new Route( Condominio::getEntity()."mod" ,"/backend/anagraficaimmobili/condominio/".Condominio::getModLink(),[Condomini::class,"editCondominio"]),
            Condominio::getEntity().".update"  =>  (new Route( Condominio::getEntity()."mod" ,"/backend/anagraficaimmobili/condominio/".Condominio::getModLink(),[Condomini::class,"updateCondominio"]))->method(Route::METHOD_PUT),
            Condominio::getEntity().".add"  =>  (new Route( Condominio::getEntity()."mod" ,"/backend/anagraficaimmobili/condominio/".Condominio::getAddLink(),[Condomini::class,"addCondominio"])),
            Condominio::getEntity().".delete"  =>  (new Route( Condominio::getEntity()."mod" ,"/backend/anagraficaimmobili/condominio/".Condominio::getModLink()."/delete",[Condomini::class,"deleteCondominio"])),
            Condominio::getEntity().".insert"  =>  (new Route( Condominio::getEntity()."insert" ,"/backend/anagraficaimmobili/condominio/".Condominio::getAddLink(),[Condomini::class,"insertCondominio"]))->method(Route::METHOD_POST),
        ];
        $edificio = [];
        $unitaabitativa = [];


        return array_merge(
            [
                "anagraficaimmobili.catalogo"  =>  new Route("anagraficaimmobili.catalogo","/backend/anagraficaimmobili/catalogo",[Catalogo::class ,"catalogo"]),

            ],$condominio,$edificio,$unitaabitativa
        );

        //return $condominio;
        */

    }



    static function getFrontendApplication()
    {
        return null;
    }

    static function getBackendApplication()
    {
        return AnagraficaImmobiliBackend::class;
        // return null;
    }

    static function getEntityClass()
    {
        return null;
    }


    static function getVersion()
    {
        return "1.1";
    }

    static function upgrade($from, $to)
    {

        if($from == 1 && $to == 1.1) {
            $amministratori = AmministratoreCondominio::query()->getAll();
            foreach ($amministratori as $key=>$value){
                $value->nome .= " ".$value->cognome;
                $value->cognome = "";
                $value->save();
            }

            $responsabili = ResponsabileImpianto::query()->getAll();
            foreach ($responsabili as $key=>$value){
                $value->nome .= " ".$value->cognome;
                $value->cognome = "";
                $value->save();
            }
        }
    }

}