<?php

namespace applications\anagraficaimmobili\entities;


use core\db\Field;
use core\Model;
use core\services\Db;

use applications\anagraficaimmobili\entities\Aggregatore;
use core\services\Request;


class LetturaAggregata extends Model{

    static function schema()
    {
        return [
            "id"    =>  Field::primaryIndex(),
            "idAggregatore"  =>  Field::int()->editable()->setLabel("Aggregatore")->setTemplate("select")->setTemplateVar(
                function(){

                    if( $idCondominio = Request::getParams("idCondominio") ){
                        $query = Aggregatore::query(true);
                        $query->setFields("aggregatore.*");
                        $query->join(Condominio::getEntity(),"id","idCondominio");
                        $query->where(Condominio::getTable().".id=".$idCondominio);


                        return Aggregatore::getForSelect("nomeAggregatore","id",$query)();
                    }
                    return   Aggregatore::getForSelect("nomeAggregatore","id")();

                })->setHint("Aggregatore da cui Ã¨ arrivata la lettura")->required(),

            "denominazione"  =>  Field::varchar(150)->editable()->setMaxlength(150)->setPlaceholder("Nome Lettura")->inlist(true)->required()->setHint("Es: Masaccio 20/10/2017"),
            "nomeFileDati"  =>  Field::varchar(150)->setMaxlength(150)->setPlaceholder("Nome del File")->inlist(false),
            "fileDati"  =>  Field::varchar(255)->setMaxlength(255)->setPlaceholder("Nome e percorso completo del file")->inlist(false),
            "dataLetturaFile"  =>  Field::date()->inlist(false)->setTemplate("data")->setLabel("Data lettura File"),

            "progressivoLettura"  =>  Field::int()->setTemplate("int")->setFieldsize("small")->setLabel("Progessivo Lettura")->inlist(false),




            "metodoLettura"	=> Field::int()->editable()->setTemplate("select")->setTemplateVar([
                ["label" => "File Import", "value" => 1],
                ["label" => "FTP", "value" => 2],
                ["label" => "Email", "value" => 3],
                ["label" => "URL", "value" => 4],
            ])->setFieldsize("small")->setLabel("Metodo di Lettura"),
/*
            "letturareset"      =>  Field::reference()->setTemplate("checkbox")->editable()->setLabel("Imposta come reset dei valori dei contatori")->newLine(),
            "letturaresetData"  =>  Field::reference()->setTemplate("data")->editable()->setLabel("Imposta la data di lettura")->setFieldsize("small")->hideIf("letturareset",0)->newLine()
*/

        ];
    }

    function displayValue($key)
    {
        switch ($key){

            case "idAggregatore":
                if( $this->idAggregatore ) {
                    $f = Aggregatore::findById($this->idAggregatore);
                    if ($f) {
                        return $f->nomeAggregatore;
                    }
                }
                break;


            case "progressivo_data":
                return $this->denominazione;
                //return $this->progressivoLettura . " - " . date("d/m/Y", strtotime($this->dataLetturaFile));
                break;

            case "metodoLettura":
                switch($this->metodoLettura){
                    case "1": return "File Import"; break;
                    case "2": return "FTP"; break;
                    case "3": return "Email"; break;
                    case "4": return "URL"; break;
                }
                break;


       }
        return parent::displayValue($key); // TODO: Change the autogenerated stub
    }

    function remove()
    {
        $l = LetturaContatore::query(true)
            ->where("idLetturaAggregata=".$this->id)
            ->getAll();
        foreach ($l as $item) {
            $item->remove();
        }
        return parent::remove(); // TODO: Change the autogenerated stub
    }
}


