<?php

namespace applications\anagraficaimmobili\entities;


use applications\reports\applicazioni\BolletteBackend;
use applications\reports\entities\Consumo;
use core\db\Field;
use core\Model;
use core\services\Db;

use applications\anagraficaimmobili\entities\Condominio;
use applications\anagraficaimmobili\entities\Edificio;
use applications\anagraficaimmobili\entities\Generatore;
use core\services\Request;


class Vettore extends Model{


    function remove()
    {

        $consumiCollegati = Consumo::query(true)->where("idVettore=".$this->id)->getAll();

        if(!empty($consumiCollegati)){
            foreach ($consumiCollegati as $key=>$value){

                $value->remove();
                BolletteBackend::calcolaValoriEnergiaErogata(["id"=>$value->idBolletta]);
            }
        }


        return parent::remove(); // TODO: Change the autogenerated stub
    }

    static function schema()
    {
        return [
            "id"    =>  Field::primaryIndex(),
            "idGeneratore"  =>  Field::int()->editable()->required(true)->setLabel("Generatore Associato")->setTemplate("select")->setTemplateVar(function( $e , $field){
                /**
                 * @var $field Field
                 */


                //Generatore::getForSelect("descrizione","id")


                if(Request::getParams("idCondominio") || $e->idGeneratore) {




                    $idCondominio = Request::getParams("idCondominio") ? Request::getParams("idCondominio") : Generatore::findById($e->idGeneratore)->idCondominio;


                    $query = Generatore::query(true)->where("idCondominio=".$idCondominio);
                    $f = Generatore::getForSelect("descrizione", "id",$query)();
                }else {
                    $f = Generatore::getForSelect("condominio_descrizione", "id")();
                }
                return $f;
            }),

            /*
             * Questi mica mi servono...
            "idCondominio"  =>  Field::int()->editable()->setLabel("Condominio")->setTemplate("select")->setTemplateVar(Condominio::getForSelect("denominazione","id"))->setHint("Seleziona il CONDOMINIO se il Vettore si applica all'intero condominio"),
            "idEdificio"  =>  Field::int()->editable()->setTemplate("select")->setTemplateVar(Edificio::getForSelect("Condominio_Edificio","id"))->inlist()->setLabel("Condominio - Edificio")->setHint("Seleziona l'EDIFICIO se il Vettore si applica ad un solo Edificio"),
             */


            "tipologiaVettore"	=> Field::int()->editable()->setTemplate("select")->setTemplateVar([
                ["label" => "Gas Naturale", "value" => 1],
                ["label" => "Energia Elettrica", "value" => 2],
                ["label" => "Gasolio", "value" => 3],
                ["label" => "GPL", "value" => 4],

            ])->setFieldsize("medium")->setLabel("Tipologia"),

            "codice"  =>  Field::varchar(100)->setMaxlength(100)->setFieldsize("medium")->setLabel("Codice Vettore")->setPlaceholder("Codice Univoco del Vettore")->inlist(false),
            "descrizione"  =>  Field::varchar(255)->setMaxlength(255)->setPlaceholder("Descrizione del vettore")->inlist(false)->required(),

            "letturaIniziale"  =>  Field::float()->setTemplate("float")->setFieldsize("small")->setLabel("Lettura iniziale")->inlist(false),
            "dataLetturaIniziale"  =>  Field::date()->setTemplate("data")->setFieldsize("small")->setLabel("Data Lettura Iniziale")->inlist(false),


            "fabbisognoCLI"  =>  Field::float()->editable()->setTemplate("float")->setFieldsize("small")->setLabel("Fabbisogno per CLI nel periodo considerato")->inlist(false),
            "fabbisognoACS"  =>  Field::float()->editable()->setTemplate("float")->setFieldsize("small")->setLabel("Fabbisogno per ACS nel periodo considerato")->inlist(false),
            "fabbisognoCLE"  =>  Field::float()->editable()->setTemplate("float")->setFieldsize("small")->setLabel("Fabbisogno per CLE nel periodo considerato")->inlist(false),


            "vettoreEnergetico"  =>  Field::boolean()->editable()->inlist(false)->setTemplate("checkbox")->setLabel("Vettore Energetico?")->setPlaceholder("Attiva")->setHint("E' il vettore che porta componente energetica all'impianto?"),



            "attivo"  =>  Field::int()->inlist(false),
        ];
    }

    function displayValue($key)
    {
        switch ($key){

            case "tipologiaVettore":
                switch ($this->tipologiaVettore){
                    case 1: return "Gas Naturale"; break;
                    case 2: return "Energia Elettrica"; break;
                    case 3: return "Gasolio"; break;
                    case 4: return "GPL"; break;
                    default: return "-";
                }
                break;

            case "tipologiaVettore_unitamisura":
                switch ($this->tipologiaVettore){
                    case 1: return "Mc"; break;
                    case 2: return "kWh"; break;
                    case 3: return "Lt"; break;
                    case 4: return "Mc"; break;
                    default: return "-";
                }
                break;

            case "idCondominio":
                if( $this->idCondominio ) {
                    $f = Condominio::findById($this->idCondominio);
                    if ($f) {
                        return $f->denominazione;
                    }
                }
                break;

            case "idEdificio":
                if( $this->idEdificio ) {
                    $f = Edificio::findById($this->idEdificio);
                    if ($f) {
                        $c = Condominio::findById($f->idCondominio);
                        if($c){
                            return $c->denominazione." - ".$f->nomeEdificio;
                        }else{
                            return $f->nomeEdificio;
                        }
                    }
                }
                break;

            case "idGeneratore":
                if( $this->idGeneratore ) {
                    $f = Generatore::findById($this->idGeneratore);
                    if ($f) {
                        return $f->descrizione;
                    }
                }
                return "-";
                break;

       }
        return parent::displayValue($key); // TODO: Change the autogenerated stub
    }
}


