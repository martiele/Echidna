<?php

namespace applications\anagraficaimmobili\entities;


use applications\login\entities\User;
use core\db\Field;
use core\Model;
use core\services\Db;

use applications\anagraficaimmobili\entities\Fornitore;

class AmministratoreCondominio extends Model{


    static function schema()
    {
        return array_merge( [

            "id"    =>  Field::primaryIndex(),
            "idFornitore"  =>  Field::int()->editable()->setLabel("Gestore")->setTemplate("select")->setTemplateVar( Fornitore::getForSelect("nome_cognome","id") )->setFieldsize("medium"),


            "nome" => Field::varchar(100)->editable()->setLabel("Nominativo"),
            "cognome" => Field::varchar(100)->inlist(false),
            /*
            "user_nome" =>  Field::reference()->inlist(true)->setLabel("Nome"),
            "user_cognome" =>  Field::reference()->inlist(true)->setLabel("Cognome"),
            "user_email" =>  Field::reference()->inlist(true)->setLabel("Email"),
            "user_username" =>  Field::reference()->inlist(true)->setLabel("Username"),
    */
            "recapito"  =>  Field::varchar(100)->inlist(false)->editable()->setFieldsize("medium")->setMaxlength(100)->setPlaceholder("Inserisci un recapito telefonico"),

            "indirizzo"  =>  Field::varchar(512)->editable()->inlist(false)->setPlaceholder("Indirizzo e numero civico"),
            "cap"  =>  Field::varchar(10)->editable()->setTemplate("cap")->inlist(false)->setPlaceholder("CAP")->setFieldsize("small")->setMaxlength(5),
            "citta"  =>  Field::varchar(100)->editable()->inlist(false)->setPlaceholder("Inserisci cittÃ ")->setFieldsize("medium")->setMaxlength(100),
            "provincia"  =>  Field::varchar(5)->editable()->inlist(false)->setPlaceholder("Provincia")->setFieldsize("small")->setMaxlength(2),
            "paese"  =>  Field::varchar(100)->editable()->inlist(false)->setPlaceholder("Inserisci nazione")->setFieldsize("medium")->setMaxlength(100),
            "codiceFiscale"  =>  Field::varchar(20)->editable()->setPlaceholder("Inserisci codice fiscale")->setFieldsize("medium")->setMaxlength(16)->setLabel("Codice Fiscale"),

            "attivo"  =>  Field::int()->inlist(false),

            /*"user_id"   =>  Field::int()->editable()->inlist(false)->setLabel("Utente")->setFieldsize("medium")->setTemplate("select-entity")->setTemplateVar(function(){
                return [
                    "fieldid"   =>  "id",
                    "fieldlabel"    =>  "username",
                    "entity"    =>  User::class,
                    "list"  =>   User::getForSelect("username","id")()
                ];
            })*/

        ],parent::schema() );
    }

    static function getInstance($data)
    {
        $instance= parent::getInstance($data); // TODO: Change the autogenerated stub
        $instance->user = $instance->getUser();
        $instance->fornitore = $instance->getFornitore();


        return $instance;
    }

    function getFornitore(){
        if( $this->idFornitore) {
            return Fornitore::findById($this->idFornitore);
        }else{
            return null;
        }
    }
    function getUser(){
        if( $this->user_id) {
            return User::findById($this->user_id);
        }else{
            return null;
        }
    }
    function expand()
    {
        $this->condomini = Condominio::query()->where("idFornitore=".$this->id)->getAll();
    }

    function displayValue($key)
    {
        switch ($key) {
            case "nome_cognome" :
                /*
                if (empty($this->user)) {
                    $this->user = $this->getUser();
                }
                return $this->user->nome . " " . $this->user->cognome;*/

                return $this->nome ." " . $this->cognome;
            case "idFornitore":
                $f = Fornitore::findById($this->idFornitore);

                if ($f) {
                    return $f->user->nome . " " . $f->user->cognome;
                }
                break;
            case "user_nome":
                if( empty($this->user)){
                    $this->user = $this->getUser();
                }
                if($this->user){
                    return $this->user->nome;
                }else{
                    return "-";
                }
                break;
            case "user_cognome":
                if( empty($this->user)){
                    $this->user = $this->getUser();
                }
                if($this->user){
                    return $this->user->cognome;
                }else{
                    return "-";
                }
                break;
            case "user_email":
                if( empty($this->user)){
                    $this->user = $this->getUser();
                }
                if($this->user){
                    return $this->user->email;
                }else{
                    return "-";
                }
            break;
            case "user_username":
                if( empty($this->user)){
                    $this->user = $this->getUser();
                }
                if($this->user){
                    return $this->user->username;
                }else{
                    return "-";
                }
            break;

        }
        return parent::displayValue($key);
    }
}