<?php
namespace applications\anagraficaimmobili\applicazioni;

use applications\anagraficaimmobili\AnagraficaImmobiliApplication;
use applications\anagraficaimmobili\entities\Condominio;
use applications\anagraficaimmobili\entities\Contatore;
use applications\anagraficaimmobili\entities\Edificio;
use applications\anagraficaimmobili\entities\UnitaAbitativa;
use applications\anagraficaimmobili\entities\TipoUnita;
use applications\login\LoginApplication;
use applications\main\entities\Notification;
use applications\meta\entities\Meta;
use Aura\Sql\Exception;
use core\Config;
use core\Email;
use core\Route;
use core\RouteFilter;
use core\services\Db;
use core\services\EmailService;
use core\services\Request;
use core\services\Response;
use core\services\RouterService;
use core\services\SessionService;
use function MongoDB\BSON\fromJSON;


class ContatoriBackend extends \core\abstracts\BackendApplication{
    static function getApplication()
    {
        return AnagraficaImmobiliApplication::class;
    }

    static function getEntityClass()
    {
        return Contatore::class;
    }

    public static function actionAdd($params = [])
    {
        $m = parent::actionAdd($params); // TODO: Change the autogenerated stub
        $m[1]['title'] = "Nuovo Contatore";


        $data = $m[1];


        if(isset($params['idCondominio'])) {

            $breadcrumbs = [];

            $n = Condominio::query(true)->setFields("denominazione")->where("id=" . $params['idCondominio'])->getOne();
            if ($n) {
                $nomeCondomino = $n->denominazione;
                $routeModificaCondominio = RouterService::getRoute(Condominio::getEntity() . ".mod");
                $linkCondominio = $routeModificaCondominio->build(["id" => $params['idCondominio']]);

                $breadcrumbs[] = ["label" => $nomeCondomino, "link" => $linkCondominio];


                $breadcrumbs[] = ["label" => "Lista contatori", "link" => $routeModificaCondominio->build(["id" => $params['idCondominio'], "tab" => 3])];
            }


            $breadcrumbs[] = [
                "label" => "Aggiungi nuovo contatore", "link" => ""
            ];

            $data['breadcrumbs'] = $breadcrumbs;
        }



        return [
            $m[0],
            $data
        ];



        return $m;
    }


    static function actionInsert($params = [], $data = null)
    {
        $r = parent::actionInsert($params, $data); // TODO: Change the autogenerated stub

        $e = $r[1]["data"]['data'];

        $condominio = null;
        if( !empty($e->idUnitaAbitativa) ){
            $condominio = Condominio::query(true)
                ->setFields(Condominio::getTable().".*")
                ->join(Edificio::getEntity(),"idCondominio","id")
                ->join(UnitaAbitativa::getEntity(),"idEdificio","id",Edificio::getEntity())
                ->where(UnitaAbitativa::getTable().".id=".$e->idUnitaAbitativa)->getOne();
        }

        if( !empty($e->idCondominio) ){
            $condominio = Condominio::query(true)->where("id=".$e->idCondominio);
        }


        if( $condominio ){


            if( $condominio ) {
                return Response::redirect(
                    [

                        [
                            "label" => "Torna alla lista", "url" => RouterService::getRoute(Condominio::getEntity() . ".mod")->build([
                            "id" => $condominio->id,
                            "tab" => 3
                        ])
                        ],
                        [
                            "label" => "Continua", "url" => RouterService::$routes[$e::getEntity() . ".mod"]->build(['id' => $e->id])
                        ]
                    ]

                    , $e);
            }
        }


        return $r;

    }




    public static function actionMod($params = [])
    {
        $m = parent::actionMod($params); // TODO: Change the autogenerated stub
        $m[1]["title"] = "Modifica Contatore: ".$m[1]["data"]->codiceContatore;




        $data = [];

        if(!empty($m[1]["data"]->idUnitaAbitativa)) {
            if( $condominio = Condominio::query(true)
                ->setFields(Condominio::getTable() . ".*")
                ->join(Edificio::getEntity(), "idCondominio", "id")
                ->join(UnitaAbitativa::getEntity(), "idEdificio", "id", Edificio::getEntity())
                ->where(UnitaAbitativa::getTable() . ".id=" . $m[1]["data"]->idUnitaAbitativa)->getOne() ){

                $breadcrumbs=[];


                $nomeCondomino = $condominio->denominazione;
                $routeModificaCondominio = RouterService::getRoute(Condominio::getEntity().".mod");
                $linkCondominio = $routeModificaCondominio->build(["id"=>$condominio->id]);

                $breadcrumbs[] = ["label"=>$nomeCondomino, "link"=>$linkCondominio];
                $breadcrumbs[] = ["label"=>"Lista contatori", "link"=>$routeModificaCondominio->build(["id"=>$condominio->id,"tab"=>3])];

                $breadcrumbs[] = ["label"=>$m[1]["data"]->codice, "link"=>""];

                $data["breadcrumbs"]=$breadcrumbs;

            }

        }


        $m[1] = array_merge($m[1],$data);


        return $m;
    }

    public static function actionList($params = [])
    {
        $m = parent::actionList($params); // TODO: Change the autogenerated stub
        $m[1]['title'] = "Elenco dei Contatori";
        return $m;
    }

    static function actionDelete($params = [])
    {



        $return = parent::actionDelete($params); // TODO: Change the autogenerated stub
        if(isset($params['idCondominio'])){
            return Response::redirect(RouterService::getRoute(Condominio::getEntity().".mod")->build([
                "id"=>$params['idCondominio'],
                "tab"   =>  "3",
                "3-page"  =>  isset($params['page']) ? $params['page'] : 0
            ]));
        }


        return $return;

    }

    static function actionImport($params = [])
    {

        if(isset($params['idCondominio'])){

            $edifici = Edificio::findByIdCondominio($params['idCondominio']);
            $edificiValori = [];
            $edificiLabels = [];

            foreach ($edifici as $val){
                $edificiValori[]=$val->id;
                $edificiLabels[]=$val->displayValue("Condominio_Edificio");
            }

            $params["extraConditions"] = [
                "idEdificio"    =>  [
                    "label" =>  "Scegli in quale edificio inserire le unitÃ  abitative",
                    "type" =>   "select",
                    "values" =>  $edificiValori,
                    "labels"=>$edificiLabels
                ],
                "idCondominio"    =>  [
                    "type" =>   "hidden",
                    "value" =>  $params['idCondominio']
                ]
            ];


        }


        $params["mappatura"] = array ( 'ID' => 'idUnitaAbitativa',
            'MODELLO' => 'modello',
            'MATRICOLA' => 'codice',
            'UBICAZIONE' => 'ubicazione',
            'DATA INSTALLAZIONE' => 'data_installazione',
            'TIPOLOGIA MISURAZIONE' => 'tipologiaMisurazione',
            'CAMPIONAMENTO' => 'campionamento',
            'STATO' => 'stato',
            'FREQUENZA CAMPIONAMENTO' => 'frequenzaDiCampionamento',
            'OFFSET' => 'offSetStart',
            'Kc' => 'Kc',
            'Kq' => 'Kq',
            'DESCRIZIONE' => 'descrizione',
            'APPLICAZIONE Kc - Kq%0D%0A' => 'ApplicaKcKq');

        $params["campoprimario"] = "MATRICOLA";
        return parent::actionImport($params); // TODO: Change the autogenerated stub
    }


    static function actionImportSave($params = [], $post = [])
    {


        $post['converters']=[];


        $post['converters']["idUnitaAbitativa"] = function($value) use ($post){

            $ua = UnitaAbitativa::query(true)
                ->setFields(UnitaAbitativa::getTable().".*")
                ->join(Edificio::getEntity(),"id","idEdificio")
                ->where(Edificio::getTable().".id=".$post['extraConditions']['idEdificio'])
                ->where(UnitaAbitativa::getTable().".codice=".UnitaAbitativa::formatToSql("codice",$value))
                ->getOne();




            if( $ua ){

                return $ua->id;
            }else{
                return false;
            }
        };


        $post['converters']["campionamento"] = function($value){
            foreach( Contatore::schema()["campionamento"]->templateVar as $k=>$v){
                if($v['label'] == $value ){
                    return $v['value'];
                }

                return 0;
            }
        };

        $post['converters']["tipologiaMisurazione"] = function($value){


            foreach( Contatore::schema()["tipologiaMisurazione"]->templateVar as $k=>$v){
                if($v['label'] == $value ){
                    return $v['value'];
                }
            }
            return "URR";
        };

        $post['converters']["data_installazione"] = function($origDate){
            $date = str_replace('/', '-', $origDate );
            $newDate = date("Y-m-d", strtotime($date));
            return $newDate;
        };




        $post['extraConditions'] = function ($query,$dati) use ($post){



            $q = Contatore::query(false)
                ->setFields(Contatore::getTable().".*")
                ->join(UnitaAbitativa::getEntity(),"id","idUnitaAbitativa")
                ->join(Edificio::getEntity(),"id","idEdificio",UnitaAbitativa::getEntity())
                ->where(Edificio::getTable().".id=".$post['extraConditions']["idEdificio"])
                ->where(UnitaAbitativa::getTable().".codice=".UnitaAbitativa::formatToSql("codice",$dati['ID']))
                ->where(Contatore::getTable().".codice=".Contatore::formatToSql("codice",$dati['MATRICOLA']));

          return $q;
        };



        /*

        $query = Contatore::query(false)
            ->join(UnitaAbitativa::getEntity(),"id","idUnitaAbitativa")
            ->join(Edificio::getEntity(),"id","idEdificio",UnitaAbitativa::getEntity())
            ->where(UnitaAbitativa::getTable().".idEdificio=".Edificio::getTable().".id");

        $post['extraConditions'] = [
            "where" => $query->getWhere(),
            "joins"  =>  $query->getJoins()
        ];
*/


        $post['preSave'] = function ($entity) use ($post){


            switch ($entity->tipologiaMisurazione){
                case "URR" :
                case "UR" :
                    $entity->tipoDispositivo = 1;
                    break;
                case "ACC":
                case "ET":
                case "OFF":
                case "AC":
                case "CC":
                    $entity->tipoDispositivo = 2;
                    break;
                default :
                    $entity->tipoDispositivo = 1;
            }

            //Imposto "UnitÃ  Abitativa" di default
            $entity->destinazioneDispositivo = 1;

            $entity->codice = ltrim($entity->codice, '0');

            $idUnita = $entity->idUnitaAbitativa;
            if($idUnita>0){
                $UnitaAbitativa = UnitaAbitativa::findById($idUnita);
                if($UnitaAbitativa){
                    $idTipoUnita = $UnitaAbitativa->idTipoUnita;
                    if($idTipoUnita>0){
                        $TipoUnita = TipoUnita::findById($idTipoUnita);
                        if($TipoUnita->tipoPerCalcolo == 3){
                            //E' un locale ad uso collettivo
                            $entity->destinazioneDispositivo = 2;
                        }
                    }
                }
            }else{
                //Non Ã¨ associato ad un unitÃ  abitativa, quindi Ã¨ "generale di sistema"
                $entity->destinazioneDispositivo = 3;
                //devo trovare ed associare l'edificio.
                $idCond = $post["fixedValues"]["idCondominio"];
                if($idCond>0){
                    $edi = Edificio::findByIdCondominio($idCond);
                    if($edi){
                        //prendo il primo edificio disponibile dalla lista
                        $ided = $edi[0]->id;
                        $entity->idEdificio = $ided;
                    }
                }
            }

            $entity->stato = 1;

            if( empty($entity->meseDiReset ) ){
                $idCondominio = $post["fixedValues"]["idCondominio"];
                if($idCondominio>0){
                    $Condominio = Condominio::findById($idCondominio);
                    $meseDiReset = $Condominio->meseDiReset > 0 ? $Condominio->meseDiReset : 10; //default ottobre
                }else{
                    $meseDiReset = 10; //default ottobre
                }
                $entity->meseDiReset = $meseDiReset;
            }


            if($entity->codice==""){
                return null;
            }

            return $entity;
        };



        $r =  parent::actionImportSave($params, $post); // TODO: Change the autogenerated stub


        if(isset($post['fixedValues']['idCondominio'])){
            return Response::redirect( RouterService::getRoute(Condominio::getEntity().".mod")->build([
                "id"    =>  $post['fixedValues']['idCondominio'],
                "tab"   =>  "3"
            ]),null);
        }

        return $r;
    }

}

