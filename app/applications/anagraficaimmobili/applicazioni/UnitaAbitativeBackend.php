<?php
namespace applications\anagraficaimmobili\applicazioni;

use applications\anagraficaimmobili\AnagraficaImmobiliApplication;
use applications\anagraficaimmobili\entities\Condominio;
use applications\anagraficaimmobili\entities\Edificio;
use applications\anagraficaimmobili\entities\Fornitore;
use applications\anagraficaimmobili\entities\TipoUnita;
use applications\anagraficaimmobili\entities\UnitaAbitativa;
use applications\login\LoginApplication;
use applications\main\entities\Notification;
use applications\meta\entities\Meta;
use Aura\Sql\Exception;
use core\Config;
use core\Email;
use core\Route;
use core\RouteFilter;
use core\services\Db;
use core\services\EmailService;
use core\services\Request;
use core\services\Response;
use core\services\RouterService;
use core\services\SessionService;
use function MongoDB\BSON\fromJSON;


class UnitaAbitativeBackend extends \core\abstracts\BackendApplication{
    static function getApplication()
    {
        return AnagraficaImmobiliApplication::class;
    }

    static function getEntityClass()
    {
        return UnitaAbitativa::class;
    }

    public static function actionAdd($params = [])
    {
        $m = parent::actionMod($params); // TODO: Change the autogenerated stub
        $m[1]['title'] = "Nuova Unità Abitativa";


        $data = $m[1];


        if(isset($params['idCondominio'])) {

            $breadcrumbs = [];

            $n = Condominio::query(true)->setFields("denominazione")->where("id=" . $params['idCondominio'])->getOne();
            if ($n) {
                $nomeCondomino = $n->denominazione;
                $routeModificaCondominio = RouterService::getRoute(Condominio::getEntity() . ".mod");
                $linkCondominio = $routeModificaCondominio->build(["id" => $params['idCondominio']]);

                $breadcrumbs[] = ["label" => $nomeCondomino, "link" => $linkCondominio];


                $breadcrumbs[] = ["label" => "Lista unità abitative", "link" => $routeModificaCondominio->build(["id" => $params['idCondominio'], "tab" => 2])];
            }


            $breadcrumbs[] = [
                "label" => "Aggiungi nuova unità abitativa", "link" => ""
            ];

            $data['breadcrumbs'] = $breadcrumbs;
        }



        return [
            $m[0],
            $data
        ];
    }


    static function actionInsert($params = [], $data = null)
    {
        $r = parent::actionInsert($params, $data); // TODO: Change the autogenerated stub

        $e = $r[1]["data"]['data'];

        if( !empty($e->idEdificio) ){
            $condominio = Condominio::query(true)
                ->setFields(Condominio::getTable().".*")
                ->join(Edificio::getEntity(),"idCondominio","id")
                ->where(Edificio::getTable().".id=".$e->idEdificio)->getOne();

            if( $condominio ) {
                return Response::redirect(
                    [

                        [
                            "label" => "Torna alla lista", "url" => RouterService::getRoute(Condominio::getEntity() . ".mod")->build([
                            "id" => $condominio->id,
                            "tab" => 2
                        ])
                        ],
                        [
                            "label" => "Continua", "url" => RouterService::$routes[$e::getEntity() . ".mod"]->build(['id' => $e->id])
                        ]
                    ]

                    , $e);
            }
        }


        return $r;

    }


    public static function actionMod($params = [])
    {

        $mod = parent::actionMod($params); // TODO: Change the autogenerated stub
        $idUnitaAbitativa = $mod[1]["data"]->id;
        $mod[1]["title"] = "Modifica Unità Abitativa: ".$m[1]["data"]->denominazione;


        $queryContatore = UnitaAbitativa::query();
        $queryContatore->where("idUnitaAbitativa=".$idUnitaAbitativa);

        $listaContatori = ContatoriBackend::actionFilteredList(["custom_query"=>$queryContatore]);
        $listaContatori[1]['routeParams']=[
            "idUnitaAbitativa"  =>  $idUnitaAbitativa
        ];
        $listaContatori[1]['title'] = "Lista Contatori dell'Unità Abitativa: ".$mod[1]["data"]->denominazione;

        $breadcrumbs = [];
        if($edificio = Edificio::query(true)->where("id=".$mod[1]["data"]->idEdificio)->getOne()){




            if( $condominio = Condominio::query(true)->setFields("denominazione,id")->where("id=".$edificio->idCondominio)->getOne() ){
                $nomeCondomino = $condominio->denominazione;
                $routeModificaCondominio = RouterService::getRoute(Condominio::getEntity().".mod");
                $linkCondominio = $routeModificaCondominio->build(["id"=>$condominio->id]);

                $breadcrumbs[] = ["label"=>"Condominio : ".$nomeCondomino, "link"=>$linkCondominio];
                $breadcrumbs[] = ["label"=>"Lista unità abitative", "link"=>RouterService::getRoute(Condominio::getEntity().".mod")->build([
                    "id"    =>  $condominio->id,
                    "tab"   =>  "2"
                ]) ];
            }


            $breadcrumbs[] = [
                "label" =>  $mod[1]["data"]->denominazione , "link"=>""
            ];

        }




        return[
            "tabs",[
                "tabs"=>[
                    [
                        "label" =>  "Informazioni Unità Abitativa",
                        "content"   =>  Response::getTemplateToUse($mod[0],$mod[1],"empty.twig")->render()
                    ],
                    [
                        "label" =>  "Contatori",
                        "content"   =>  Response::getTemplateToUse($listaContatori[0],$listaContatori[1],"empty.twig")->render()
                    ]
                ],
                "title"=>"Modifica Unità Abitativa: ".$mod[1]["data"]->denominazione,
                "breadcrumbs"   =>  $breadcrumbs
            ]
        ];

    }

    static function actionDelete($params = [])
    {

        $return = parent::actionDelete($params); // TODO: Change the autogenerated stub
        if(isset($params['idCondominio'])){
            return Response::redirect(RouterService::getRoute(Condominio::getEntity().".mod")->build([
                "id"=>$params['idCondominio'],
                "tab"   =>  "2",
                "2-page"  =>  isset($params['page']) ? $params['page'] : 0
            ]));
        }


        return $return;

    }

    public static function actionList($params = [])
    {
        $m = parent::actionList($params); // TODO: Change the autogenerated stub
        $m[1]['title'] = "Elenco delle Unità Abitative";
        return $m;
    }


    static function actionImport($params = [])
    {

        if(isset($params['idCondominio'])){

            $edifici = Edificio::findByIdCondominio($params['idCondominio']);

            $edificiValori = [];
            $edificiLabels = [];

            foreach ($edifici as $val){
                $edificiValori[]=$val->id;
                $edificiLabels[]=$val->displayValue("Condominio_Edificio");
            }


            $params["extraValues"] = [
                "idEdificio"    =>  [
                    "label" =>  "Scegli in quale edificio inserire le unità abitative",
                    "type" =>   "select",
                    "values" =>  $edificiValori,
                    "labels"=>$edificiLabels
                ],
                "idCondominio"    =>  [
                    "type" =>   "hidden",
                    "value" =>  $params['idCondominio']
                ]
            ];

        }
        if(isset($params['idEdificio'])){
            $params["extraValues"] = [
                "idEdificio"    =>  [
                    "type" =>   "hidden",
                   "value"=>$params['idEdificio']
                ]
            ];
        }


        $params["mappatura"] = [
            "ID"            =>"codice",
            "TIPOLOGIA"     =>"idTipoUnita",
            "DESCRIZIONE"   => "denominazione",
            "PIANO"         =>  "piano",
            "SCALA"         =>  "scala",
            "INTERNO"       =>  "interno",
            "MILLESIMO CLIMA INVERNO"   =>  "millesimiCLI",
            "MILLESIMO ACS" =>  "millesimiACS",
            "MILLESIMO CLIMA ESTATE"    =>  "millesimiCLE",
            "MILLESIMO PROPRIETA'"   =>  "millesimi",
            "MILLESIMO VECCHIO"   =>  "millesimiVecchi",
            "MILLESIMO ALTRO"   =>  "millesimiGenerali"
        ];
        $params['campoprimario'] = "ID";

        return parent::actionImport($params); // TODO: Change the autogenerated stub
    }

    static function actionImportSave($params = [], $post = [])
    {



        if(!isset($post['converters'])){
            $post['converters'] = [];
        }

        $post['converters']['millesimiCLI'] = $post['converters']['millesimiACS'] =
        $post['converters']['millesimiCLE'] = $post['converters']['millesimi'] = function ($value){
            return str_replace(",",".",$value);
        };

        $post['converters']['idTipoUnita'] = function ( $value ){

            //Così diamo un po' di margine d'errore a come lo scrive
             if (strpos(strtolower($value), "collettivo") !== false) {
                 $value = "locale ad uso collettivo";
             }

             switch (strtolower(trim($value))){
                 case "appartamento" :
                     if( $u = TipoUnita::findByTipoPerCalcolo(1) ){

                         return $u[0]->id;
                     }else{
                         return 0;
                     }
                     break;
                 case "fondo commerciale" :
                     if( $u = TipoUnita::findByTipoPerCalcolo(2) ){

                         return $u[0]->id;
                     }else{
                         return 0;
                     }
                     break;
                 case "locale ad uso collettivo" :
                     if( $u = TipoUnita::findByTipoPerCalcolo(3) ){
                         return $u[0]->id;
                     }else{
                         return 0;
                     }
                     break;
            }

        };


        $post['extraConditions'] = function ($query,$dati) use ($post){

            $q = UnitaAbitativa::query(false)
                ->setFields(UnitaAbitativa::getTable().".*")

                ->where("idEdificio=".$post['fixedValues']["idEdificio"])

                ->where("codice=".UnitaAbitativa::formatToSql("codice",$dati['ID']));


            return $q;
        };




        $post['preSave'] = function ($entity){
            /*
            if( empty($entity->millesimiNuovi ) ){
                if( !empty($entity->millesimiCLI)) {
                    $entity->millesimiNuovi = $entity->millesimiCLI;
                }else{
                    $entity->millesimiNuovi = $entity->millesimi;
                }
            }
            */
            if($entity->codice==""){
                return null;
            }

            return $entity;
        };


        $r =  parent::actionImportSave($params, $post); // TODO: Change the autogenerated stub


        if(isset($post['fixedValues']['idCondominio'])){
            return Response::redirect( RouterService::getRoute(Condominio::getEntity().".mod")->build([
                "id"    =>  $post['fixedValues']['idCondominio'],
                "tab"   =>  "2"
            ]),null);
        }

        return $r;
    }

}

