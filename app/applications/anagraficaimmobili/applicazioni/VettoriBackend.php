<?php
namespace applications\anagraficaimmobili\applicazioni;

use applications\anagraficaimmobili\AnagraficaImmobiliApplication;
use applications\anagraficaimmobili\entities\Condominio;
use applications\anagraficaimmobili\entities\Edificio;
use applications\anagraficaimmobili\entities\Generatore;
use applications\anagraficaimmobili\entities\Vettore;
use applications\login\LoginApplication;
use applications\main\entities\Notification;
use applications\meta\entities\Meta;
use Aura\Sql\Exception;
use core\Config;
use core\Email;
use core\Route;
use core\RouteFilter;
use core\services\Db;
use core\services\EmailService;
use core\services\Request;
use core\services\Response;
use core\services\RouterService;
use core\services\SessionService;
use function MongoDB\BSON\fromJSON;


class VettoriBackend extends \core\abstracts\BackendApplication{
    static function getApplication()
    {
        return AnagraficaImmobiliApplication::class;
    }

    static function getEntityClass()
    {
        return Vettore::class;
    }

    public static function actionAdd($params = [])
    {
        $m = parent::actionMod($params); // TODO: Change the autogenerated stub
        $m[1]['title'] = "Nuovo Vettore Energetico";




        $data = $m[1];


        if(isset($params['idCondominio'])) {

            $breadcrumbs = [];

            $n = Condominio::query(true)->setFields("denominazione")->where("id=" . $params['idCondominio'])->getOne();
            if ($n) {
                $nomeCondomino = $n->denominazione;
                $routeModificaCondominio = RouterService::getRoute(Condominio::getEntity() . ".mod");
                $linkCondominio = $routeModificaCondominio->build(["id" => $params['idCondominio']]);

                $breadcrumbs[] = ["label" => $nomeCondomino, "link" => $linkCondominio];


                $breadcrumbs[] = ["label" => "Lista vettori", "link" => $routeModificaCondominio->build(["id" => $params['idCondominio'], "tab" => 6])];
            }


            $breadcrumbs[] = [
                "label" => "Aggiungi nuovo vettore", "link" => ""
            ];

            $data['breadcrumbs'] = $breadcrumbs;
        }



        return [
            $m[0],
            $data
        ];



        return $m;
    }

    public static function actionMod($params = [])
    {
        $m = parent::actionMod($params); // TODO: Change the autogenerated stub
        $m[1]["title"] = "Modifica Vettore Energetico: ".$m[1]["data"]->descrizione;





        $data = [];
        if( $condominio = Condominio::query(true)
            ->setFields(Condominio::getTable().".*")
            ->join(Generatore::getEntity(),"idCondominio","id")
            ->where(Generatore::getTable().".id=".$m[1]["data"]->idGeneratore)->getOne() ){

            $breadcrumbs=[];


            $nomeCondomino = $condominio->denominazione;
            $routeModificaCondominio = RouterService::getRoute(Condominio::getEntity().".mod");
            $linkCondominio = $routeModificaCondominio->build(["id"=>$condominio->id]);

            $breadcrumbs[] = ["label"=>$nomeCondomino, "link"=>$linkCondominio];
            $breadcrumbs[] = ["label"=>"Lista vettori", "link"=>$routeModificaCondominio->build(["id"=>$condominio->id,"tab"=>6])];

            $breadcrumbs[] = ["label"=>$m[1]["data"]->descrizione, "link"=>""];

            $data["breadcrumbs"]=$breadcrumbs;
        }
        $m[1] = array_merge($m[1],$data);




        return $m;
    }

    public static function actionList($params = [])
    {
        $m = parent::actionList($params); // TODO: Change the autogenerated stub
        $m[1]['title'] = "Elenco dei Vettore Energetici";
        return $m;
    }

    static function actionDelete($params = [])
    {

        $return = parent::actionDelete($params); // TODO: Change the autogenerated stub
        if(isset($params['idCondominio'])){
            return Response::redirect(RouterService::getRoute(Condominio::getEntity().".mod")->build([
                "id"=>$params['idCondominio'],
                "tab"   =>  "6",
                "6-page"  =>  isset($params['page']) ? $params['page'] : 0
            ]));
        }


        return $return;

    }
}

