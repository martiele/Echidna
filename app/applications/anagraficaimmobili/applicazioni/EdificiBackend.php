<?php
namespace applications\anagraficaimmobili\applicazioni;

use applications\anagraficaimmobili\AnagraficaImmobiliApplication;
use applications\anagraficaimmobili\entities\Condominio;
use applications\anagraficaimmobili\entities\Edificio;
use applications\anagraficaimmobili\entities\UnitaAbitativa;
use applications\anagraficaimmobili\entities\Generatore;
use applications\anagraficaimmobili\entities\Vettore;
use applications\anagraficaimmobili\entities\Contatore;
use applications\login\LoginApplication;
use applications\main\entities\Notification;
use applications\meta\entities\Meta;
use Aura\Sql\Exception;
use core\Config;
use core\Email;
use core\Route;
use core\RouteFilter;
use core\services\Db;
use core\services\EmailService;
use core\services\Request;
use core\services\Response;
use core\services\RouterService;
use core\services\SessionService;
use backend\BackendTemplate;

use function MongoDB\BSON\fromJSON;


class EdificiBackend extends \core\abstracts\BackendApplication{
    static function getApplication()
    {
        return AnagraficaImmobiliApplication::class;
    }

    static function getEntityClass()
    {
        return Edificio::class;
    }

   /*static function actionList( $params = [] ){
        $entity = static::getEntityClass();
        $data = $entity::query()->getAll();

        Response::addVariable(
            [
                "title"         =>  "Lista ".$entity::getEntityName(),
                "breadcrumbs"   =>  [
                    ["link"=>"qwe","label"=>"qwe"]
                ],
                "application_info"  =>  [
                    "icon"   =>  static::getIcon("actionMod"),
                    "title"   =>  static::getTitle("actionList"),
                    "description"   =>  static::getDescription("actionList")
                ]
            ]
        );

        return [
            //questo è il nome del twig
            "applications/anagraficaimmobili/templates/listadany",[
                "data"      => $data,
                "entity"    =>  $entity,
                "fields"    =>  $entity::schema()
            ]
        ];
    }*/

    static function actionAdd($params = [])
    {
        $add = parent::actionMod($params); // TODO: Change the autogenerated stub
        $add[1]['title'] = "Inserisci nuovo Edificio";


        $data = $add[1];


        if(isset($params['idCondominio'])) {

            $breadcrumbs = [];

            $n = Condominio::query(true)->setFields("denominazione")->where("id=" . $params['idCondominio'])->getOne();
            if ($n) {
                $nomeCondomino = $n->denominazione;
                $routeModificaCondominio = RouterService::getRoute(Condominio::getEntity() . ".mod");
                $linkCondominio = $routeModificaCondominio->build(["id" => $params['idCondominio']]);

                $breadcrumbs[] = ["label" => $nomeCondomino, "link" => $linkCondominio];


                $breadcrumbs[] = ["label" => "Lista edifici", "link" => $routeModificaCondominio->build(["id" => $params['idCondominio'], "tab" => 1])];
            }


            $breadcrumbs[] = [
                "label" => "Aggiungi nuovo edificio", "link" => ""
            ];

            $data['breadcrumbs'] = $breadcrumbs;
        }


        return [
            $add[0],
            $data
        ];
    }


        static function actionDelete($params = [])
        {

            $return = parent::actionDelete($params); // TODO: Change the autogenerated stub
            if(isset($params['idCondominio'])){
                return Response::redirect(RouterService::getRoute(Condominio::getEntity().".mod")->build([
                    "id"=>$params['idCondominio'],
                    "tab"   =>  "1",
                    "1-page"  =>  isset($params['page']) ? $params['page'] : 0
                ]));
            }


            return $return;

        }


        static function actionInsert($params = [], $data = null)
        {
            $r = parent::actionInsert($params, $data); // TODO: Change the autogenerated stub

            $e = $r[1]["data"]['data'];

            if( !empty($e->idCondominio) ){
                return Response::redirect(
                    [

                        [
                            "label"=>"Torna alla lista"  , "url" => RouterService::getRoute(Condominio::getEntity().".mod")->build([
                                "id"    =>  $e->idCondominio,
                                "tab"   =>  1
                            ])
                        ],
                        [
                            "label"=>"Continua"  , "url" =>   RouterService::$routes[$e::getEntity().".mod"]->build(['id'=>$e->id])
                        ]
                    ]

                    ,$e);
            }


            return $r;

        }


    static function actionMod($params = [])
    {
        $mod = parent::actionMod($params); // TODO: Change the autogenerated stub
        $idEdificio = $mod[1]["data"]->id;
        $mod[1]["title"] = "Anagrafica Edificio: ".$mod[1]["data"]->nomeEdificio;

        //Unità Abitative
        $queryUnitaAbitativa = UnitaAbitativa::query();
        $queryUnitaAbitativa->where("idEdificio=".$idEdificio);

        $listaUnitaAbitative = UnitaAbitativeBackend::actionFilteredList(["custom_query"=>$queryUnitaAbitativa]);
        $listaUnitaAbitative[1]['routeParams']=[
            "idEdificio"  =>  $idEdificio
        ];
        $listaUnitaAbitative[1]['title'] = "Lista Unità Abitative dell'Edificio: ".$mod[1]["data"]->nomeEdificio;

        $contatoriUnitaAbitative = Contatore::query()
            ->setFields("contatore.*")
            ->join(UnitaAbitativa::class,"id","idUnitaAbitativa")
            ->join(Edificio::class,"id","idEdificio",UnitaAbitativa::class)
            ->where("edificio.id = ".$idEdificio)
            ->getAll();

        $contatoriUsoCollettivo = Contatore::query()
            ->setFields("contatore.*")
            ->join(Edificio::class,"id","idEdificio")
            ->where("edificio.id = ".$idEdificio." AND contatore.destinazioneDispositivo = 2")
            ->getAll();

        $contatoriGenerali = Contatore::query()
            ->setFields("contatore.*")
            ->join(Edificio::class,"id","idEdificio")
            ->join(Condominio::class,"id","idCondominio",Edificio::class)
            ->where("edificio.id = ".$idEdificio." AND contatore.destinazioneDispositivo = 3")
            ->getAll();

        //Generatori
        $queryGeneratori = Generatore::query();
        $queryGeneratori->where("idEdificio=".$idEdificio);

        $listaGeneratori = GeneratoriBackend::actionFilteredList(["custom_query"=>$queryGeneratori]);
        $listaGeneratori[1]['routeParams']=[
            "idEdificio"  =>  $idEdificio
        ];
        $listaGeneratori[1]['title'] = "Lista Generatori dell'edificio: ".$mod[1]["data"]->nomeEdificio;

        //Vettori
        $queryVettori = Vettore::query();
        $queryVettori->where("idEdificio=".$idEdificio);

       /* $listaVettori = VettoriBackend::actionFilteredList(["custom_query"=>$queryVettori]);
        $listaVettori[1]['routeParams']=[
            "idEdificio"  =>  $idEdificio
        ];
        $listaVettori[1]['title'] = "Lista Vettori Energetici dell'edificio: ".$mod[1]["data"]->nomeEdificio;
*/
       $listaVettori = [];

        $nomeCondomino = "Nessun condominio assegnato";
        $linkCondominio = "";
        $breadcrumbs = [];

        $n = Condominio::query(true)->setFields("denominazione")->where("id=".$mod[1]['data']->idCondominio)->getOne();
        if( $n ) {
            $nomeCondomino = $n->denominazione;
            $routeModificaCondominio = RouterService::getRoute(Condominio::getEntity().".mod");
            $linkCondominio = $routeModificaCondominio->build(["id"=>$mod[1]['data']->idCondominio]);

            $breadcrumbs[] = ["label"=>$nomeCondomino, "link"=>$linkCondominio];
            $breadcrumbs[] = ["label"=>"Lista edifici", "link"=>$routeModificaCondominio->build(["id"=>$mod[1]['data']->idCondominio,"tab"=>1])];
        }


        $breadcrumbs[] = [
            "label" =>  $mod[1]["data"]->nomeEdificio , "link"=>""
        ];

        return[
            "tabs",[
                "tabs"=>[
                    [
                        "label" =>  "Informazioni edificio",
                        "content"   =>  Response::getTemplateToUse($mod[0],$mod[1],"empty.twig")->render()
                    ],
                    [
                        "label" =>  "Unità abitative",
                        "content"   =>  Response::getTemplateToUse($listaUnitaAbitative[0],$listaUnitaAbitative[1],"empty.twig")->render()
                    ],
                    [
                        "label" =>  "Contatori",
                        "content"   => BackendTemplate::mergeTemplates([
                            BackendTemplate::renderTemplateGroup("Contatori delle Unità Abitative","contatoriunita",  BackendTemplate::renderTemplate("list",["data"  =>  $contatoriUnitaAbitative,"hideHeader"=>true]),true ),
                            BackendTemplate::renderTemplateGroup("Contatori Locali ad Uso Collettivo","contatoriusocollettivo",  BackendTemplate::renderTemplate("list",["data"  =>  $contatoriUsoCollettivo,"hideHeader"=>true]) ),
                            BackendTemplate::renderTemplateGroup("Contatori Generali","contatorigenerali",  BackendTemplate::renderTemplate("list",["data"  =>  $contatoriGenerali,"hideHeader"=>true]) )
                        ])
                    ],
                    [
                        "label" =>  "Generatori",
                        "content"   =>  Response::getTemplateToUse($listaGeneratori[0],$listaGeneratori[1],"empty.twig")->render()
                    ],
                    [
                        "label" =>  "Vettori",
                        "content"   =>  Response::getTemplateToUse($listaVettori[0],$listaVettori[1],"empty.twig")->render()
                    ]                ],
                "title"=>"Modifica Edificio: ".$mod[1]["data"]->nomeEdificio,
                "breadcrumbs"   =>  $breadcrumbs
            ]
        ];
    }

    public static function actionList($params = [])
    {
        $m = parent::actionList($params); // TODO: Change the autogenerated stub
        $m[1]['title'] = "Elenco degli Edifici";
        return $m;
    }

}

