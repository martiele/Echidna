<?php
namespace applications\anagraficaimmobili\applicazioni;

use applications\anagraficaimmobili\AnagraficaImmobiliApplication;
use applications\anagraficaimmobili\entities\Aggregatore;
use applications\anagraficaimmobili\entities\Condominio;
use applications\anagraficaimmobili\entities\Contatore;
use applications\anagraficaimmobili\entities\Edificio;
use applications\anagraficaimmobili\entities\Fornitore;
use applications\anagraficaimmobili\entities\LetturaAggregata;
use applications\anagraficaimmobili\entities\LetturaContatore;
use applications\login\LoginApplication;
use applications\main\entities\Notification;
use applications\meta\entities\Meta;
use Aura\Sql\Exception;
use core\Config;
use core\Email;
use core\Route;
use core\RouteFilter;
use core\services\Db;
use core\services\EmailService;
use core\services\Request;
use core\services\Response;
use core\services\RouterService;
use core\services\SessionService;
use function MongoDB\BSON\fromJSON;


class LettureAggregateBackend extends \core\abstracts\BackendApplication{
    static function getApplication()
    {
        return AnagraficaImmobiliApplication::class;
    }

    static function getEntityClass()
    {
        return LetturaAggregata::class;
    }

    public static function actionAdd($params = [])
    {
        $m = parent::actionMod($params); // TODO: Change the autogenerated stub
        $m[1]['title'] = "Nuova Lettura Aggregata";




        $data = $m[1];


        if(isset($params['idCondominio'])) {

            $breadcrumbs = [];

            $n = Condominio::query(true)->setFields("denominazione")->where("id=" . $params['idCondominio'])->getOne();
            if ($n) {
                $nomeCondomino = $n->denominazione;
                $routeModificaCondominio = RouterService::getRoute(Condominio::getEntity() . ".mod");
                $linkCondominio = $routeModificaCondominio->build(["id" => $params['idCondominio']]);

                $breadcrumbs[] = ["label" => $nomeCondomino, "link" => $linkCondominio];


                $breadcrumbs[] = ["label" => "Lista letture", "link" => $routeModificaCondominio->build(["id" => $params['idCondominio'], "tab" => 7])];
            }


            $breadcrumbs[] = [
                "label" => "Aggiungi nuova lettura", "link" => ""
            ];

            $data['breadcrumbs'] = $breadcrumbs;
        }



        return [
            $m[0],
            $data
        ];




        return $m;
    }

    public static function actionMod($params = [])
    {

        $mod = parent::actionMod($params); // TODO: Change the autogenerated stub
        $idLetturaAggregata = $mod[1]["data"]->id;
        $mod[1]["title"] = "Modifica lettura aggregata: ".$mod[1]["data"]->progressivoLettura;

        /*
              $queryLettureContatori = LetturaAggregata::query();
              $queryLettureContatori->where("idLetturaAggregata=".$idLetturaAggregata);



              $listaLettureContatori = LettureContatoriBackend::actionFilteredList(["custom_query"=>$queryLettureContatori]);
              $listaLettureContatori[1]['routeParams']=[
                  "idLetturaAggregata"  =>  $idLetturaAggregata
              ];
              $listaLettureContatori[1]['title'] = "Lista Letture Contatori della Lettura Aggregata: ".$mod[1]["data"]->progressivoLettura;
      */


        $listaLettureContatori = LettureContatoriBackend::actionComplessList([
            "params" => "where/idLetturaAggregata=".$idLetturaAggregata,
            "routeParams" =>
                [
                    "idLetturaAggregata"  =>  $idLetturaAggregata
                ]
        ]);
        $listaLettureContatori[1]['title'] = "Lista Letture Contatori della Lettura Aggregata: ".$mod[1]["data"]->progressivoLettura;


        $notices = [];

        //Nuovi Contatori
        $cta = [];
        if($params['nuoviContatori']){
            $n = explode(",",$params['nuoviContatori']);
            foreach ($n as $v){
                $contatore = Contatore::findById($v);
                $cta[]=[
                    "label" =>  $contatore->codice,
                    "route" =>  RouterService::getRoute(Contatore::getEntity().".mod")->prepare(["id"=>$contatore->id]),
                    "target" =>  "_blank"
                ];

            }
        }
        $notice = !empty($cta) ? [
            "message"   =>  "Ci sono dei nuovi contatori aggiunti tramite l'import delle letture",
            "cta"   =>  $cta
        ] : null;
        if($notice)
            $notices[] = $notice;

        //Letture con Errori
        $cta = [];
        if($params['contatoriConErrori']){
            $n = explode(",",$params['contatoriConErrori']);
            foreach ($n as $v){
                $lettura = LetturaContatore::findById($v);
                $contatore = Contatore::findById($lettura->idContatore);
                $cta[]=[
                    "label" =>  "lettura ".$contatore->codice,
                    "route" =>  RouterService::getRoute(LetturaContatore::getEntity().".mod")->prepare(["id"=>$v]),
                    "target" =>  "_blank"
                ];
            }
        }
        $notice = !empty($cta) ? [
            "message"   =>  "Alcuni dati risultano mancanti o non coerenti per questi contatori.<br>Controlla le letture inserite, in particolare la data (corretta automaticamente) e/o se il consumo rilevato (delta) risulta negativo.",
            "cta"   =>  $cta
        ] : null;
        if($notice)
            $notices[] = $notice;

        //Contatori Mancanti
        $cta = [];
        if($params['contatoriMancanti']){
            $n = explode(",",$params['contatoriMancanti']);
            foreach ($n as $v){
                $contatore = Contatore::findById($v);
                $cta[]=[
                    "label" =>  $contatore->codice,
                    "route" =>  RouterService::getRoute(Contatore::getEntity().".mod")->prepare(["id"=>$contatore->id]),
                    "target" =>  "_blank"
                ];

            }
        }
        $notice = !empty($cta) ? [
            "message"   =>  "Attenzione! Nel file, non sono state trovate le letture per i seguenti contatori:",
            "cta"   =>  $cta
        ] : null;
        if($notice)
            $notices[] = $notice;




        $breadcrumbs=[];
        if( $condominio = Condominio::query(true)
            ->setFields(Condominio::getTable().".*")
            ->join(Aggregatore::getEntity(),"idCondominio","id")
            ->where(Aggregatore::getTable().".id=".$mod[1]["data"]->idAggregatore)->getOne()

             ){





            $nomeCondomino = $condominio->denominazione;
            $routeModificaCondominio = RouterService::getRoute(Condominio::getEntity().".mod");
            $linkCondominio = $routeModificaCondominio->build(["id"=>$condominio->id]);

            $breadcrumbs[] = ["label"=>$nomeCondomino, "link"=>$linkCondominio];
            $breadcrumbs[] = ["label"=>"Lista letture", "link"=>$routeModificaCondominio->build(["id"=>$condominio->id,"tab"=>7])];

            $breadcrumbs[] = ["label"=>$mod[1]["data"]->denominazione, "link"=>""];

            $data["breadcrumbs"]=$breadcrumbs;
        }


        return[

            "tabs",[
                "notices"    =>  $notices,
                "tabs"=>[
                    [
                        "label" =>  "Informazioni Lettura Aggregata",
                        "content"   =>  Response::getTemplateToUse($mod[0],$mod[1],"empty.twig")->render()
                    ],
                    [
                        "label" =>  "Letture Contatori",
                        "content"   =>  Response::getTemplateToUse($listaLettureContatori[0],$listaLettureContatori[1],"empty.twig")->render()
                    ]
                ],
                "title"=>"Modifica Lettura Aggregata: ".$mod[1]["data"]->progressivoLettura,
                "breadcrumbs"   =>  $breadcrumbs
            ]
        ];

    }


    static function actionDelete($params = [])
    {

        $return = parent::actionDelete($params); // TODO: Change the autogenerated stub
        if(isset($params['idCondominio'])){
            return Response::redirect(RouterService::getRoute(Condominio::getEntity().".mod")->build([
                "id"=>$params['idCondominio'],
                "tab"   =>  "7",
                "7-page"  =>  isset($params['page']) ? $params['page'] : 0
            ]));
        }


        return $return;

    }


    public static function actionList($params = [])
    {
        $m = parent::actionList($params); // TODO: Change the autogenerated stub
        $m[1]['title'] = "Elenco delle Letture Aggregate";
        return $m;
    }


    static function actionInsert($params = [], $data = null)
    {
        $r = parent::actionInsert($params, $data); // TODO: Change the autogenerated stub

        $lettura = $r[1]['data']['data'];

        if( $lettura->metodoLettura == 1 ){

            return Response::redirect(
                RouterService::getRoute(LetturaContatore::getEntity().".import")->build([
                    "idLetturaAggregata"    =>  $lettura->id
                ])
                ,$lettura);



        }


        return $r;
    }


}

