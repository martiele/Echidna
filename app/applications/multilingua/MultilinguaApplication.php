<?php
namespace applications\multilingua;

use applications\banner\entities\Banner;
use applications\ecommerce\EcommerceApplication;
use applications\ecommerce\entities\Categoria;
use applications\ecommerce\entities\Prodotto;
use applications\meta\entities\Meta;
use applications\multilingua\entities\GenericEntity;
use applications\pages\entities\Pagina;
use core\abstracts\Application;
use core\abstracts\BackendApplication;
use core\abstracts\FrontendApplication;
use core\Config;
use core\db\Field;
use core\db\Query;
use core\Environment;
use core\Events;
use core\Injections;
use core\Model;
use core\Query;
use core\Route;
use core\services\ApplicationsService;
use core\services\Response;
use core\services\RouterService;
use Stripe\Event;

class MultilinguaApplication extends Application{

    static $currentLanguage = "it";
    static $filtersOn = true;

    static $staticTranslations = [];

    static $availableLanguages = [
        "it"    => "Italiano",
        "en"    => "Inglese" ,
        "fr"    =>  "Francese"
    ];

    static function getFrontendApplication()
    {
        return null;
    }

    static function getBackendApplication()
    {
        return MultilinguaBackend::class;
    }

    static function getEntityClass()
    {
       return GenericEntity::class;
    }

    static function init($n)
    {

        parent::init($n); // TODO: Change the autogenerated stub





        $t = Response::getFrontendTemplate();
        $t->addFunction("t",[self::class, "translate" ]);

    }

    static function translate($n){


        if(isset(self::$staticTranslations[$n]) ){
            return self::$staticTranslations[$n];
        }else{
            return $n;
        }
        exit;
    }

    static function addSchema($entity){
        Injections::addToSchema($entity,"translation",Field::boolean()->setDefault(1));

        if( Environment::is(Environment::DEV)) {
            $schema = $entity::schema();
            $schema['translation'] = Field::boolean()->setDefault(1);
            ApplicationsService::installSchema($entity::getTable(),$schema);

            $schema["translation_entity"] = Field::text()->editable()->setTemplate("hidden");
            $schema["translation_entity_id"] = Field::int()->editable()->setTemplate("hidden");
            $schema["translation_lang"] = Field::varchar(10)->editable()->setTemplate("hidden");
            ApplicationsService::installSchema($entity::getTable()."_translation",$schema);
        }
    }
    static function declareRoutes()
    {


        Response::addVariable([
            "availableLanguages"    =>  self::$availableLanguages
        ]);


            self::addSchema(Banner::class);
            self::addSchema(Prodotto::class);
            self::addSchema(Pagina::class);
            self::addSchema(Categoria::class);
            self::addSchema(Meta::class);


        Events::add(Events::BACKEND_ACTION_MOD_RETURN,function ($r){
            $r[0] = "multilingua/templates/mod";
            return [$r];
        });


        Events::add([Events::QUERY_GETONE,Events::QUERY_GETALL],function ($r){

            /**
             * @var $r Query
             */


            if( MultilinguaApplication::$currentLanguage != "it" && self::$filtersOn && isset($r->getEntity()::schema()["translation"]) ) {





                $r->setTable( $r->getTable()."_translation");

                if( count($r->getWhereArray()) > 0) {
                    $where = $r->getWhereArray();
                    foreach ($where["and"] as $k => $w) {
                        $where['and'][$k] = str_replace("id=","translation_entity_id=",$w);
                    }
                    $r->setWhere($where);
                }
                $r->where('translation_lang = "'.self::$currentLanguage.'"');



            }



            return $r;
        });


        Events::add(Events::QUERY_PARSE,function ($table,$where,$entity){


            $schema = $entity::schema();


            if( MultilinguaApplication::$currentLanguage != "it" && self::$filtersOn && isset($schema['translation']) ){

                $table .= "_translation";
                $where .= 'translation_lang = "'.self::$currentLanguage.'" AND';

            }




            return [
                $table,
                $where
            ];
        });




        Events::add(Events::ENTITY_GETINSTANCE,function ($data){

            if( isset($data['translation_entity_id'])) {




                self::$filtersOn = false;
                $n = $data['translation_entity']::findById($data['translation_entity_id']);


                $n->buildProperties(["translation" => $data]);

                unset($data['translation']);
                unset($data["id"]);
                $n->buildProperties($data,true);

                self::$filtersOn = true;



                return [$n];
                exit;
            }

            return [$data];
        });


        Events::add(Events::ROUTER_PARSEQUERY_BEFORE,function( $query ){
            //$found = preg_match("/^([A-Za-z]{2})\/(.*)/",$query,$matches);
            $found = false;
            Response::addVariable([
                "language"  =>  "it"
            ]);
            if( strlen($query) > 2 ){
                if( array_key_exists(substr($query,0,2), self::$availableLanguages) ){
                    self::$currentLanguage = substr($query,0,2);
                    self::$staticTranslations = Config::getFile("translations-".self::$currentLanguage );
                    Response::addVariable([
                        "language"  =>  self::$currentLanguage
                    ],true);
                    $found = true;
                }
            }
            if( $found ){
                $query = substr($query,3);
                self::applicationInitFinish();
                return [$query];
            }
            return [$query];
        });


        Events::add(Events::ROUTER_GETROUTE,function($name){


            $r = isset(RouterService::$routes[$name]) ? RouterService::$routes[$name] : new Route("","",[]);

            if( MultilinguaApplication::$currentLanguage != "it" && self::$filtersOn ){
                if( !isset($r->internationalized) || !$r->internationalized ) {
                    $r->regex = "/" . self::$currentLanguage . $r->regex;
                    $r->internationalized = true;
                }
            }

            return [$r];
        });


        return parent::declareRoutes(); // TODO: Change the autogenerated stub
    }


    static function applicationInitFinish(){

        if( MultilinguaApplication::$currentLanguage != "it" && self::$filtersOn ) {
            $route = RouterService::$routes["frontend.ecommerce.carrello"];
            $route->regex = "/cart";

            $route = RouterService::$routes["frontend.ecommerce.checkout.spedizione"];
            $route->regex = "/checkout/shipping";
            $route = RouterService::$routes["frontend.ecommerce.checkout.spedizione.save"];
            $route->regex = "/checkout/shipping";

            $route = RouterService::$routes["frontend.ecommerce.checkout.spedizione.metodo"];
            $route->regex = "/checkout/shipping/method";
            $route = RouterService::$routes["frontend.ecommerce.checkout.spedizione.metodo.save"];
            $route->regex = "/checkout/shipping/method";

            $route = RouterService::$routes["frontend.ecommerce.checkout.pagamento"];
            $route->regex = "/checkout/payment";
            $route = RouterService::$routes["frontend.ecommerce.checkout.charge"];
            $route->regex = "/checkout/charge";

        }
    }

}