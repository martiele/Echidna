<?php

namespace applications\pages;

use applications\main\widgets\WidgetCard;
use applications\meta\entities\Meta;
use applications\meta\MetaBackend;
use applications\pages\entities\Contenuto;
use applications\pages\entities\Pagina;
use applications\pages\widgets\WidgetPageNumber;
use core\abstracts\Application;
use core\abstracts\BackendApplication;
use core\Cache;
use core\Environment;
use core\Route;
use core\services\Db;
use core\services\Response;

class PagesBackend extends BackendApplication{
    static function declareWidgets()
    {
        return[
            WidgetPageNumber::class
        ];
    }


    static function getApplication()
    {
        return PagesApplication::class;
    }

    static function declareRoutes()
    {
        $routes = parent::declareRoutes(); // TODO: Change the autogenerated stub
        $routes['pages.content'] =  new Route("pages.content",Pagina::getModLink()."/contenuti",[self::class,"actionContenutiPagina"]);
        $routes['pages.content.order']  =   (new Route("pages.content.order","content/order",[self::class,"actionContentOrder"]))->method(Route::METHOD_POST);

        $routes['pages.content.getstructuer']  =   (new Route("pages.content.getstructuer","content/getstructure/{type:(.*)}",[self::class,"actionContentGetStructure"]));


        return $routes;
    }

    static function actionContentGetStructure( $params = [] ){

        Contenuto::getContentTypes()[$params['type']]->renderForm();

        exit;

        return ["pages/templates/form-content",[
            "data"  =>  Contenuto::getContentTypes()[$params['type']]
        ]];
    }


    static function actionContentOrder( $get = [],$post){

        $smtp = null;
        foreach ($post as $key => $item) {
            $smtp = Db::$connection->prepareWithValues('UPDATE contenuto set ordine = :ordine WHERE id= :id',
                [
                    "ordine"    =>  $key,
                    "id"        =>  $item
                ]);
            $smtp->execute();
        }


        Cache::clear(Contenuto::class);


        exit;
        return ["","data"=>true];
    }

    static function actionContenutiPagina( $params ){

        $mod = parent::actionMod($params); // TODO: Change the autogenerated stub
        $contenuti = $mod[1]['data']->getContents();

        return[
            "pages/templates/contents",[
                "template_extend"   =>  "empty.twig",
                "data"              =>  $contenuti

            ]
        ];

    }

    static function actionAdd( $params =[] ){



        $entity = static::getEntityClass();
        $e = new $entity($params);
        $fields = static::generateFields($entity, $e );

        return [
            "mod",[
                "title" =>  "Modifica",
                "data"  =>  $e ,
                "fields"    =>  $fields
            ]
        ];

    }


    static function actionMod($params = [])
    {



       /* $file = "main.less";
        \Less_Autoloader::register();


        $c = file_get_contents(Environment::$ROOT."/assets/css/".$file);

        $c = "#list-card-content .anteprima { " .$c." }";
        $parser = new \Less_Parser();
        $parser->SetImportDirs([
            Environment::$ROOT."/assets/css"   =>  "css",
            Environment::$ROOT."/assets/css/less"   =>  "less"
        ]);
        $parser->ModifyVars( array('url'=>'/') );
        $parser->parse($c);


        $css = $parser->getCss();*/
       $css ="";



        $mod = parent::actionMod($params); // TODO: Change the autogenerated stub


        $mod[1]['template_extend']  =   "empty.twig";
        $e = Response::getTemplateToUse($mod[0],$mod[1])->render();




        $meta = Meta::query()->where('entity="Pagina"')->where("entity_id=".$mod[1]["data"]->id)->getOne();
        $contenuti = $mod[1]['data']->getContents();


        if(!$meta){
            $meta = new Meta([
                "entity"    =>  Pagina::getEntityName(),
                "entity_id" =>  $mod[1]['data']->id
            ]);
        }
        $metaform = Response::getTemplateToUse("mod",[
            "template_extend"   =>  "empty.twig",
            "data"      =>  $meta,
            "fields"    =>  self::generateFields(Meta::class,$meta)
        ])->render();

        $contentform = Response::getTemplateToUse("pages/templates/contents",[
            "template_extend"   =>  "empty.twig",
            "data"      =>  $contenuti,
            "contentTypes"  =>   Contenuto::getContentTypes()

        ])->render();


/*        $contenuti = Contenuto::query()
            ->where(Contenuto::PAGINE_ID ."=".$mod[1]['data']->getId())
            ->getAll();
*/

        $contentTypes = Contenuto::getContentTypes();

        Response::addVariable([
            "additional_css"    =>  $css
        ]);


        return [
            'tabs',[
                "tabs"  =>  [
                    "pagina"    =>  [
                        "label" =>  "Pro    prietÃ  pagina",
                        "content"   => $e
                    ],
                    "meta"    =>  [
                        "label" =>  "Meta",
                        "content"   => $metaform
                    ],
                    "contenuti"    =>  [
                        "label" =>  "Contenuti",
                        "content"   => $contentform
                    ]
                ],

            ]
        ];
    }

    static function getTitle($method = "")
    {
        return "Gestione pagine";
    }

    static function getIcon($method = "")
    {
        return "file-empty";
    }

    static function getDescription($method = "")
    {
        return "Gestisci le pagine del sito. Aggiungi pagine scegliendo un layout e inserisci i contenuti";
    }


}