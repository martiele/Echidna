<?php
namespace applications\ecommerce\gateway;


class Stripe extends Gateway {

    public $secret_key = "sk_test_qZetIRLOLfQPfDxBHAKBnK4f";
    public $publishable_key = "pk_test_dd2F4UToQQ3EGiAix7Eollue";


    public function __construct($cliente=null,$carrello=null)
    {
        parent::__construct($cliente,$carrello);

        \Stripe\Stripe::setApiKey($this->secret_key);

        /*$this->gateway = new \Braintree_Gateway([
            'environment' => 'sandbox',
            'merchantId' => $this->merchant_id,
            'publicKey' => $this->public_key,
            'privateKey' => $this->private_key
        ]);*/
    }

    static function getType()
    {
        return "stripe";
    }

    public function transaction($amount, $nonce){

        $customer = \Stripe\Customer::create(array(
            'email' => $this->cliente->email,
            'source'  => $nonce
        ));


        $charge = \Stripe\Charge::create(array(
            'customer' => $customer->id,
            'amount'   => $amount,
            'currency' => 'eur'
        ));



        return $charge;
    }

    protected function _saveOrder()
    {


        $result = $this->transaction($this->ordine->totale, $this->data['stripeToken']);


        if (isset($result->id) ) {



            $this->ordine->id_transaction = $result->id;


            return parent::_saveOrder(); // TODO: Change the autogenerated stub
        } else {
            return null;
        }


    }




}