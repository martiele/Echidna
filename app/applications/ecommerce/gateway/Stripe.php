<?php
namespace applications\ecommerce\gateway;


use applications\ecommerce\entities\ChargeError;
use Stripe\Error\Api;
use Stripe\Error\Authentication;
use Stripe\Error\Card;
use Stripe\Error\InvalidRequest;
use Stripe\Error\Permission;
use Stripe\Error\RateLimit;

class Stripe extends Gateway {

    //Sandbox
    public $secret_key = "";
    public $publishable_key = "";

    public function __construct($cliente=null,$carrello=null,$id_gateway=null,$metodo_pagamento = null)
    {

        if( !empty($metodo_pagamento) ){
            $this->secret_key = $metodo_pagamento->secret_key;
            $this->publishable_key = $metodo_pagamento->publishable_key;
        }

        parent::__construct($cliente,$carrello,$id_gateway,$metodo_pagamento);

        \Stripe\Stripe::setApiKey($this->secret_key);

        /*$this->gateway = new \Braintree_Gateway([
            'environment' => 'sandbox',
            'merchantId' => $this->merchant_id,
            'publicKey' => $this->public_key,
            'privateKey' => $this->private_key
        ]);*/
    }

    static function getType()
    {
        return "stripe";
    }

    public function transaction($amount, $nonce){



        $charge = null;

        try {
            $customer = \Stripe\Customer::create(array(
                'email' => $this->cliente->email,
                'source'  => $nonce
            ));

            $charge = \Stripe\Charge::create(array(
                'customer' => $customer->id,
                'amount' => $amount * 100,
                'currency' => 'eur'
            ));
        }catch (Authentication $autError){
            echo "Error authentication";
        } catch ( Card $carderror){
            echo "Card error";
            return new ChargeError($carderror->getMessage(),$carderror,$this->ordine);

            exit;
        } catch ( Permission $permissionError) {
            echo "Permission error";
        } catch ( RateLimit $rateLimit){
            echo "Rate Limit";
        }catch (InvalidRequest $invalidRequest) {
            echo "Invalid request";
        } catch (Api $error){
            echo "generic stripe error";
        }



        return $charge;
    }

    protected function _saveOrder()
    {


        $result = $this->transaction($this->ordine->totale, $this->data['stripeToken']);


        if (isset($result->id) ) {
            $this->ordine->id_transaction = $result->id;
            $this->pagamentoid_transaction = $result->id;
            return parent::_saveOrder(); // TODO: Change the autogenerated stub
        } else {
            return $result;
        }


    }




}