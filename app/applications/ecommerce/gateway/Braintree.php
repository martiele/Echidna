<?php
namespace applications\ecommerce\gateway;


use applications\ecommerce\entities\Cliente;

class Braintree extends Gateway {

    public $merchant_id = "yourid";
    public $public_key = "yourkey";
    public $private_key = "yourkey";

    public $gateway = null;

    static function getType()
    {
        return "braintree";
    }


    public function __construct($cliente=null,$carrello=null,$id_gateway=null)
    {
        parent::__construct($cliente,$carrello,$id_gateway);

        $this->gateway = new \Braintree_Gateway([
            'environment' => 'sandbox',
            'merchantId' => $this->merchant_id,
            'publicKey' => $this->public_key,
            'privateKey' => $this->private_key
        ]);
    }

    /**
     * @param $cliente Cliente
     * @return string
     */
    public function generateToken( $cliente ){


        if( empty($cliente->id_braintree)) {
            $result = $this->gateway->customer()->create([
                'firstName' => $cliente->nome,
                'lastName' => $cliente->cognome,
                'company' => "",
                'email' => $cliente->email
            ]);

            if ($result->success) {
                $cliente->id_braintree = $result->customer->id;
                $cliente->save();
            }
        }

        return $this->gateway->clientToken()->generate([
            "customerId" => $cliente->id_braintree
        ]);
    }


    public function transaction($amount, $nonce){
        $result = $this->gateway->transaction()->sale([
            'amount' => $amount * 100,
            'paymentMethodNonce' => $nonce,
            'options' => [
                'submitForSettlement' => true
            ]
        ]);

        return $result;
    }

    protected function _saveOrder()
    {


        $result = $this->transaction($this->ordine->totale, $this->data['payment_method_nonce']);

        if ($result->success) {
            // pagamento effettuato
            $transaction = $result->transaction;

            $this->ordine->id_transaction = $transaction->id;
            $this->pagamento->id_transaction = $transaction->id;


            return parent::_saveOrder(); // TODO: Change the autogenerated stub
        } else {
            return null;
        }


    }


}