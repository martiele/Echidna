<?php
namespace applications\ecommerce\entities;

use applications\ecommerce\EcommerceFrontend;
use core\db\Field;
use core\Events;
use core\Model;

class LineItem extends Model {

    static function useCache()
    {
        return false;
    }

    static function schema()
    {
        return array_merge([

            "id"    =>  Field::primaryIndex(),
            "id_carrello"    =>  Field::int()->inlist(false)->index(),
            "id_variant"    =>  Field::int()->inlist(false)->index(),
            "quantity"      =>  Field::int()->inlist(false),

            "prodotto"  =>  Field::reference()->inlist(true)
        ],parent::schema()); // TODO: Change the autogenerated stub
    }
    function displayValue($key)
    {
        switch ($key){
            case "prodotto":
                $variant = Variante::findById($this->id_variant);
                return $variant->getProduct()->nome;

                break;
        }
        
        return parent::displayValue($key); // TODO: Change the autogenerated stub
    }

    static function getTable()
    {
        return "ecommerce_carrello_lineitem"; // TODO: Change the autogenerated stub
    }

    public $variant = null;
    public $id_variant;
    public $quantity = 0;
    public $cart = null;
    public $single_price;
    public $price_total = 0;

    public $attributi = [];



    static function getInstance($data)
    {

        $inst = parent::getInstance($data);
        $inst->variant = Variante::findById($inst->id_variant);
        $meta = LineItemMeta::findById_lineitem($inst->id);


        $inst->meta = [];
        foreach ($meta as $key=>$value){
            $inst->meta[$value->meta_key] = $value->meta_value;
        }


        return $inst;
    }

    /**
     * LineItem constructor.
     * @param null $variant_id
     * @param int $quantity
     */
    public function __construct($variant_id, $quantity = null)
    {


        if( $quantity == null && is_array($variant_id)){
            parent::__construct($variant_id);
        }else {

            $this->id_variant = $variant_id;
            $this->quantity = $quantity;
        }
        $this->updateProperties();
    }

    public function updateProperties( $cart = null ){



        $this->cart = $cart;
        $this->variant = Variante::findById($this->id_variant);




        if( $this->variant) {
            $this->single_price = $this->variant->calculatePrice()->real_price;





            $this->meta_total_price = 0;

          //  if(!empty($this->id))
            //$this->meta_total_price = LineItemMeta::query(true)->setFields("SUM(price) as totale")->where("id_lineitem=".$this->id)->getOne()->totale;
            $this->meta_total_price=0;
            if(!empty($this->meta)){
                foreach ($this->meta as $key=>$value){
                    $this->meta_total_price += Events::dispatch(EcommerceFrontend::EVENT_LINEITEM_META_PRICE,$key,$value,0,$this)[2];
                }
            }

            $this->raw_price_total = $this->single_price * $this->quantity ;


            $this->price_total = $this->raw_price_total + $this->meta_total_price;



            $this->prodotto = Prodotto::query(true)->where("id=".$this->variant->id_prodotto)->getOne();

            $this->prodotto->expandSchema();

            return $this;
        }else{
           $this->remove();
        }

    }

    public function remove(){

        $key = array_search($this,$this->cart->lineitems);

        unset($this->cart->lineitems[$key]);
        $this->cart->lineitems = array_values($this->cart->lineitems);

        parent::remove();
    }


    public function additionalAttributes( $attributes = [] ){
        foreach ($attributes as $key=>$value){
            $a = Attributo::findById($key);
            $v = AttributoValore::findById($value);
            $a->valore = $v;
            $this->attributi[] = $a;
        }
    }

    public function addMeta($key,$value,$priceDelta = 0){

        //$priceDelta = Events::dispatch(EcommerceFrontend::EVENT_LINEITEM_META_PRICE,$key,$value,$priceDelta,$this)[2];


        if($l = LineItemMeta::query()
        ->where("id_lineitem=".$this->id)
        ->where('meta_key="'.$key.'"')->getOne()){
            $l->meta_value = $value;
            $l->price = $priceDelta;
            $l->save();


        }else{
            $l = new LineItemMeta([
                "id_lineitem"=>$this->id,
                "meta_key"   =>  $key,
                "meta_value" =>  $value,
                "price" =>  $priceDelta
            ]);
            $l->save();
        }
    }

}