<?php

namespace applications\ecommerce\entities;


use applications\media\entities\AttachmentTag;
use applications\media\entities\AttachmentText;
use core\db\Field;
use core\Model;
use core\services\Db;

class Prodotto extends Model{
    const VISUALIZZAZIONE_SEMPLICE = 0;
    const VISUALIZZAZIONE_COMPLESSA = 1;

    static function getTable()
    {
        return "ecommerce_prodotto";
    }

    static function schema()
    {
        return array_merge(parent::schema(), [
            "id"    =>  Field::primaryIndex(),
            "nome"  =>  Field::varchar(256)->editable()->setHint("Nome prodotto"),
            "slug"  =>  Field::varchar(64)->editable()->setTemplate("slug")->setTemplateVar("nome")->setHint("Rappresentazione in url del prodotto ( si consiglia di utilizzare solamanete caratteri minuscoli, numeri e -)")->index(),
            "sku"  =>  Field::varchar(512)->editable()->setHint("Codice identificativo del prodotto")->index(),
            "descrizione"   =>  Field::text()->editable()->setTemplate("tinymce"),
            "id_ecommerce_tipologia_prodotto"   =>  Field::int()->editable(true)->setTemplate("select")->setTemplateVar(\applications\ecommerce\TipologiaProdotto::getForSelect())->setLabel("Famiglia prodotto"),
            "visualizzazione"   =>  Field::int()->editable()->setDefault(0)->setTemplate("select")->setTemplateVar([
                [
                    "label" => "Semplice",
                    "value" =>  self::VISUALIZZAZIONE_SEMPLICE
                ],
                [
                    "label" => "Complessa",
                    "value" =>  self::VISUALIZZAZIONE_COMPLESSA
                ]
            ])->setHint("Scegli se visualizzare il prodotto in modalità semplice ( con singola variante ) o complessa ( con più varianti )"),
            "immagini"  =>  Field::entity(AttachmentText::class,2)->editable()->setTemplate("select-multiple-images")->setLabel("Galleria immagini"),
            "tag"  =>  Field::entity(AttachmentTag::class,2)->editable()->setTemplate("default")->setHint("Inserisci una serie di parole identificative del prodotto separate da punto e virgola (;)"),
            "prezzo"   =>  Field::float()->editable(),
            "prezzo_speciale"   =>  Field::float()->editable(),
            "_order"    =>  Field::int()->inlist(false)
        ]);
    }

    static function getInstance($data)
    {
        $instance = parent::getInstance($data); // TODO: Change the autogenerated stub
        $instance->expand();

        /*

        if(!$instance->id_ecommerce_tipologia_prodotto) return $instance;
        $instance->tipologia = TipologiaProdotto::findById($instance->id_ecommerce_tipologia_prodotto);

        $instance->tipologia->getFields();




        $sql = "SELECT * FROM ecommerce_prodotto_campi WHERE id_ecommerce_prodotto=:id";

        $r = Db::$connection->fetchAll($sql,[
            "id"    =>  $instance->id
        ]);

        $instance->valoriCampi = [];
        foreach ($r as $item){
            $instance->valoriCampi[$item['slug']] = $item;
        }

        $instance->varianti = $instance->getVariants();
        $instance->images = $instance->getImages();

        $instance->categories = $instance->getCategories();
         */



        return $instance;
    }


    public function expand(){

        parent::expand();

        $this->tipologia = TipologiaProdotto::findById($this->id_ecommerce_tipologia_prodotto);
        $this->tipologia->getFields();



        $this->expandFields();
        $this->getVariants();
        $this->images = $this->getImages();
        $this->getCategories();
    }

    public function getCategories(){
        $r = [];
        $cps = CategoriaProdotto::findById_prodotto($this->id);
        if( count($cps) > 0 ){
            foreach ($cps as $value) {
                $c = $value->getCategory();
                if( $c ){
                    $r[ $c->slug ] = $c;
                }

            }
        }
        $this->categories = $r;
        return $r;
    }

    public function expandFields(){
        $r = ProdottoCampo::query()->where("id_ecommerce_prodotto=".$this->id)->getAll();
        /*$sql = "SELECT * FROM ecommerce_prodotto_campi WHERE id_ecommerce_prodotto=:id";
        $r = Db::$connection->fetchAll($sql,[
            "id"    =>  $this->id
        ]);*/
        $this->valoriCampi = [];
        foreach ($r as $item){
            $this->valoriCampi[$item['slug']] = $item;
        }
    }

    public function getDefaultVariant(){
        $variante = null;
         if(!$variante = Variante::query()->where("id_prodotto=".$this->id)->where("primaria=1")->getOne()){
             $variante = Variante::query()->where("id_prodotto=".$this->id)->setLimit(1)->getOne();
         }
         return $variante;
    }
    public function getVariants(){
        $variantePrimaria = false;

        $varianti = Variante::findById_prodotto($this->id);




        if(empty($varianti)){
            $this->varianti = [];
            return [];
        }
        foreach ($varianti as $key=>$value){
            $value->expand();
            if($value->primaria == 1){
                $variantePrimaria = true;
                $this->variantePrimaria = $value;
            }
        }

        if( !$variantePrimaria ){
            $this->variantePrimaria = $varianti[0];
        }
        $this->varianti = $varianti;
        return $varianti;
    }

    /**
     * @deprecated
     */
    public function getImages(){
        return null;
        /*
        $sql =  "SELECT * FROM ecommerce_prodotto_immagine WHERE id_prodotto=:id_prodotto";

        return Db::$connection->fetchAll($sql,[
            "id_prodotto"   =>  $this->id
        ]);*/
    }

    /**
     * @return TipologiaProdotto
     */
    public function getTipologia(){
        if( !empty($this->id_ecommerce_tipologia_prodotto ) ){
            return TipologiaProdotto::findById($this->id_ecommerce_tipologia_prodotto);
        }
    }
}