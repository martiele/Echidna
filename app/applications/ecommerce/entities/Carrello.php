<?php
namespace applications\ecommerce\entities;

use applications\ecommerce\EcommerceFrontend;
use applications\ecommerce\RegoleCarrello;
use core\db\Field;
use core\Model;
use core\services\Response;
use core\services\SessionService;

class Carrello extends Model {
    static function schema()
    {
        return array_merge([
            "id"        =>  Field::primaryIndex(),
            "user_id"   =>  Field::int(),
            "sid"       =>  Field::varchar(256)->index(),
            "order_id"  =>  Field::int()->index(),
            "updated"   => Field::datetime()->setDefault("CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP"),
            "stato"    =>  Field::varchar(128)->setDefault('"cart"')->setTemplate("select")->setTemplateVar([
                ["label"    =>  "Carrello","value"  =>'cart'],
                ["label"    =>  "Chiuso, diventato ordine","value"  =>  "order"]
            ]),
            "coupon_id"    =>   Field::int()->index()

        ],parent::schema()); // TODO: Change the autogenerated stub
    }

    static function getTable()
    {
        return "ecommerce_carrello"; // TODO: Change the autogenerated stub
    }

    const SESSION_NAME = "ecommerce.carrello";


    public $sid;

    public $lineitems = [];
    public $cliente = null;

    public $subtotale = 0;
    public $totale = 0;
    public $spedizione = 0;

    public $metodiDiSpedizione = null;
    public $indirizzoSpedizione = null;

    public $coupon;
    public $scontoCoupon = 0;
    public $totaleSconto = 0;

    public $metodoDiSpedizione = null;

    public $pesoTotale = 0;

    public $extra = 0;


    public $promoApplied = [];
    public $promoNear = [];



    static function useCache()
    {
        return false;
    }


    public function buildCartFromDb(){
        $this->lineitems = LineItem::findById_carrello($this->id);
        if(!empty($this->coupon_id) ){
            $this->coupon = Coupon::findById($this->coupon_id);
        }
        $this->updateProperties();
    }
    static function get(){

        if( !empty(Response::$response['carrello']) ){
            return Response::$response['carrello'];
        }

        $sid = SessionService::get( Carrello::SESSION_NAME );



        if( $carrello = Carrello::query()->where('sid="'.$sid.'"')->where('stato="cart"')->getOne() ) {


            if( $cliente = SessionService::get(EcommerceFrontend::SESSION_USER_LOGGED) ){
                $carrello->user_id = $cliente->id;
            }
            $carrello->lineitems = LineItem::findById_carrello($carrello->id);
            if(!empty($carrello->coupon_id) ){
                $carrello->coupon = Coupon::findById($carrello->coupon_id);
            }
            $carrello->updateProperties();



            return $carrello;
        }else{



            if( $cliente = SessionService::get(EcommerceFrontend::SESSION_USER_LOGGED) ){


                $carrello = Carrello::query()
                    ->where("user_id=".$cliente->id)
                    ->where('stato="cart"')
                    ->getOne();

                if($carrello){
                    $carrello->lineitems = LineItem::findById_carrello($carrello->id);
                    $carrello->updateProperties();
                    return $carrello;
                }
            }

            $carrello =  new self([
                "sid"   =>  md5(time())
            ]);
            if($carrello->cliente == null && SessionService::get(EcommerceFrontend::SESSION_USER_LOGGED)){
                $carrello->cliente = SessionService::get(EcommerceFrontend::SESSION_USER_LOGGED);
            }

            $carrello->save();
            return $carrello;
        }
    }

    public function createLineItem( $id_variant, $quantity, $stack=true){
        $this->add(new LineItem($id_variant,$quantity),$stack);
        return $this;
    }

    public function removeByVariant($id){


        if( count($this->lineitems) > 0){

            foreach ($this->lineitems as $key => $li) {



                if($li->variant->id == $id){


                    $this->lineitems[$key]->remove();
                    unset($this->lineitems[$key]);
                    break;
                }
            }
        }


        $this->save();
    }

    public function removeByVariantSku( $sku ){


        if( count($this->lineitems) > 0){
            foreach ($this->lineitems as $key => $li) {
                if($li->variant->sku == $sku){
                    $this->lineitems[$key]->remove();
                    unset($this->lineitems[$key]);
                    break;
                }
            }
        }


        $this->save();
    }
    public function add( $lineitem , $stack=true ){



        $found =false;
        if($stack) {
            if (count($this->lineitems) > 0) {
                foreach ($this->lineitems as $li) {
                    if ($li->variant->id == $lineitem->variant->id) {
                        $found = true;
                        $li->quantity += $lineitem->quantity;
                        break;
                    }
                }
            }
        }
        if(!$found)
            $this->lineitems[] = $lineitem;

        $this->updateProperties();
        $this->save();
        return $this;
    }

    public function updateProperties(){



        if( !empty($this->user_id) ){
            $this->cliente = Cliente::findById($this->user_id);
        }

        if(count($this->lineitems)>0){
            foreach ($this->lineitems as $value){
                $value->updateProperties( $this );

                $this->pesoTotale += (int)$value->variant->peso * (int)$value->quantity;
            }
        }



        if( $this->cliente != null ){


            $spedizioniCliente = ClienteSpedizione::findById_cliente( $this->cliente->id);





            if( count($spedizioniCliente) > 0 ) {
                $indirizzoSpedizione = $spedizioniCliente[0];
                $this->indirizzoSpedizione = $indirizzoSpedizione;


                $this->metodiDiSpedizione = $this->findAvailableShippingTypes($indirizzoSpedizione);




                if (count($this->metodiDiSpedizione) == 0) {
                    $this->setMetodoSpedizione(null);
                } else if (count($this->metodiDiSpedizione) == 1) {
                    $this->setMetodoSpedizione($this->metodiDiSpedizione[0]);
                } else {


                    //$this->setMetodoSpedizione(null);
                }
            }
        }


        $regoleCarrello = RegolaCarrello::query()->getAll();

        if(!empty($regoleCarrello)){
            foreach ($regoleCarrello as $regola){
                $regola->apply($this);
            }
        }

        $this->pesoTotale = 0;
        $this->totaleSconto = 0;
        $this->promoNear = [];
        $this->promoApplied=[];
        // calcolo totali
        $totale = 0;
        foreach ($this->lineitems as $lineitem) {
            $totale += $lineitem->price_total;
        }
        $this->subtotale = $totale;




        if( !empty($this->metodoDiSpedizione ) ){
            $totale += $this->metodoDiSpedizione->prezzo;
            $this->spedizione = $this->metodoDiSpedizione->prezzo;
        }


        $this->totale += $this->extra;




        $promodisponibili = PromoCarrello::findActive();

        if( !empty($promodisponibili )) {
            foreach ($promodisponibili as $promo){
                $next = $promo->apply($this);
                if( !$next ) break;
            }
        }




        if($this->coupon){
            if($this->coupon->canAddToCart()) {
                $this->scontoCoupon  = $this->coupon->calcolaSconto($totale);
                $this->totaleSconto += $this->scontoCoupon;

            }else{
                $this->coupon=null;
            }
        }


        $totale -= $this->totaleSconto;

        if( $totale < 0 ) $totale = 0;
        $this->totale = $totale;




    }

    public function findAvailableShippingTypes( $indirizzoSpedizione ){

        if($indirizzoSpedizione == null) return [];

        $zona=null;

        if($indirizzoSpedizione->id_provincia) {
            $provincia = Provincia::findById($indirizzoSpedizione->id_provincia);

            if (empty($provincia->id_zone)) return [];

            $zona = \applications\ecommerce\entities\Zona::findById($provincia->id_zone);



        }else{
            $zona = \applications\ecommerce\entities\Zona::findById($indirizzoSpedizione->id_zona);
        }


        $spedizioniZone = Spedizione::findById_zona($zona->id);

        $spedizioniDisponibili = [];
        foreach ($spedizioniZone as $value){
            $query = SpedizionePrezzo::query();

            $prezziDisponibili = $query
                ->where("id_ecommerce_spedizione = ".$value->id)
                ->where("(min < ".$this->pesoTotale." OR min is NULL)")
                ->where("(max >= ".$this->pesoTotale." OR max is NULL)")
                ->getAll();

            if( count($prezziDisponibili) > 0 ){
                $value->setPrezzo($prezziDisponibili[0]);
                $spedizioniDisponibili [] = $value;
            }
        }



        return $spedizioniDisponibili;
        return Spedizione::findById_zona($zona->id);
    }

    /**
     * @deprecated
     * @param $indirizzoSpedizione
     * @return array
     */
    public function _findAvailableShippingTypes( $indirizzoSpedizione ){

        if($indirizzoSpedizione == null) return [];


        $provincia = Provincia::findById($indirizzoSpedizione->id_provincia);
        $zona = \applications\ecommerce\entities\Zona::findById($provincia->id_zone);

        $spedizioniZone = Spedizione::findById_zona($zona->id);

        $spedizioniDisponibili = [];



        foreach ($spedizioniZone as $value){
            $query = SpedizionePrezzo::query();

            $prezziDisponibili = $query
                ->where("id_ecommerce_spedizione = ".$value->id)
                ->where("(min < ".$this->pesoTotale." OR min is NULL)")
                ->where("(max >= ".$this->pesoTotale." OR max is NULL)")
                ->getAll();


            if( count($prezziDisponibili) > 0 ){
                $value->setPrezzo($prezziDisponibili[0]);
                $spedizioniDisponibili [] = $value;
            }
        }



        return $spedizioniDisponibili;
        return Spedizione::findById_zona($zona->id);
    }
    public function setMetodoSpedizione( $metodo ){
        $this->metodoDiSpedizione = $metodo;

    }
    public function save(){

        parent::save();
        SessionService::set(Carrello::SESSION_NAME,$this->sid);

        foreach ($this->lineitems as $key=>$value){
            $value->id_carrello = $this->id;
            $value->save();
        }


    }

    public function getTotal(){
        $this->updateProperties();

        return $this->totale;
    }

    public function setCliente( $cliente ){
        $this->cliente = $cliente;
        $this->user_id = $cliente->id;
        $this->save();
    }

    public function printTotale(){
        return Response::formatPrice( $this->totale );
    }
    public function printSubtotale(){
        return Response::formatPrice( $this->subtotale );
    }
    public function printSpedizione(){
        return Response::formatPrice( $this->spedizione );
    }

    /**
     * @param $c Coupon
     */
    public function addCoupon( $c ){


        if($c->canAddToCart()) {
            if ($c) {
                $this->coupon = $c;
                $this->coupon_id = $c->id;

                $this->save();
                return true;
            }
        }
        return false;
    }
    public function rimuoviCoupon( ){
        $this->coupon = null;
        $this->coupon_id = "";
        $this->save();
    }

}