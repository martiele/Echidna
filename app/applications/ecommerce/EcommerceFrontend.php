<?php
namespace applications\ecommerce;

use applications\ecommerce\entities\Carrello;
use applications\ecommerce\entities\Categoria;
use applications\ecommerce\entities\ChargeError;
use applications\ecommerce\entities\Cliente;
use applications\ecommerce\entities\ClienteFatturazione;
use applications\ecommerce\entities\ClienteSpedizione;
use applications\ecommerce\entities\Coupon;
use applications\ecommerce\entities\LineItem;
use applications\ecommerce\entities\MetodoPagamento;
use applications\ecommerce\entities\Ordine;
use applications\ecommerce\entities\Prodotto;
use applications\ecommerce\entities\Provincia;
use applications\ecommerce\entities\Spedizione;
use applications\ecommerce\entities\Variante;
use applications\ecommerce\gateway\Braintree;
use applications\ecommerce\gateway\Contrassegno;
use applications\ecommerce\gateway\Paypal;
use applications\ecommerce\gateway\Stripe;
use applications\login\LoginApplication;
use applications\main\entities\Notification;
use applications\meta\entities\Meta;
use applications\settings\entities\Setting;
use Aura\Sql\Exception;
use core\Config;
use core\Email;
use core\Events;
use core\Route;
use core\RouteFilter;
use core\services\Db;
use core\services\EmailService;
use core\services\Request;
use core\services\Response;
use core\services\RouterService;
use core\services\SessionService;
use frontend\spagnesi\applications\ecommerce\EcommerceSpagnesiFrontend;
use function MongoDB\BSON\fromJSON;
use Postmark\PostmarkClient;

class EcommerceFrontend extends \core\abstracts\FrontendApplication
    {


        const EVENT_AGGIUNTO_AL_CARRELLO = "events.ecommerce.carrello.aggiunto";
        const EVENT_LINEITEM_META_PRICE = "events.ecommerce.lineite.meta.price";



        const SESSION_USER_LOGGED = "ecommerce.userlogged";

        const ROUTE_SHOP = "ecommerce.shop";
        const ROUTE_CARRELLO = "frontend.ecommerce.carrello";
        const ROUTE_CHECKOUT = "frontend.ecommerce.checkout";
        const ROUTE_LOGIN = "frontend.ecommerce.checkout.login";
        const ROUTE_LOGIN_SIMPLE = "frontend.ecommerce.checkout.login.simple";
        const ROUTE_LOGOUT = "frontend.ecommerce.user.account.logout";
        const ROUTE_REGISTRAZIONE = "frontend.ecommerce.checkout.registrazione";
        const ROUTE_REGISTRAZIONE_SAVE = "frontend.ecommerce.checkout.registrazione.save";


        const ROUTE_SPEDIZIONE = "frontend.ecommerce.checkout.spedizione";
        const ROUTE_SPEDIZIONE_SAVE = "frontend.ecommerce.checkout.spedizione.save";

        const ROUTE_METODO_SPEDIZIONE = "frontend.ecommerce.checkout.spedizione.metodo";
        const ROUTE_METODO_SPEDIZIONE_SAVE = "frontend.ecommerce.checkout.spedizione.metodo.save";


        const ROUTE_RICERCA = "frontend.ecommerce.ricerca";



    static function init()
    {

        parent::init(); // TODO: Change the autogenerated stub
    }


    static function declareRoutes()
    {

        $shopBaseUrl = Setting::getValueOf("ecommerce_shop_base_url","/shop");
        RouterService::addFilter(
            (new RouteFilter())->setName("filter.frontend.ecommerce.login")->setRegex("/checkout/{a:(.*)}")->setCallback([self::class,"loginEcommerceFilter"])
        );

        RouterService::addFilter(
            (new RouteFilter())->setName("filter.frontend.ecommerce.variables")->setRegex("/{a:(.*)}")->setCallback([self::class,"loginEcommerceFilterVariables"])
        );




            return [
                //self::ROUTE_SHOP=>  new Route(self::ROUTE_SHOP,"/shop",[self::class,"_shopHome"]),
                self::ROUTE_CARRELLO => new Route(self::ROUTE_CARRELLO, "/carrello", [self::class, "_carrello"]),
                self::ROUTE_CHECKOUT => new Route(self::ROUTE_CHECKOUT, "/checkout", [self::class, "_checkout"]),

            self::ROUTE_LOGIN    =>  (new Route(self::ROUTE_LOGIN,"/checkout/login",[self::class,"_login"]))->method(Route::METHOD_POST),
                self::ROUTE_LOGIN_SIMPLE    =>  (new Route(self::ROUTE_LOGIN_SIMPLE,"/user-account/login",[self::class,"_login"]))->method(Route::METHOD_GET),



                self::ROUTE_REGISTRAZIONE   =>  new Route("frontend.ecommerce.checkout.registrazione","/checkout/registrazione",[self::class,"_regitrazione"]),

            self::ROUTE_REGISTRAZIONE_SAVE  =>  (new Route( "frontend.ecommerce.checkout.registrazione.save" ,"/checkout/registrazione",[self::class,"_regitrazione"]))->method(Route::METHOD_POST),

            self::ROUTE_SPEDIZIONE   =>  new Route(self::ROUTE_SPEDIZIONE,"/checkout/spedizione",[self::class,"_spedizione"]),
            self::ROUTE_SPEDIZIONE_SAVE  =>  (new Route( self::ROUTE_SPEDIZIONE_SAVE,"/checkout/spedizione",[self::class,"_spedizione"]))->method(Route::METHOD_POST),

            self::ROUTE_METODO_SPEDIZIONE   =>  new Route(self::ROUTE_SPEDIZIONE,"/checkout/spedizione/corriere",[self::class,"_metodoSpedizione"]),
            self::ROUTE_METODO_SPEDIZIONE_SAVE  =>  (new Route( self::ROUTE_SPEDIZIONE_SAVE,"/checkout/spedizione/corriere",[self::class,"_metodoSpedizione"]))->method(Route::METHOD_POST),

            "frontend.ecommerce.checkout.pagamento"   =>  new Route("frontend.ecommerce.checkout.pagamento","/checkout/pagamento",[self::class,"_pagamento"]),
            "frontend.ecommerce.checkout.charge"   =>  (new Route("frontend.ecommerce.checkout.charge","/checkout/piazza",[self::class,"_charge"]))->method(Route::METHOD_POST),

                "frontend.ecommerce.checkout.thankyou" => (new Route("frontend.ecommerce.checkout.thankyou", "/checkout/ordine-effettuato", [self::class, "_thankyou"])),


                "frontend.ecommerce.categoria" => new Route("frontend.ecommerce.categoria", $shopBaseUrl."/{slug:([0-9a-zA-Z-]*)}", [static::class, "_categoria"]),
                "frontend.ecommerce.subcategoria" => new Route("frontend.ecommerce.categoria", $shopBaseUrl."/{father:([0-9a-zA-Z-]*)}/{slug:([0-9a-zA-Z-]*)}", [static::class, "_categoria"]),

                "frontend.ecommerce.carrello.aggiungi" => (new Route("frontend.ecommerce.carrello.aggiungi", "/carrello/aggiungi", [static::class, "_carrelloAggiungi"]))->method(Route::METHOD_POST),
                "frontend.ecommerce.carrello.aggiungi.veloce" => (new Route("frontend.ecommerce.carrello.aggiungi", "/carrello/aggiungi/veloce/{id:([0-9]*)}", [static::class, "_carrelloAggiungiVeloce"])),
                "frontend.ecommerce.carrello.rimuovi" => (new Route("frontend.ecommerce.carrello.rimuovi", "/carrello/rimuovi/{id:([0-9]*)}", [static::class, "_carrelloRimuovi"])),
                "frontend.ecommerce.carrello.lineitem.update" => (new Route("frontend.ecommerce.carrello.lineitem.update", "/carrello/lineitem/{id:([0-9]*)}", [static::class, "_carrelloLineitemUpdate"]))->method(Route::METHOD_POST),

                "frontend.ecommerce.schedaprodotto.variante" => new Route("frontend.ecommerce.schedaprodotto.variante", "/{slug:([0-9a-zA-Z-]*)}/{slug-variante:([0-9a-zA-Z-]*)}", [self::class, "_schedaProdotto"]),

                "frontend.ecommerce.schedaprodotto" => new Route("frontend.ecommerce.schedaprodotto", "/{slug:([0-9a-zA-Z-]*)}", [static::class, "_schedaProdotto"]),

                "frontend.ecommerce.aggiungicoupon" => (new Route("frontend.ecommerce.aggiungicoupon", "/carrello/aggiungi-coupon", [static::class, "_aggiungiCoupon"]))->method(Route::METHOD_POST),
                "frontend.ecommerce.rimuovicoupon" => (new Route("frontend.ecommerce.rimuovicoupon", "/carrello/rimuovi-coupon", [static::class, "_rimuoviCoupon"]))->method(Route::METHOD_GET),
                self::ROUTE_RICERCA => new Route(self::ROUTE_RICERCA, "/shop/cerca", [self::class, "_ricerca"]),
                self::ROUTE_RICERCA."seconda" => new Route(self::ROUTE_RICERCA, "/shop/cerca/{ricerca:(.*)}", [self::class, "_ricerca"]),

                //user account
                "frontend.ecommerce.user.account" => new Route("", "/user-account", [static::class, "_userAccount"]),


                "frontend.ecommerce.user.account.ordini" => new Route("", "/user-account/ordini", [static::class, "_userAccountOrdini"]),
                "frontend.ecommerce.user.account.profilo" => new Route("", "/user-account/profilo", [static::class, "_userAccountProfilo"]),
                "frontend.ecommerce.user.account.profilo.save" => (new Route("", "/user-account/profilo", [static::class, "_userAccountProfilo"]))->method(Route::METHOD_POST),
                "frontend.ecommerce.user.account.spedizione" => new Route("", "/user-account/spedizione", [static::class, "_userAccountSpedizione"]),

            "frontend.ecommerce.user.account.cambiapassword"   =>  new Route("","/user-account/cambia-password",[static::class,"_cambiaPassword"]),
            "frontend.ecommerce.user.account.cambiapassword.save"   =>  (new Route("","/user-account/cambia-password",[static::class,"_cambiaPassword"]))->method(Route::METHOD_POST),


            "frontend.ecommerce.user.account.recuperapassword"   =>  new Route("","/user-account/recupera-password",[static::class,"_recuperaPassword"]),
            "frontend.ecommerce.user.account.recuperapassword.save"   =>  (new Route("","/user-account/recupera-password",[static::class,"_recuperaPassword"]))->method(Route::METHOD_POST),

            "frontend.ecommerce.user.account.resetpassword"   =>  new Route("","/user-account/reset-password",[static::class,"_resetPassword"]),

            "frontend.ecommerce.checkout.error.charge"   =>  new Route("","/checkout/errore-pagamento",[static::class,"_errorePagamento"]),

            self::ROUTE_LOGOUT    =>  (new Route("","/user-account/logout",[self::class,"_logout"])),
        ];


    }


        static function _carrelloLineitemUpdate( $params = [], $post = []){


            /**
             * @var $lineitem LineItem
             */
            $carrello = Carrello::get();
            $lineitem = LineItem::query()
                ->where("id=".$params['id'])
                ->where("id_carrello=".$carrello->id)->getOne();




            if($lineitem){

                $lineitem->buildProperties($post);

                if(!empty($post['attributi']) ) {
                    foreach ($post['attributi'] as $key => $value) {


                        $lineitem->addMeta($key, $value);
                    }
                }
                $lineitem->save();

            }




            if(isset($post['return_url'])){
                Response::go($post['return_url']);
            }


            exit;
        }

        static function _shopHome($params = [])
        {


            $prodotti = Prodotto::query()->getAll();

            $attributi = \applications\ecommerce\entities\Attributo::query()->getAll();

            Prodotto::expandArray($prodotti);
            $categories = Categoria::query()->getAll();
            return [
                "ecommerce/shophome",
                [
                    "categorie" => $categories,
                    "prodotti" => $prodotti,
                    "attributi" => $attributi
                ]
            ];
        }

    /**
     * @param $route Route
     * @return bool
     */
        static function loginEcommerceFilterVariables($route)
        {


            if(!$route->isBackend()) {


                Response::addVariable([
                    "carrello" => Carrello::get(),
                    "user" => SessionService::get(self::SESSION_USER_LOGGED)
                ], true);
            }
        return true;
    }


    static function getLoggedClient(){
        return SessionService::get(self::SESSION_USER_LOGGED);
    }
    static function loginEcommerceFilter( $route ){



        if( !SessionService::get(self::SESSION_USER_LOGGED) && $route->name!="pagina"){



            if(
                !in_array( $route->name,[
                    self::ROUTE_LOGIN,
                    self::ROUTE_LOGIN_SIMPLE,
                    self::ROUTE_REGISTRAZIONE,
                    self::ROUTE_REGISTRAZIONE_SAVE,
                    "frontend.ecommerce.user.account.recuperapassword"
                ])
            ) {
                RouterService::getRoute(self::ROUTE_CHECKOUT)->go();
            }


        }




        return true;
    }

    static function _cambiaPassword( $params = [],$data=[]){

        if( Request::isPost()){
            if( $data['nuova-password'] != $data['ripeti-password']){
                RouterService::getRoute("frontend.ecommerce.user.account.cambiapassword")->go([
                    "msg"   =>  "Le password inserite non coincidono"
                ]);
            }

            $user = SessionService::get(static::SESSION_USER_LOGGED);

            $vecchiapassword = LoginApplication::generateHash($data['vecchia-password']);
            if( $vecchiapassword == $user->password ){
                $nuovapassword = LoginApplication::generateHash($data['nuova-password']);
                $user->password = $nuovapassword;
                $user->save();
                SessionService::set(static::SESSION_USER_LOGGED,$user);


                RouterService::getRoute("frontend.ecommerce.user.account")->go([
                    "msg"   => "La password è stata cambiata"
                ]);
            }else{
                RouterService::getRoute("frontend.ecommerce.user.account.cambiapassword")->go([
                    "msg"   =>  "Devi inserire la tua password corrente per poterla cambiare"
                ]);
            }
        }
        return [
            "ecommerce/user-account/cambiapassword",[]
        ];
        exit;
    }


    static function _resetPassword( $params = [] ){


        $cliente = Cliente::query()->where('token="'.$params['token'].'"')->getOne();


        $nuovapassowrd = substr(md5(uniqid(mt_rand(), true)), 0, 8);

        $cliente->password = LoginApplication::generateHash( $nuovapassowrd );
        $cliente->save();

        $email = new Email();
        $email->from= "info";
        $email->to= $cliente->email;
        $email->template = "invia-nuova-password";
        $email->subject ="Reset password";
        $email->setData([
            "password"   =>  $nuovapassowrd,
            "cliente"   =>  $cliente
        ]);

        $email->send();
        RouterService::getRoute(self::ROUTE_CHECKOUT)->go([
            "msg"   =>  "Abbiamo generato una nuova password che ti è stata inviata per email"
        ]);

        exit;
    }
    static function _recuperaPassword( $params = [] ,$data = [] ){
        if( Request::isPost()){

            $email = new Email();
            $email->from= "info";
            $email->to= $data['email'];
            $email->template = "recupera-password";
            $email->subject ="Recupera password";

            $cliente = Cliente::query()->where('email="'.$data['email'].'"')->getOne();
            if(!$cliente){
                return false;
            }

            $token = md5(time());
            $cliente->token = $token;
            $cliente->save();


            $url =Response::$response['host'] .  RouterService::getRoute("frontend.ecommerce.user.account.resetpassword")->build([
                "token" =>  $token
            ]);




            $email->setData([
                "url"   =>  $url,
                "cliente"   =>  $cliente
            ]);
            $email->send();
            return [
                "ecommerce/user-account/recuperapasswordconferma",
                []
            ];
            //RouterService::getRoute(self::ROUTE_CHECKOUT)->go();

        }

        return [
            "ecommerce/user-account/recuperapassword",
            []
        ];


    }

    static function _carrelloAggiungi($params=[],$data){

        $lineitem = new LineItem($data['id_variante'],$data['quantity']);
        if(isset($data['attributi'])){
            $lineitem = new LineItem($data['id_variante'],$data['quantity']);
            $lineitem->additionalAttributes($data['attributi']);

            $carrello = Carrello::get()->add($lineitem);

        }else{

            $carrello = Carrello::get()->add($lineitem);
            //$carrello = Carrello::get()->createLineItem($data['id_variante'],$data['quantity']);
        }




        if($route = Events::dispatch(self::EVENT_AGGIUNTO_AL_CARRELLO,$lineitem)){
            $route->go();
        }else{
            RouterService::getRoute("frontend.ecommerce.carrello")->go();
        }

    }


    static function _carrelloAggiungiVeloce($params=[]){



        $carrello = Carrello::get()->createLineItem($params['id'],1);

        RouterService::getRoute("frontend.ecommerce.carrello")->go();

    }

    static function _carrelloRimuovi($params=[]){


        $carrello = Carrello::get();
        $carrello->removeByVariant($params['id']);
       RouterService::getRoute("frontend.ecommerce.carrello")->go();

    }

    static function _carrello( $params =[]){

        $carrello = Carrello::get();



        return [
            "ecommerce/carrello",[

                "params"    =>  $params
            ]
        ];
    }

    static function preparaFromAttributi( $varianti ){
        $attributi = [];
        foreach ($varianti as $item) {
            $dataparents = [];
            foreach ($item->attributi as $key => $value){


                if (!isset($attributi[$value->attributo->id])) {
                    $attributi[$value->attributo->id] = [
                        "idattributo" => $value->attributo->id,
                        "attributo" => $value->attributo,
                        "valori" => []
                    ];
                }



                if($key>0) {
                    $attributi[$value->attributo->id]['attributo_precedente'] = $item->attributi[$key - 1]->attributo->id;
                }
                $o = [
                    "idvalore"  =>  $value->valore->id,
                    "valore"    =>  $value->valore
                ];
                if($key>0) {
                    $dataparents[] = [
                        $item->attributi[$key - 1]->attributo->id,
                        $item->attributi[$key - 1]->valore->id
                    ];
                    $o["attributoprecedentevalore"] = $item->attributi[$key - 1]->valore->id;
                    $o["attributoprecedenteid"] = $item->attributi[$key - 1]->attributo->id;
                    $o["parents"] = $dataparents;
                }
                if(!in_array($o,$attributi[$value->attributo->id]['valori']))
                    $attributi[$value->attributo->id]['valori'][] = $o;

            }
        }
        return $attributi;
    }
    static function _schedaProdotto( $params=[]){
        define("DDD",true);

        $prodotto = Prodotto::findBySlug($params['slug']);
        if( !$prodotto ){
            return false;
        }





        $attributi = self::preparaFromAttributi($prodotto[0]->varianti);


        /*foreach ($prodotto[0]->varianti as $item) {


            $dataparents = [];


            foreach ($item->attributi as $key => $value){



                if(!isset($attributi[$value->attributo->id])){
                    $attributi[$value->attributo->id] = [
                        "idattributo" =>  $value->attributo->id,
                         "attributo" =>  $value->attributo,
                        "valori"    =>  []
                    ];
                }

                if($key>0) {
                    $attributi[$value->attributo->id]['attributo_precedente'] = $item->attributi[$key - 1]->attributo->id;

                }

                $o = [
                    "idvalore"  =>  $value->valore->id,
                    "valore"    =>  $value->valore

                ];
                 if($key>0) {
                     $dataparents[] = [
                         $item->attributi[$key - 1]->attributo->id,
                         $item->attributi[$key - 1]->valore->id
                     ];
                   $o["attributoprecedentevalore"] = $item->attributi[$key - 1]->valore->id;
                   $o["attributoprecedenteid"] = $item->attributi[$key - 1]->attributo->id;
                   $o["parents"] = $dataparents;
                }
                if(!in_array($o,$attributi[$value->attributo->id]['valori']))
                    $attributi[$value->attributo->id]['valori'][] = $o;

            }
        }
        */
        $variante = $prodotto[0]->varianti[0];


        $meta = Meta::query()->where('entity="ecommerce.prodotto"')->where("entity_id=".$prodotto[0]->id)->getOne();

        if( !$meta ) {
            $meta = new Meta([
                "title" =>  $prodotto[0]->nome." | Cartiamo",
                "description"   =>  $prodotto[0]->descrizione
            ]);
        }
        Response::addVariable(
            [
                'meta' => $meta
            ]
            , true);


        if(isset($params['slug-variante'])){
            $v = Variante::query()->where('id_prodotto='.$prodotto[0]->id)->where('sku="'.$params['slug-variante'].'"')->getOne();

            if( $v ){
                $v->expand();
                $variante = $v;
            }
        }


        $breadcrumbs = [];

        $categoryFullSlug = "";

        $template = "ecommerce/scheda-prodotto";


        if(!empty($prodotto[0]->categories)) {


            $categoria = reset($prodotto[0]->categories);

            if( $padre = $categoria->getFather() ){


                array_unshift($breadcrumbs,[
                    "label"  =>  $categoria->nome,
                    "url"   =>  RouterService::getRoute("frontend.ecommerce.subcategoria")->build([
                        "father" => $padre->slug,
                        "slug" => $categoria->slug
                    ])
                ]);


                array_unshift($breadcrumbs,[
                   "label"  =>  $padre->nome,
                    "url"   =>  RouterService::getRoute("frontend.ecommerce.categoria")->build([
                        "slug" => $padre->slug
                    ])
                ]);


                $categoryFullSlug = $padre->slug."-".$categoria->slug;
                $padreSlug = $padre->slug;

                if( Response::getFrontendTemplate()->exists("ecommerce/scheda-prodotto-$categoryFullSlug.twig") ){
                    $template = "ecommerce/scheda-prodotto-$categoryFullSlug";
                }else if(Response::getFrontendTemplate()->exists("ecommerce/scheda-prodotto-$padreSlug.twig")){
                    $template = "ecommerce/scheda-prodotto-$padreSlug";
                }


            }

        }




        return [
            $template,[
                "prodotto"  =>  $prodotto[0],
                "attributi" =>  $attributi,
                "variante"  =>  $variante,
                "breadcrumbs"=>$breadcrumbs
            ]
        ];

    }


    static function _categoria( $params =[]){

        $cat = Categoria::findBySlug($params['slug']);
        if(empty($cat)){
            return false;
        }


        $categoria = $cat[0];



            if (isset($params['father']) && $categoria->padre == -1) {
                return false;
            }

            if( !isset($params['father'])){
                if(!empty($categoria->padre)){
                    $padre = Categoria::query(true)
                        ->where("id=".$categoria->padre)->getOne();
                    if($padre){

                        Response::go( RouterService::getRoute("frontend.ecommerce.subcategoria")->build([
                            "father" => $padre->slug,
                            "slug"  =>$categoria->slug
                        ]) );

                    }
                }
            }



            $searchparams = $params;
            if(isset(($searchparams["father"]))) unset($searchparams["father"]);
            if(isset(($searchparams["slug"]))) unset($searchparams["slug"]);
            if(isset(($searchparams["query"]))) unset($searchparams["query"]);
            if(isset(($searchparams["router-pattern"]))) unset($searchparams["router-pattern"]);
            if(isset(($searchparams["current_url"]))) unset($searchparams["current_url"]);

        $catalogoSearch = Catalogo::search($searchparams);

        $prodotti = $catalogoSearch->byCategory($categoria, !empty($params['page']) ? $params["page"] : 1) ;
        $paginazione = $catalogoSearch->getPagination();
        $query = $catalogoSearch->getQuery();

        $immagineTop = "";




        $meta = Meta::query()->where('entity="ecommerce.categoria"')->where("entity_id=".$categoria->id)->getOne();

        if( !$meta ) {
            $meta = new Meta([
                "title" =>  "Categoria ".$categoria->nome." | Cartiamo",
                "description"   =>  $categoria->descrizione
            ]);
        }

            $categories = Categoria::query(true)
                ->where("padre=-1")
                ->orWhere("padre is null")
                ->getAll();


            Categoria::expandArray($categories);

            $attributi = \applications\ecommerce\entities\Attributo::query()->getAll();




        foreach ($prodotti as $value){
            $value->variantePrimaria = $value->getDefaultVariant();

            $value->expandSchema();
            $value->expandFields();

            }


            $categoria->expand();

            Response::addVariable(
                [
                    'meta' => $meta
                ]
                , true);


            $layout = !empty($categoria->custom_layout) ? $categoria->custom_layout : "ecommerce/shop/category";
            return [
                $layout, [
                    "query"=>$query,
                    "categoria" => $categoria,
                    "categorie" => $categories,
                    "attributi" => $attributi,
                    "prodotti" => $prodotti,
                    "paginazione"   =>  $paginazione

                ]
            ];
        }

    static function _checkout( $params=[]){

        if( SessionService::get(self::SESSION_USER_LOGGED)){
            RouterService::getRoute(self::ROUTE_SPEDIZIONE)->go();
        }

            return [
                "ecommerce/checkout/index", [
                    "carrello" => Carrello::get()
                ]
            ];
        }

    static function _regitrazione( $params=[], $data = null){


        if(Request::isPost()){

            $c = Cliente::findByEmail($data['email']);

            if($c){
                RouterService::getRoute(self::ROUTE_REGISTRAZIONE)->go([
                    "msg"   =>  "Esiste già un utente con questo indirizzo email"
                ]);
            }

            $data['password'] = LoginApplication::generateHash($data['password']);

            $cliente = new Cliente($data);
            $cliente->save();





            SessionService::set(EcommerceFrontend::SESSION_USER_LOGGED,$cliente);
            $carrello = Carrello::get();
            $carrello->setCliente($cliente);

            RouterService::getRoute("frontend.ecommerce.checkout.spedizione")->go();
        }
        return[
            "ecommerce/checkout/registrazione",[]
        ];
    }


        static function _spedizione( $params = [],$data = null){
            $spedizioniDisponibili = Spedizione::query()->getAll();
            $provincieDisponibili = Provincia::query()->where("id_country=1")->getAll();
            $zoneDisponibili = \applications\ecommerce\entities\Zona::query()->getAll();

            $cliente = SessionService::get(self::SESSION_USER_LOGGED);

            $indirizziSpedizione = ClienteSpedizione::findById_cliente( $cliente->id );


            $indirizzoFatturazione = null;
            if(!empty($indirizziSpedizione)){
                $indirizzoFatturazione = ClienteFatturazione::query()->where("id_spedizione=".$indirizziSpedizione[0]->id)->getOne();
                if(!$indirizzoFatturazione){
                    $indirizzoFatturazione = ClienteFatturazione::query()->where("id_cliente=".$cliente->id)->getOne();
                }
            }

            if( Request::isPost()){

                // Spedizione
                if( isset($data['spedizione']['id']) ){
                    $spedizione = ClienteSpedizione::findById($data['spedizione']['id']);
                    $spedizione->buildProperties($data["spedizione"]);
                }else{
                    $spedizione = new ClienteSpedizione($data['spedizione']);
                }


                $spedizione->save();



                // Fatturazione
                if(!isset($data['stesso-fatturazione'])) {
                    if (!empty($data['fatturazione']['id'])) {
                        

                        $fatturazione = ClienteFatturazione::findById($data['fatturazione']['id']);
                        $fatturazione->buildProperties($data["fatturazione"]);
                    } else {
                        $fatturazione = new ClienteFatturazione($data['fatturazione']);
                    }
                    $fatturazione->id_spedizione = "";
                    $fatturazione->nome = "";

                    $fatturazione->save();
                }else{

                    $fatturazione = ClienteFatturazione::query("id_spedizione=".$spedizione->id)->getOne();
                    if(!$fatturazione){
                        $fatturazione = ClienteFatturazione::query("id_cliente=".$spedizione->id_cliente)->getOne();
                    }

                    if(!$fatturazione) {
                        $fatturazione = new ClienteFatturazione();
                    }
                    $fatturazione->buildProperties([
                        "id_cliente"    =>  $spedizione->id_cliente,
                        "id_spedizione" => $spedizione->id
                    ]);
                    $fatturazione->save();
                }


                $carrello = Carrello::get();
                $carrello->cliente = $cliente;
                $carrello->updateProperties();


                $carrello->save();
                RouterService::getRoute("frontend.ecommerce.checkout.spedizione.metodo")->go();

                if (!empty($carrello->metodiDiSpedizione)) {
                    RouterService::getRoute("frontend.ecommerce.checkout.spedizione.metodo")->go();
                }

                RouterService::getRoute("frontend.ecommerce.checkout.pagamento")->go();
            }


            return [
                "ecommerce/checkout/spedizione",[
                    "cliente"   =>  SessionService::get(self::SESSION_USER_LOGGED),
                    "spedizioniDisponibili" => $spedizioniDisponibili,
                    "provincieDisponibili" => $provincieDisponibili,
                    "indirizzoSpedizione"   =>  empty($indirizziSpedizione) ? [] : $indirizziSpedizione[0],
                    "indirizzoFatturazione" =>$indirizzoFatturazione,
                    "zoneDisponibili"   =>  $zoneDisponibili
                ]
            ];
        }



    static function ___spedizione( $params = [],$data = null){
        $spedizioniDisponibili = Spedizione::query()->getAll();
        $provincieDisponibili = Provincia::query()->where("id_country=1")->getAll();


        $cliente = SessionService::get(self::SESSION_USER_LOGGED);

        $indirizziSpedizione = ClienteSpedizione::findById_cliente( $cliente->id );

        if( Request::isPost()){
            if( isset($data['spedizione']['id']) ){
                $spedizione = ClienteSpedizione::findById($data['spedizione']['id']);
                $spedizione->buildProperties($data["spedizione"]);
            }else{
                $spedizione = new ClienteSpedizione($data['spedizione']);
            }
            $spedizione->save();

            $carrello = Carrello::get();
            $carrello->cliente = $cliente;
            $carrello->updateProperties();

                if (!empty($carrello->metodiDiSpedizione)) {

                RouterService::getRoute("frontend.ecommerce.checkout.spedizione.metodo")->go();

            }

            RouterService::getRoute("frontend.ecommerce.checkout.pagamento")->go();
        }


        return [
            "ecommerce/checkout/spedizione",[
                "cliente"   =>  SessionService::get(self::SESSION_USER_LOGGED),
                "spedizioniDisponibili" => $spedizioniDisponibili,
                "provincieDisponibili" => $provincieDisponibili,
                "indirizzoSpedizione"   =>  empty($indirizziSpedizione) ? [] : $indirizziSpedizione[0]
            ]
        ];
    }

    static function _metodoSpedizione( $params = [],$data = null){


        $carrello = Carrello::get();


        if( Request::isPost()){

            $spedizione = Spedizione::findById($data['id_spedizione']);

            $carrello->setMetodoSpedizione($spedizione);
            $carrello->save();
            RouterService::getRoute("frontend.ecommerce.checkout.pagamento")->go();
        }




            return [
                "ecommerce/checkout/metodo_spedizione", [
                    "spedizioniDisponibili" => $carrello->metodiDiSpedizione,
                    "spedizioneCorrente" => $carrello->metodoDiSpedizione
                ]
            ];

        exit;

        if( Request::isPost()){
            if( isset($data['spedizione']['id']) ){
                $spedizione = ClienteSpedizione::findById($data['spedizione']['id']);
                $spedizione->buildProperties($data["spedizione"]);
            }else{
                $spedizione = new ClienteSpedizione($data['spedizione']);
            }
            $spedizione->save();

            $carrello = Carrello::get();

            if( count($carrello->metodiDiSpedizione) > 1){
                RouterService::getRoute("frontend.ecommerce.checkout.spedizione.metodo")->go();
            }

            RouterService::getRoute("frontend.ecommerce.checkout.pagamento")->go();
        }


        return [
            "ecommerce/checkout/spedizione",[
                "cliente"   =>  SessionService::get(self::SESSION_USER_LOGGED),
                "spedizioniDisponibili" => $spedizioniDisponibili,
                "provincieDisponibili" => $provincieDisponibili,
                "indirizzoSpedizione"   =>  empty($indirizziSpedizione) ? [] : $indirizziSpedizione[0]
            ]
        ];
    }

    static function _pagamento(){


        $carrello = Carrello::get();


        $cliente = SessionService::get(self::SESSION_USER_LOGGED);
        $carrello->setCliente($cliente);



        $totale = $carrello->getTotal();


            $metodiDiPagamento = MetodoPagamento::query()->getAll();

            $data = [
                "totale" => $totale,
                "metodiDiPagamento" => $metodiDiPagamento,
                "cliente" => $cliente
            ];

            foreach ($metodiDiPagamento as $m) {
                if ($m->getGateway() == Braintree::class) {
                    $braintree = new Braintree();
                    $data["token"] = $braintree->generateToken($cliente);
                }



                if ($m->getGateway() == Stripe::class) {

                    $stripe = new Stripe(null,null,null,$m);
                    $data["stripe"] = $stripe->publishable_key;
                }
            }


            return [
                "ecommerce/checkout/pagamento", $data
            ];
        }

    static function _errorePagamento(){
        return [
            "ecommerce/checkout/errore-pagamento",[]
        ];
    }


    static function sendPostmark($msg,$to){
        $client = new PostmarkClient("3604bef6-f09b-419f-adae-9fff1c00b932");
       $r = $client->sendEmail("info@cartiamo.it",$to,
            "Ordine effettuato",$msg,null,null,null,null,null,"phomea@gmail.com");


    }
    static function _charge($params = [],$data){
        $carrello = Carrello::get();
        $cliente = SessionService::get(self::SESSION_USER_LOGGED);


        $email = new Email();
        $email->from= "info";
        $email->to= $carrello->cliente->email;
        $email->template = "conferma-ordine";
        $email->subject ="Conferma ordine";

        $email->setData([
            "ordine"  =>  $carrello,
            "lineitems" =>  $carrello->lineitems
        ]);



        $metodo = MetodoPagamento::findById($data['metodoDiPagamento']);


        if( ($ordine = $metodo->processOrder($cliente,$carrello,$data)) && !($ordine instanceof ChargeError)){
            Notification::notify("Ordine effettuato",$ordine);

            $numero = $ordine->getNumeroOrdine();
            SessionService::set("lastorder",$ordine);
            $email->data['numeroordine'] = $numero;
            $email->data['msg'] = $metodo->infomail;

            self::sendPostmark( $email->bindData(),$carrello->cliente->email);



            //$email->send();

            $email->to= "info";
            $email->template = "conferma-ordine-interno";
            $email->setData([
                "ordine"  =>  $ordine,
                "lineitems" =>  $carrello->lineitems
            ]);
            $email->data['numeroordine'] = $numero;
            $email->send();





            SessionService::delete(Carrello::SESSION_NAME);
            RouterService::getRoute("frontend.ecommerce.checkout.thankyou")->go();
        }else{
            $ordine->report();

            SessionService::set(ChargeError::SESSION_KEY,$ordine);

            RouterService::getRoute("frontend.ecommerce.checkout.error.charge")->go();
        }

        $totale = $carrello->getTotal();


        /*if($metodo->type == Braintree::getType() ) {
            $braintree = new Braintree();
            $totale = number_format( (float)$totale , 2, '.', '');
            $result = $braintree->transaction($totale, $data['payment_method_nonce']);

            if ($result->success) {
                // pagamento effettuato
                $transaction = $result->transaction;

                $ordine = new Ordine([
                    "id_cliente" => $cliente->id,
                    "gateway" => "braintree",
                    "id_transaction" => $transaction->id,
                    "id_metodospedizione" => $carrello->metodoDiSpedizione->id,
                    "metodospedizione"  =>  $carrello->metodoDiSpedizione->nome." - prezzo ".Response::formatPrice($carrello->metodoDiSpedizione->prezzo),
                    "id_indirizzospedizione" => $carrello->indirizzoSpedizione->id,
                    "id_coupon" =>  empty($carrello->coupon) ? null : $carrello->coupon->id,
                    "spedizione" => $carrello->spedizione,
                    "subtotale" => $carrello->subtotale,
                    "totale" => $carrello->totale,
                    "lineitems" =>  $carrello->lineitems

                ]);
                $ordine->build();
                if( !empty($carrello->coupon) ){
                    $carrello->coupon->utilizzi += 1;
                    $carrello->coupon->save();
                }
                $ordine->save();
                $numero = $ordine->getNumeroOrdine();
                $email->data['numeroordine'] = $numero;
                $email->send();



                SessionService::delete(Carrello::SESSION_NAME);

            } else {

            }
        }*/

        /*if($metodo->type == Contrassegno::getType() ) {
            $carrello->extra = 4;
            $totale = $carrello->getTotal();

            $ordine = new Ordine([
                "id_cliente" => $cliente->id,
                "gateway" => "contrassegno",
                "id_metodospedizione" => $carrello->metodoDiSpedizione->id,
                "metodospedizione"  =>  $carrello->metodoDiSpedizione->nome." - prezzo ".Response::formatPrice($carrello->metodoDiSpedizione->prezzo),
                "id_indirizzospedizione" => $carrello->indirizzoSpedizione->id,
                "spedizione" => $carrello->spedizione,
                "id_coupon" =>  empty($carrello->coupon) ? null : $carrello->coupon->id,
                "subtotale" => $carrello->subtotale,
                "totale" => $carrello->totale,
                "lineitems" =>  $carrello->lineitems
            ]);
            $ordine->build();
            if( !empty($carrello->coupon) ){
                $carrello->coupon->utilizzi += 1;
                $carrello->coupon->save();
            }
            $ordine->save();


            $numero = $ordine->getNumeroOrdine();
            $email->data['numeroordine'] = $numero;
            $email->send();



            SessionService::delete(Carrello::SESSION_NAME);
        }*/


        RouterService::getRoute("frontend.ecommerce.checkout.thankyou")->go();


    }

    static function _thankyou( $params = []){
        $ordine = SessionService::get("lastorder");

        if(empty($ordine)){
            RouterService::getRoute("home")->go();
        }


        SessionService::delete("lastorder");

        $gateway = MetodoPagamento::findById($ordine->id_gateway);

        return [
            "ecommerce/thankyou",[
                "ordine"    =>  $ordine,
                "gateway"   =>  $gateway
            ]
        ];
    }

    static function _login($params=[],$data = []){

        if(Request::isPost()) {
            $user = $data['username'];
            $password = LoginApplication::generateHash($data['password']);

            $cliente = Cliente::query()->where('email="' . $user . '"')->getOne();

            if ($cliente) {
                if ($cliente->password == $password) {
                    SessionService::set(EcommerceFrontend::SESSION_USER_LOGGED, $cliente);
                    $carrello = Carrello::get();
                    $carrello->setCliente($cliente);

                    if(isset($data['followroute'])) {
                        RouterService::getRoute($data['followroute'])->go();
                    }else {
                        RouterService::getRoute(self::ROUTE_SPEDIZIONE)->go();
                    }

                }

            }

            RouterService::getRoute(self::ROUTE_CHECKOUT)->go([
                "msg" => "Non è stato possibile autenticarsi"
            ]);
        }

        return [
            "ecommerce/user-account/login",[]
        ];

    }

    static function _logout($params=[]){


        $cliente = SessionService::get(self::SESSION_USER_LOGGED);
        SessionService::delete(self::SESSION_USER_LOGGED);

        Response::go("/");



    }




    static function _ricerca( $params= [] ){
        $data = Request::getParams();
        $data = $params;
 
        $categoria = isset($data['tipologia']) ? $data['tipologia'] : [];
        $attributi = isset($data['attributo']) ? $data['attributo'] : [];

        $ricerca = isset($data['ricerca']) ? $data['ricerca'] : "";

        $cerca = new CatalogoSearch();


        $r = $cerca->setQuery($ricerca)->setAttributes($attributi)->setCategories($categoria)
            ->search();

        foreach ($r as $value){
            $value->variantePrimaria = $value->getDefaultVariant();
            $value->expandSchema();
            $value->expandFields();
        }



       // $meta = Meta::query()->where('entity="ecommerce.prodotto"')->where("entity_id=".$prodotto[0]->id)->getOne();

        //if( !$meta ) {
        
            $meta = new Meta([
            "title" =>  "Cerca partecipazioni ".$ricerca." su Cartiamo",
            "description"   =>  "Cerca facilmente partecipazioni di matrimonio ".$ricerca." o partecipazioni comunione"
            ]);
        //}
        Response::addVariable(
            [
                'meta' => $meta
            ]
            , true);

        

        return [
            "ecommerce/search",[
                "ricerca"   =>  $ricerca,
                "prodotti"  =>  $r
            ]
        ];
    }


    static function _aggiungiCoupon( $params=[],$data){
        $coupon = Coupon::findByNome($data['coupon']);


        if( count($coupon) > 0 ){
            if( Carrello::get()->addCoupon($coupon[0]) ) {
                RouterService::getRoute(self::ROUTE_CARRELLO)->go(["msg" => "Coupon aggiunto"]);
            }else{
                RouterService::getRoute(self::ROUTE_CARRELLO)->go(["msg" => "Coupon non valido"]);
            }
        }

        RouterService::getRoute(self::ROUTE_CARRELLO)->go(["msg"=>"Il coupon inserito non esiste"]);
        exit;
    }
    static function _rimuoviCoupon( $params=[]){

        Carrello::get()->rimuoviCoupon();

        RouterService::getRoute(self::ROUTE_CARRELLO)->go(["msg"=>"Coupon rimosso"]);
    }


    static function _userAccount($params =[],$data=null){
        if(!SessionService::get(self::SESSION_USER_LOGGED)){

            RouterService::getRoute(self::ROUTE_LOGIN_SIMPLE)->go();

        }
        if(Request::isPost()){
            $user = SessionService::get(self::SESSION_USER_LOGGED);
            $user->buildProperties($data);
            $user->save();

            RouterService::getRoute("frontend.ecommerce.user.account")->go([
                "msg"=>"Dati del profilo salvati"
            ]);
            exit;
        }else{

            return [
                "ecommerce/user-account/index",[
                    "user"  => SessionService::get(self::SESSION_USER_LOGGED),
                    "spedizione"    =>SessionService::get(self::SESSION_USER_LOGGED)->getDefaultShippingAddress()
                ]
            ];
        }

    }

    static function _userAccountOrdini($params =[],$data=null){
        if(!SessionService::get(self::SESSION_USER_LOGGED)){
            Response::go("/");
        }
        if(Request::isPost()){
            $user = SessionService::get(self::SESSION_USER_LOGGED);
            $user->buildProperties($data);
            $user->save();

            RouterService::getRoute("frontend.ecommerce.user.account")->go([
                "msg"=>"Dati del profilo salvati"
            ]);
            exit;
        }else{

            return [
                "ecommerce/user-account/ordini",[
                    "user"  => SessionService::get(self::SESSION_USER_LOGGED)
                ]
            ];
        }

    }


    static function _userAccountProfilo($params =[],$data=null){
        if(!SessionService::get(self::SESSION_USER_LOGGED)){
            Response::go("/");
        }
        if(Request::isPost()){
            $user = SessionService::get(self::SESSION_USER_LOGGED);
            $user->buildProperties($data);
            $user->save();

            RouterService::getRoute("frontend.ecommerce.user.account.profilo")->go([
                "msg"=>"Dati del profilo salvati"
            ]);
            exit;
        }else{

            return [
                "ecommerce/user-account/profilo",[
                    "user"  => SessionService::get(self::SESSION_USER_LOGGED)
                ]
            ];
        }

    }

    static function _userAccountSpedizione($params =[],$data=null){
        if(!SessionService::get(self::SESSION_USER_LOGGED)){
            Response::go("/");
        }
        if(Request::isPost()){
            $user = SessionService::get(self::SESSION_USER_LOGGED);
            $user->buildProperties($data);
            $user->save();

            RouterService::getRoute("frontend.ecommerce.user.account")->go([
                "msg"=>"Dati del profilo salvati"
            ]);
            exit;
        }else{

            return [
                "ecommerce/user-account/spedizione",[
                    "user"  => SessionService::get(self::SESSION_USER_LOGGED),
                    "spedizione"    =>SessionService::get(self::SESSION_USER_LOGGED)->getDefaultShippingAddress()
                ]
            ];
        }

    }






}