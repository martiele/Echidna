<?php

namespace applications\ecommerce;

use applications\ecommerce\entities\Categoria;
use applications\ecommerce\entities\CategoriaProdotto;
use applications\ecommerce\entities\Ordine;
use applications\ecommerce\entities\Prodotto;
use applications\ecommerce\entities\Variante;
use applications\ecommerce\traits\metodiCatalogoProdotto;
use applications\ecommerce\entities\VarianteAttributo;
use core\abstracts\Application;
use core\abstracts\BackendApplication;
use core\Route;
use core\Environment;
use core\services\RouterService;
use core\services\Db;


class Prodotti extends BackendApplication {
    use metodiCatalogoProdotto;


    static function actionAdd($params = [])
    {
        return static::addProdotto($params); // TODO: Change the autogenerated stub
    }

    static function actionMod($params = [])
    {
        return static::editProdotto($params);
    }

    static function getApplication()
    {
        return EcommerceApplication::class;
    }


    static function getEntityClass()
    {
        return Prodotto::class;
    }

    static function importCSV($dataGET)
    {
        $cssfile = Environment::$ROOT . "/applications/ecommerce/assets/css/importa.css";
        $cssrules = file_get_contents($cssfile);
        $dataGET["additional_css"] = $cssrules;
        return array("ecommerce/templates/importa",$dataGET);
    }

    private static $debugtext="";
    static function myEcho($testo, $diehere=0, $getmessage=0){
        $debug = 1;

        if($debug==1){
            Prodotti::$debugtext .= $testo . "<br />\n";
            if($diehere){
                echo Prodotti::$debugtext;
                die();
            }
            if($getmessage){
                return Prodotti::$debugtext;
            }
        }

    }

    static function macinaCSV($getVars, $postVars=NULL)
    {
        //Elaborazione file

        $csv = array();
        $messaggio = "";
        $stato = 0;
        $solo_inseriti = (int)isset($postVars["solo_inseriti"]);
        $solo_prezzi = (int)isset($postVars["solo_prezzi"]);
        $elimina_varianti = (int)isset($postVars["elimina_varianti"]);

        //Costanti su nostro DB
        $id_attributo_versione = 8;
        $id_attributo_rivestimento = 9;
        $legenda_rivestimenti = [
            ["EPIC", "colore-pelle-epic", 0],
            ["SUPER", "colore-pelle-super", 0],
            ["CRUISE", "colore-pelle-racing", 0],
            ["BRIDGE", "colore-tessuto-enjoy", 0],
            ["MICRO", "colore-microfibra-daytona", 0]
        ];
        $versione_primaria = [791,114];
        $rivestimento_primario = 70; //CATEGORIA DEL TESSUTO "ENJOY"
        //Costanti - fine


        //Cerco subito nel DB gli id dei rivestimenti
        $sql = "SELECT a.slug, b.id FROM ecommerce_attributo a JOIN ecommerce_attributo_valore b ON 
                    a.parent = b.id_ecommerce_attributo AND a.parent_value = b.valore WHERE b.id_ecommerce_attributo=:id_ecommerce_attributo";
        $r = Db::$connection->fetchAll($sql,["id_ecommerce_attributo" =>  $id_attributo_rivestimento]);
        foreach ($r as $item) {
            foreach ($legenda_rivestimenti as $key=>$elemento) {
                if($elemento[1]==$item['slug']){
                    $legenda_rivestimenti[$key][2] = $item['id'];
                }
            }
        }

        Prodotti::MyEcho("inizio");


        // check there are no errors
        if($_FILES['csv']['error'] == 0){
            $stato = 1;
            $name = $_FILES['csv']['name'];
            $ext = explode('.', $_FILES['csv']['name']);
            $ext = strtolower(end($ext));
            $type = $_FILES['csv']['type'];
            $tmpName = $_FILES['csv']['tmp_name'];

            // check the file is a csv
            if($ext === 'csv'){
                if(($handle = fopen($tmpName, 'r')) !== FALSE) {
                    // necessary if a large csv file
                    set_time_limit(0);

                    $row = 0;

                    while(($data = fgetcsv($handle, 1000, ',')) !== FALSE) {
                        // number of fields in the csv
                        $col_count = count($data);

                        // get the values from the csv
                        $csv[$row]['listino'] = trim($data[0]);
                        $csv[$row]['desc_listino'] = trim($data[1]);
                        $csv[$row]['modello'] = trim($data[2]);
                        $csv[$row]['desc_modello'] = trim($data[3]);
                        $csv[$row]['versione'] = trim($data[4]);
                        $csv[$row]['desc_versione'] = trim($data[5]);
                        $csv[$row]['rivestimento'] = trim($data[6]);
                        $csv[$row]['desc_rivestimento'] = strtoupper(trim($data[7]));
                        $csv[$row]['prezzo_scontato'] = (float)str_replace(",", ".", str_replace(".", "",trim($data[8])));
                        $csv[$row]['prezzo_pieno'] = (float)str_replace(",", ".", str_replace(".", "", trim($data[9])));
                        $csv[$row]['altezza'] = (float)str_replace(",", ".", trim($data[10]));
                        $csv[$row]['larghezza'] = (float)str_replace(",", ".", trim($data[11]));
                        $csv[$row]['profondita'] = (float)str_replace(",", ".", trim($data[12]));
                        $csv[$row]['altezza_seduta'] = (float)str_replace(",", ".", trim($data[13]));
                        $csv[$row]['metri_cubi'] = (float)str_replace(",", ".", trim($data[14]));
                        $csv[$row]['sedute'] = (float)str_replace(",", ".", trim($data[15]));
                        $csv[$row]['quantita'] = (int)str_replace(",", ".", trim($data[16]));
                        // inc the row
                        $row++;
                    }
                    fclose($handle);

                    if($row>0){
                        $stato = 1;

                        //Se il file Ã¨ valido e contiene almeno il record di intestazione inizio...

                        if($elimina_varianti){
                            //Elimino le varianti attuali dei prodotti "complessi"

                            //Per ora non lo faccio... ho paura
                        }

                        $conta = 1; //Inizio dal secondo record, salto l'intestazione
                        Prodotti::myEcho("N-righe: ".$row);
                        while($conta<$row){
                            $modello_esiste = 0;
                            // 1 - Cerco il modello nel DB $csv[$row]['modello']

//Controllo che esista il modello
$sql = "SELECT * FROM ecommerce_prodotto WHERE sku=:sku";
$r = Db::$connection->fetchAll($sql,["sku" =>  $csv[$conta]['modello']]);
$id_modello = 0;
$modello_esiste = 0;
foreach ($r as $key=>$item) {
    $id_modello = $item['id'];
    $modello_esiste=1;
}
//Prodotti::myEcho("ID Modello: ".$id_modello);

                            if(!$modello_esiste){
                                if(!$solo_inseriti){
                                    //Se concedo l'inserimento di varianti per modelli non inseriti devo gestire la cosa aggiungendo il modello e mettendolo in stato "disattivo" in qualche modo. Per ora non sono pronto a sfidare le meraviglie di Echidna, quindi salto comunque questo modello e vado al prossimo.

                                    //...
                                    $conta++;
                                    continue;
                                    //...

                                }else{
                                    $conta++;
                                    continue;
                                }
                            }
                            //A questo punto il modello esiste o lo abbiamo saltato.

//Controllo che esista la versione
$sql = "SELECT * FROM ecommerce_attributo_valore WHERE id_ecommerce_attributo=:id_ecommerce_attributo AND valore=:valore";
$r = Db::$connection->fetchAll($sql,["id_ecommerce_attributo" =>  $id_attributo_versione,
                                    "valore" =>  $csv[$conta]['versione']]);
$id_versione = 0;
$versione_esiste = 0;
foreach ($r as $key=>$item) {
    $id_versione = $item['id'];
    $versione_esiste=1;
}
//Prodotti::myEcho("ID Versione: ".$id_versione);

if(!$versione_esiste){
    //Se non esiste la creo
    $sql = "INSERT INTO ecommerce_attributo_valore (id_ecommerce_attributo,valore) VALUES (:id_ecommerce_attributo,:valore)";
    $r = Db::$connection->perform($sql,["id_ecommerce_attributo" =>  $id_attributo_versione,
                                    "valore" =>  $csv[$conta]['versione']]);
    $id_versione = Db::$connection->lastInsertId();
    //Prodotti::myEcho("Inserito: " . Db::$connection->lastInsertId(), 1);
}

                            //A questo punto esiste anche la versione. Cerco il rivestimento (per nome)

                            $rivestimento_esiste = 0;
                            $id_rivestimento = 0;

                            foreach ($legenda_rivestimenti as $key=>$item) {
                                if($legenda_rivestimenti[$key][0]==$csv[$conta]['desc_rivestimento']){
                                    $rivestimento_esiste = 1;
                                    $id_rivestimento = $item[2];
                                }
                            }

                            if(!$rivestimento_esiste){
                                $conta++;
                                continue;
                                //Se non ho il rivestimento, salto la riga
                            }

//A questo punto ho tutto... posso inserire
$my_sku = $csv[$conta]['modello']."-".$csv[$conta]['versione']."-".$csv[$conta]['rivestimento'];


//Controllo se esiste lo sku della versione
$sql = "SELECT * FROM ecommerce_prodotto_variante WHERE sku=:sku";
$r = Db::$connection->fetchAll($sql,["sku" =>  $my_sku]);
$sku_esiste = 0;
$id_variante = 0;
foreach ($r as $key=>$item) {
    $id_variante = $item['id'];
    $sku_esiste=1;
}

//Determino se questa Ã¨ la versione primaria del modello.
$primaria = 0;
if( in_array((int)$csv[$conta]['versione'], $versione_primaria) && ((int)$csv[$conta]['rivestimento'] == $rivestimento_primario) ){
    $primaria = 1;
}
if(!$sku_esiste){
    //Se non esiste la creo
    $sql = "INSERT INTO ecommerce_prodotto_variante (id_prodotto, sku, prezzo, nome, descrizione, primaria, prezzo_speciale, peso) VALUES (:id_prodotto, :sku, :prezzo, :nome, :descrizione, :primaria, :prezzo_speciale, :peso)";
    $r = Db::$connection->perform($sql,[
            "id_prodotto" =>  $id_modello,
            "sku" =>  $my_sku,
            "prezzo" =>  $csv[$conta]['prezzo_pieno'],
            "nome" =>  $csv[$conta]['desc_versione'],
            "descrizione" =>  "",
            "primaria" =>  $primaria,
            "prezzo_speciale" =>  $csv[$conta]['prezzo_scontato'],
            "peso" =>  $csv[$conta]['sedute']
        ]);
    $id_variante = Db::$connection->lastInsertId();
    //Prodotti::myEcho("Inserito: " . Db::$connection->lastInsertId(), 1);
}else{
    //Se giÃ  esiste la aggiorno
    if($solo_prezzi){
        $sql = "UPDATE ecommerce_prodotto_variante SET prezzo=:prezzo, prezzo_speciale=:prezzo_speciale WHERE id=:id";
        $r = Db::$connection->perform($sql,[
                "prezzo" =>  $csv[$conta]['prezzo_pieno'],
                "prezzo_speciale" =>  $csv[$conta]['prezzo_scontato'],
                "id" =>  $id_variante
            ]);
    }else{
        $sql = "UPDATE ecommerce_prodotto_variante SET id_prodotto=:id_prodotto, sku=:sku, prezzo=:prezzo, nome=:nome, descrizione=:descrizione, primaria=:primaria, prezzo_speciale=:prezzo_speciale, peso=:peso WHERE id=:id";
        $r = Db::$connection->perform($sql,[
                "id_prodotto" =>  $id_modello,
                "sku" =>  $my_sku,
                "prezzo" =>  $csv[$conta]['prezzo_pieno'],
                "nome" =>  $csv[$conta]['desc_versione'],
                "descrizione" =>  "",
                "primaria" =>  $primaria,
                "prezzo_speciale" =>  $csv[$conta]['prezzo_scontato'],
                "peso" =>  $csv[$conta]['sedute'],
                "id" =>  $id_variante
            ]);
    }
}


                    //Adesso ho anche l'ID della variante, passo agli attributi.


//Devo collegare (o verificare il collegamento) degli attributi principali: rivestimento e versione dalla tabella "ecommerce_prodotto_variante_attributi"

// 1) VERSIONE
//Controllo se esiste giÃ  l'associazione
$sql = "SELECT * FROM ecommerce_prodotto_variante_attributi WHERE id_ecommerce_prodotto_variante=:id_ecommerce_prodotto_variante AND id_ecommerce_attributo=:id_ecommerce_attributo";
$r = Db::$connection->fetchAll($sql,[
        "id_ecommerce_prodotto_variante" =>  $id_variante,
        "id_ecommerce_attributo" => $id_attributo_versione
    ]);
$attr_esiste = 0;
$id_attr = 0;
foreach ($r as $key=>$item) {
    $id_attr = $item['id'];
    $attr_esiste=1;
}
if(!$attr_esiste){
    //Se non esiste la creo
    $sql = "INSERT INTO ecommerce_prodotto_variante_attributi (id_ecommerce_prodotto_variante, id_ecommerce_attributo, id_valore) VALUES (:id_ecommerce_prodotto_variante, :id_ecommerce_attributo, :id_valore)";
    $r = Db::$connection->perform($sql,[
            "id_ecommerce_prodotto_variante" =>  $id_variante,
            "id_ecommerce_attributo" =>  $id_attributo_versione,
            "id_valore" =>  $id_versione
        ]);
    $id_attr = Db::$connection->lastInsertId();
}else{
    //Se giÃ  esiste la aggiorno
    $sql = "UPDATE ecommerce_prodotto_variante_attributi SET id_valore=:id_valore WHERE id=:id";
    $r = Db::$connection->perform($sql,[
            "id_valore" =>  $id_versione,
            "id" =>  $id_attr
        ]);
}

// 2) RIVESTIMENTO
//Controllo se esiste giÃ  l'associazione
$sql = "SELECT * FROM ecommerce_prodotto_variante_attributi WHERE id_ecommerce_prodotto_variante=:id_ecommerce_prodotto_variante AND id_ecommerce_attributo=:id_ecommerce_attributo";
$r = Db::$connection->fetchAll($sql,[
        "id_ecommerce_prodotto_variante" =>  $id_variante,
        "id_ecommerce_attributo" => $id_attributo_rivestimento
    ]);
$attr_esiste = 0;
$id_attr = 0;
foreach ($r as $key=>$item) {
    $id_attr = $item['id'];
    $attr_esiste=1;
}
if(!$attr_esiste){

    //Se non esiste la creo
    $sql = "INSERT INTO ecommerce_prodotto_variante_attributi (id_ecommerce_prodotto_variante, id_ecommerce_attributo, id_valore) VALUES (:id_ecommerce_prodotto_variante, :id_ecommerce_attributo, :id_valore)";
    $r = Db::$connection->perform($sql,[
            "id_ecommerce_prodotto_variante" =>  $id_variante,
            "id_ecommerce_attributo" =>  $id_attributo_rivestimento,
            "id_valore" =>  $id_rivestimento
        ]);
    $id_attr = Db::$connection->lastInsertId();
}else{
    //Se giÃ  esiste la aggiorno
    $sql = "UPDATE ecommerce_prodotto_variante_attributi SET id_valore=:id_valore WHERE id=:id";
    $r = Db::$connection->perform($sql,[
            "id_valore" =>  $id_rivestimento,
            "id" =>  $id_attr
        ]);
}



                    //Infine aggiungo gli attributi testuali della variante
                    //Qui me ne frego, cancello i precedenti e li reinserisco...

// 1 - Cancello d'ognibene
$sql = "DELETE FROM ecommerce_prodotto_variante_campi WHERE id_ecommerce_prodotto_variante = :id_ecommerce_prodotto_variante";
$r = Db::$connection->perform($sql,["id_ecommerce_prodotto_variante" =>  $id_variante]); 

// 2 - inserisco i dati del CSV
// 2.1 Altezza
if(($csv[$conta]['altezza']!="-")&&($csv[$conta]['altezza']!="")&&($csv[$conta]['altezza']!=0)){
    $sql = "INSERT INTO ecommerce_prodotto_variante_campi (slug, id_ecommerce_prodotto_variante, valore) VALUES (:slug, :id_ecommerce_prodotto_variante, :valore)";
    $r = Db::$connection->perform($sql,[
            "slug" =>  "altezza",
            "id_ecommerce_prodotto_variante" =>  $id_attributo_rivestimento,
            "valore" =>  $csv[$conta]['altezza']
        ]);    
}
// 2.2 Larghezza
if(($csv[$conta]['larghezza']!="-")&&($csv[$conta]['larghezza']!="")&&($csv[$conta]['larghezza']!=0)){
    $sql = "INSERT INTO ecommerce_prodotto_variante_campi (slug, id_ecommerce_prodotto_variante, valore) VALUES (:slug, :id_ecommerce_prodotto_variante, :valore)";
    $r = Db::$connection->perform($sql,[
            "slug" =>  "larghezza",
            "id_ecommerce_prodotto_variante" =>  $id_attributo_rivestimento,
            "valore" =>  $csv[$conta]['larghezza']
        ]);    
}
// 2.3 ProfonditÃ 
if(($csv[$conta]['profondita']!="-")&&($csv[$conta]['profondita']!="")&&($csv[$conta]['profondita']!=0)){
    $sql = "INSERT INTO ecommerce_prodotto_variante_campi (slug, id_ecommerce_prodotto_variante, valore) VALUES (:slug, :id_ecommerce_prodotto_variante, :valore)";
    $r = Db::$connection->perform($sql,[
            "slug" =>  "profondita",
            "id_ecommerce_prodotto_variante" =>  $id_attributo_rivestimento,
            "valore" =>  $csv[$conta]['profondita']
        ]);    
}
// 2.4 Altezza Seduta
if(($csv[$conta]['altezza_seduta']!="-")&&($csv[$conta]['altezza_seduta']!="")&&($csv[$conta]['altezza_seduta']!=0)){
    $sql = "INSERT INTO ecommerce_prodotto_variante_campi (slug, id_ecommerce_prodotto_variante, valore) VALUES (:slug, :id_ecommerce_prodotto_variante, :valore)";
    $r = Db::$connection->perform($sql,[
            "slug" =>  "altezza-seduta",
            "id_ecommerce_prodotto_variante" =>  $id_attributo_rivestimento,
            "valore" =>  $csv[$conta]['altezza_seduta']
        ]);    
}
// 2.5 Volume
if(($csv[$conta]['metri_cubi']!="-")&&($csv[$conta]['metri_cubi']!="")&&($csv[$conta]['metri_cubi']!=0)){


    $sql = "INSERT INTO ecommerce_prodotto_variante_campi (slug, id_ecommerce_prodotto_variante, valore) VALUES (:slug, :id_ecommerce_prodotto_variante, :valore)";
    $r = Db::$connection->perform($sql,[
            "slug" =>  "volume",
            "id_ecommerce_prodotto_variante" =>  $id_attributo_rivestimento,
            "valore" =>  $csv[$conta]['metri_cubi']
        ]);    
}



                            $conta++;
                        }
                        Prodotti::MyEcho("fine");

                        $messaggio = "Prodotti importati con successo";
                    }else{
                        $stato = 2;
                        $messaggio = "Impossibile aprire il file";                        
                    }

                }else{
                    $stato = 2;
                    $messaggio = "Impossibile aprire il file";
                }
            }else{
                $stato = 2;
                $messaggio = "Il file non Ã¨ un CSV";
            }
        }else{
            $stato = 2;
            $messaggio = "Errori caricamento file";
        }

        //Qui devo parsare i dati e creare il che mi serve
        //$messaggio = $solo_inseriti;

        //redirect
        RouterService::getRoute("backend.prodotti.importa")->go([ "stato"=>$stato, "messaggio"=>$messaggio] );
        //return array("ecommerce/templates/importa",array());
    }

    /*static function declareRoutes(){
        $rotte = array();
        //$rotte = parent::declareRoutes();
        $rotte["backend.prodotti.importa"] = new Route("importa","importa",[static::class,"importCSV"]);
        $rotte["backend.prodotti.importa.macina"] = (new Route("importa","importa",[static::class,"macinaCSV"]))->method(Route::METHOD_POST);

        return $rotte;
    }*/


    static function actionImport($params = [])
    {

        $params["mappatura"] = array (
            'SKU' => 'sku',
            'Nome' => 'nome',
            'Prezzo' => 'prezzo',
            'Descrizione' => 'descrizione',
            'Grammatura' => 'grammatura',
            'Colore' => 'colore',
            'Invito al Ristorante (prezzo)' => 'invito_ristorante',
            'Invito al Party (prezzo)' => 'invito_party',
            'Bomboniera ringraziamento (prezzo)' => 'bomboniera_ringraziamento',
            'Bomboniera data (prezzo)' => 'bomboniera_data',
            'Montaggio' => 'montaggio',
            'Attivo' => '__active__'
        );

        $params["extraValues"] = [
            "importImages"    =>  [
                "label" =>  "Aggiornare le immagini ? Scegli se riaggiornare tutte le immagini o solamente i dati dei prodotti",
                "type" =>   "select",
                "values" =>  [1,0],
                "labels"=>["Aggiorna immagini","Non aggiornare immagini"]
            ]
        ];


        $params["campoprimario"] = "SKU";


        return parent::actionImport($params); // TODO: Change the autogenerated stub
    }

    static function actionImportSave($params = [], $post = [])
    {





        $post['preSave'] = function ($entity){


            $t = \applications\ecommerce\entities\TipologiaProdotto::query(true)->where('slug="prodotto_generico"')->getOne();

            if(!$t){

                $t = new \applications\ecommerce\entities\TipologiaProdotto([
                    "nome"  =>  "Prodotto generico",
                    "slug"  =>  "prodotto_generico"
                ]);
                $t->save();
            }
            $entity->id_ecommerce_tipologia_prodotto = $t->id;



            if( empty(trim($entity->invito_ristorante)) ){
                $entity->invito_ristorante = 0;
            }

            if( empty(trim($entity->invito_party)) ){
                $entity->invito_party = 0;
            }

            if( empty(trim($entity->bomboniera_ringraziamento)) ){
                $entity->bomboniera_ringraziamento = 0;
            }
            if( empty(trim($entity->bomboniera_data)) ){
                $entity->bomboniera_data = 0;
            }


            if( empty(trim($entity->montaggio)) ){
                $entity->montaggio = 0;
            }


            return $entity;
        };


        $post['postSave']=   function($dati,$valori,$entity){




                if(empty($dati['Immagine 1'])){
                    return false;
                }


                $skuCategoria = strtolower($dati['Categoria (sku)']);

                $categoria = falsE;
                if( $categoria = Categoria::query(true)
                    ->where('slug="'.$skuCategoria.'"')->getOne() ) {
                }else{
                    $categoria = new Categoria([
                        "nome"=>$dati['Categoria (sku)'],
                        "slug"  =>  $skuCategoria
                    ]);
                    $categoria->save();
                }

                if( $cp = CategoriaProdotto::query(true)
                    ->where("id_prodotto=" . $entity->id)
                    ->where("id_categoria=" . $categoria->id)
                    ->getOne() ){

                }else{
                    $cp = new CategoriaProdotto([
                        "id_prodotto"   =>  $entity->id,
                        "id_categoria"  =>  $categoria->id
                    ]);
                    $cp->save();
                }



                if(empty($entity->slug)){
                      $slug = str_replace([
                          " ",
                          ",",
                          '"',
                      ],"-",strtolower($entity->nome));
                      $entity->slug = $slug;
                      $entity->save();
                }

                $entity->expand();



                if(empty($entity->varianti)){
                    $variantedefault = new Variante([
                        "id_prodotto"   =>  $entity->id,
                        "nome"  =>  $entity->nome,
                        "sku"   =>  $entity->sku,
                        "prezzo"    =>  $entity->prezzo
                    ]);

                    $variantedefault->save();
                }else{
                     foreach ($entity->varianti  as $key=>$value){
                         $value->prezzo = $entity->prezzo;
                         $value->save();
                     }
                }


                if(isset($valori['importImages']) && $valori['importImages'] == 1) {
                    if (empty($entity->images)) {

                        $immaginiDaCaricare = [
                            "Immagine 1",
                            "Immagine 2",
                            "Immagine 3",
                            "Immagine 4"
                        ];
                        $entity->immagini = [];
                        $directory = Environment::$ROOT . "/media/catalogo/" . $entity->nome;


                        @mkdir($directory, 0777, true);
                        foreach ($immaginiDaCaricare as $item) {

                            if (strpos("http://", $dati[$item]) === 0 || strpos("https://", $dati[$item])) {
                                $immagine1 = strtolower($dati[$item]);

                                if (!empty($immagine1)) {

                                    $fileName = basename(strtok($immagine1, "?"));

                                    @copy($immagine1, $directory . "/" . $fileName);

                                    $entity->immagini[] = "/media/catalogo/" . $entity->nome . "/" . $fileName;
                                }
                            } else {
                                if (!empty($dati[$item])) {
                                    $entity->immagini[] = $dati[$item];
                                }
                            }
                        }
                    }
                }


            $entity->save();




            };

        return parent::actionImportSave($params, $post); // TODO: Change the autogenerated stub




    }
}