<?php

namespace applications\ecommerce;

use applications\ecommerce\entities\Categoria;
use applications\ecommerce\entities\Prodotto;
use applications\ecommerce\traits\metodiCatalogoCategoria;
use applications\ecommerce\traits\metodiCatalogoProdotto;
use core\abstracts\Application;
use core\abstracts\BackendApplication;
use core\Route;
use core\services\Db;
use core\services\Response;
use core\services\RouterService;

class Attributo extends BackendApplication {


    static function getApplication()
    {
        return EcommerceApplication::class;
    }

    static function getEntityClass()
    {
        return \applications\ecommerce\entities\Attributo::class;
    }

    static function declareRoutes()
    {
        $r = parent::declareRoutes(); // TODO: Change the autogenerated stub

        return array_merge($r,[
            "ecommerce.catalogo.attributo.valore.list"   =>  (new Route("ecommerce.catalogo.attributo.valore","attributo/{id:([0-9]*)}/valore",[self::class,"valori"]) ),
            "ecommerce.catalogo.attributo.valore.insert"   =>  (new Route("ecommerce.catalogo.attributo.valore.insert","valore/insert",[self::class,"valoreInsert"]) )->method(Route::METHOD_POST),
            "ecommerce.catalogo.attributo.valore.update"   =>  (new Route("ecommerce.catalogo.attributo.valore.update","valore/update",[self::class,"valoreUpdate"]) )->method(Route::METHOD_POST),
            "ecommerce.catalogo.attributo.valore.remove"   =>  (new Route("ecommerce.catalogo.attributo.valore.remove","valore/remove",[self::class,"valoreRemove"]) )->method(Route::METHOD_POST),
            "ecommerce.catalogo.attributo.valore.updateremove"   =>  (new Route("ecommerce.catalogo.attributo.valore.updateremove","valore/updateremove",[self::class,"valoreUpdateremove"]) )->method(Route::METHOD_POST)
        ]);

    }

    static function valori( $params ){
        $sql = "SELECT * FROM ecommerce_attributo_valore WHERE id_ecommerce_attributo=:id";

        return [
            "empty",[
                "data"=>Db::$connection->fetchAll($sql,$params)
            ]
        ];

    }

    static function valoreInsert( $params=[], $data){
        $sql = "INSERT into ecommerce_attributo_valore (id_ecommerce_attributo,valore,nomefile) VALUES (:id_ecommerce_attributo,:valore,:nomefile)";
        $r = Db::$connection->perform($sql,$data);
        exit;
    }

    static function valoreUpdateremove( $params=[], $data ){
        var_dump($data);
        exit;
    }

    static function valoreUpdate( $params=[], $data){

        $sql = "UPDATE ecommerce_attributo_valore SET 
              valore=:valore,
              nomefile=:nomefile              
              WHERE id=:id";

        $r = Db::$connection->perform($sql,$data);
        var_dump($r);
        exit;
    }

    static function valoreRemove( $params=[], $data){


        $sql = "DELETE FROM ecommerce_attributo_valore WHERE id=:id";

        $r = Db::$connection->perform($sql,$data);
        var_dump($r);
        exit;
    }


    static function actionMod($params = [])
    {


        $r = parent::actionMod($params); // TODO: Change the autogenerated stub


        $attributo = $r[1]['data'];

        $r[1]['template_extend']  =   "empty.twig";

        $sql = "SELECT * FROM ecommerce_attributo_valore WHERE id_ecommerce_attributo=:id ";
        $valori = Db::$connection->fetchAll($sql,[
            'id'    =>  $attributo->id
        ]);




        return [
            "tabs",[
                "tabs" => [
                    "proprieta" =>  [
                        "label"     =>  "ProprietÃ  attributo",
                        "content"   =>  Response::getTemplateToUse($r[0],$r[1])->render()
                    ],
                    "valori"    =>  [
                        "label" =>  "Valori disponibili",
                        "content"   =>  Response::getTemplateToUse("ecommerce/templates/attributo.valori",[
                            'template_extend'   =>  "empty.twig",
                            "attributo" =>  $attributo,
                            "valori"    =>$valori,
                            "urllist"    => RouterService::getRoute("ecommerce.catalogo.attributo.valore.list")->build([ "id" => $attributo->id]),
                            "urlinsert"    => RouterService::getRoute("ecommerce.catalogo.attributo.valore.insert")->build(),
                            "urlupdateremove" =>  RouterService::getRoute("ecommerce.catalogo.attributo.valore.updateremove")->build(),
                            "urlupdate" =>  RouterService::getRoute("ecommerce.catalogo.attributo.valore.update")->build(),
                            "urlremove" => RouterService::getRoute("ecommerce.catalogo.attributo.valore.remove")->build()
                        ])->render()
                    ]
                ]
            ]
        ];

    }


}