<?php
namespace applications\ecommerce;


use applications\ecommerce\entities\AttributoEntita;
use applications\ecommerce\entities\AttributoTipo;
use applications\ecommerce\entities\AttributoValore;
use applications\ecommerce\entities\Carrello;
use applications\ecommerce\entities\Categoria;
use applications\ecommerce\entities\CategoriaProdotto;
use applications\ecommerce\entities\Cliente;
use applications\ecommerce\entities\ClienteFatturazione;
use applications\ecommerce\entities\ClienteSpedizione;
use applications\ecommerce\entities\Coupon;
use applications\ecommerce\entities\LineItem;
use applications\ecommerce\entities\LineItemMeta;
use applications\ecommerce\entities\MetodoPagamento;
use applications\ecommerce\entities\Ordine;
use applications\ecommerce\entities\OrdineLineItem;
use applications\ecommerce\entities\Pagamento;
use applications\ecommerce\entities\Prodotto;
use applications\ecommerce\entities\ProdottoCampo;
use applications\ecommerce\entities\PromoCarrello;
use applications\ecommerce\entities\Provincia;
use applications\ecommerce\entities\RegolaCarrello;
use applications\ecommerce\entities\Spedizione;
use applications\ecommerce\entities\SpedizionePrezzo;
use applications\ecommerce\entities\TipologiaProdotto;
use applications\ecommerce\entities\TipologiaProdottoCampo;
use applications\ecommerce\entities\Variante;
use applications\ecommerce\entities\VarianteAttributo;
use applications\ecommerce\entities\VarianteCampi;
use applications\pages\entities\Pagina;
use backend\Menu;
use core\abstracts\Application;
use core\Config;
use core\Model;
use core\Route;
use core\services\Response;
use core\services\RouterService;

class EcommerceApplication extends Application {

    static $config = [];

    static function init($n)
    {
        parent::init($n); // TODO: Change the autogenerated stub
        /*Response::addVariable([
            "menu"  =>  [
                "gestionecontenuti" => [[
                    "label" =>  "E-commerce",
                    "icon"  =>  "store",
                    "children"  =>  [
                        ["label" => "Ordini", "href" =>  "/backend/".static::$name."/ordini/lista"],
                        ["label" => "Catalogo","href" =>  "/backend/".static::$name."/catalogo"],
                        ["label" => "Clienti","href" =>  "/backend/".static::$name."/clienti/lista"],
                        ["label" => "Spedizioni","href" =>  "/backend/".static::$name."/spedizioni/"],
                        ["label" => "Pagamenti","href" =>  "/backend/".static::$name."/metodi-di-pagamento/lista"],
                        ["label" => "Coupon","href" =>  "/backend/".static::$name."/coupon/lista"],
                        ["label" => "Attributi","href" =>   RouterService::getRoute(\applications\ecommerce\entities\Attributo::class.".list")->build()],
                        ["label" => "Importa CSV", "href" =>  "/backend/".static::$name."/prodotti/importa"],
                    ]
                ]
                ]]
        ]);*/




        $menu = new Menu("E-commerce","store");
        $menu->addItem("Ordini",RouterService::getRoute(Ordine::getEntity().".list"));
        $menu->addItem("Catalogo",RouterService::getRoute("ecommerce.catalogo"));
        $menu->addItem("Clienti",RouterService::getRoute(Cliente::getEntity().".list"));
        $menu->addItem("Spedizioni",RouterService::getRoute("ecommerce.spedizioni.home"));
        $menu->addItem("Pagamenti",RouterService::getRoute(MetodoPagamento::getEntity().".list"));
        $menu->addItem("Coupon",RouterService::getRoute(Coupon::getEntity().".list"));
        $menu->addItem("Attributi",RouterService::getRoute(\applications\ecommerce\entities\Attributo::getEntity().".list"));
        $menu->addItem("Promo",RouterService::getRoute(\applications\ecommerce\entities\Promo::getEntity().".list"));
        $menu->addItem("Promo Carrello",RouterService::getRoute(\applications\ecommerce\entities\PromoCarrello::getEntity().".list"));
        $menu->addItem("Regole Carrello",RouterService::getRoute(RegolaCarrello::getEntity().".list"));

        $menu->addItem("Importa CSV",RouterService::getRoute("backend.prodotti.importa"));

        $backend = Response::getBackendTemplate();
        $backend::addMenu($menu);



    }

    static function install()
    {
        return [

            TipologiaProdotto::class,
            TipologiaProdottoCampo::class,
            Prodotto::class,
            ProdottoCampo::class,
            Variante::class,
            VarianteAttributo::class,
            VarianteCampi::class,
            \applications\ecommerce\entities\Attributo::class,
            \applications\ecommerce\entities\Zona::class,
            Categoria::class,
            CategoriaProdotto::class,

            AttributoTipo::class,
            AttributoEntita::class,

            Spedizione::class,
            SpedizionePrezzo::class,
            ClienteSpedizione::class,
            ClienteFatturazione::class,
            Ordine::class,
            OrdineLineItem::class,
            MetodoPagamento::class,
            AttributoValore::class,
            Provincia::class,
            Cliente::class,
            Coupon::class,
            \applications\ecommerce\entities\Promo::class,
            PromoCarrello::class,
            Carrello::class,
            LineItem::class,
            LineItemMeta::class,
            RegolaCarrello::class,
            Pagamento::class
        ];
    }

    static function declareRoutes()
    {


        $categoria = [
            Categoria::getEntity().".list"  =>  new Route( Categoria::getEntity()."list" ,"/backend/ecommerce/catalogo/categorie",[Categorie::class,"listaCategorie"]),
            Categoria::getEntity().".mod"  =>  new Route( Categoria::getEntity()."mod" ,"/backend/ecommerce/catalogo/categorie/".Categoria::getModLink(),[Categorie::class,"editCategoria"]),
            Categoria::getEntity().".update"  =>  (new Route( Categoria::getEntity()."mod" ,"/backend/ecommerce/catalogo/categorie/".Categoria::getModLink(),[Categorie::class,"updateCategoria"]))->method(Route::METHOD_PUT),
            Categoria::getEntity().".add"  =>  (new Route( Categoria::getEntity()."mod" ,"/backend/ecommerce/catalogo/categorie/".Categoria::getAddLink(),[Categorie::class,"addCategoria"])),
            Categoria::getEntity().".delete"  =>  (new Route( Categoria::getEntity()."mod" ,"/backend/ecommerce/catalogo/categorie/".Categoria::getModLink()."/delete",[Categorie::class,"deleteCategoria"])),
            Categoria::getEntity().".insert"  =>  (new Route( Categoria::getEntity()."insert" ,"/backend/ecommerce/catalogo/categorie/".Categoria::getAddLink(),[Categorie::class,"insertCategoria"]))->method(Route::METHOD_POST),

        ];


        $prodotto = array_merge(Prodotti::declareRoutes(),[
            /*Prodotto::getEntity().".list"  =>  new Route( Prodotto::getEntity()."list" ,"/backend/ecommerce/catalogo/prodotti",[Prodotti::class,"listaProdotti"]),
            Prodotto::getEntity().".preview"        =>  new Route("mod","/backend/ecommerce/catalogo/prodotti/preview/".Prodotto::getModLink(),[Prodotti::class,"actionPreview"]),
            Prodotto::getEntity().".mod"  =>  new Route( Prodotto::getEntity()."mod" ,"/backend/ecommerce/catalogo/prodotti/".Prodotto::getModLink(),[Prodotti::class,"editProdotto"]),
            Prodotto::getEntity().".update"  =>  (new Route( Prodotto::getEntity()."update" ,"/backend/ecommerce/catalogo/prodotti/".Prodotto::getModLink(),[Prodotti::class,"updateProdotto"]))->method(Route::METHOD_PUT),
            Prodotto::getEntity().".insert"  =>  (new Route( Prodotto::getEntity()."insert" ,"/backend/ecommerce/catalogo/prodotti/".Prodotto::getAddLink(),[Prodotti::class,"insertProdotto"]))->method(Route::METHOD_POST),
            Prodotto::getEntity().".add"  =>  (new Route( Prodotto::getEntity()."add" ,"/backend/ecommerce/catalogo/prodotti/".Prodotto::getAddLink(),[Prodotti::class,"addProdotto"])),
            Prodotto::getEntity().".delete"  =>  (new Route( Prodotto::getEntity()."delete" ,"/backend/ecommerce/catalogo/prodotti/".Prodotto::getModLink()."/delete",[Prodotti::class,"deleteProdotto"])),

            Prodotto::getEntity().".activate"  =>  (new Route( Prodotto::getEntity()."add" ,"/backend/ecommerce/catalogo/prodotti/".Prodotto::getAddLink()."/activate",[Prodotti::class,"actionActivate"])),
            Prodotto::getEntity().".deactivate"  =>  (new Route( Prodotto::getEntity()."delete" ,"/backend/ecommerce/catalogo/prodotti/".Prodotto::getModLink()."/deactivate",[Prodotti::class,"actionDeactivate"])),
*/
            "ecommerce.catalogo.prodotto.saveproperties"  =>  (new Route( "ecommerce.catalogo.prodotto.saveproperties" ,Prodotto::getModLink()."/saveproperties",[Catalogo::class,"saveProperties"]))->method(Route::METHOD_POST),

            "ecommerce.catalogo.prodotto.gestione"  =>  (new Route("ecommerce.catalogo.prodotto.gestione","gestione",[Catalogo::class,"gestioneProdotto"])),

            "ecommerce.catalogo.prodotto.category"  =>  (new Route( "ecommerce.catalogo.prodotto.category" ,Prodotto::getModLink()."/category",[Prodotti::class,"getCategories"])),
            "ecommerce.catalogo.prodotto.category.add"  =>  (new Route( "ecommerce.catalogo.prodotto.category.add" ,Prodotto::getModLink()."/category/add",[Prodotti::class,"addCategories"]))->method(Route::METHOD_POST),
            "ecommerce.catalogo.prodotto.category.remove"  =>  (new Route( "ecommerce.catalogo.prodotto.category.remove" ,Prodotto::getModLink()."/category/remove",[Prodotti::class,"removeCategories"]))->method(Route::METHOD_POST),


            "ecommerce.catalogo.prodotto.variant"  =>  (new Route( "ecommerce.catalogo.prodotto.variant" ,Prodotto::getModLink()."/variant",[Prodotti::class,"getVariants"])),
            "ecommerce.catalogo.prodotto.variant.add"  =>  (new Route( "ecommerce.catalogo.prodotto.variant.add" ,Prodotto::getModLink()."/variant/add",[Prodotti::class,"addVariant"]))->method(Route::METHOD_POST),
            "ecommerce.catalogo.prodotto.variant.remove"  =>  (new Route( "ecommerce.catalogo.prodotto.variant.remove" ,Prodotto::getModLink()."/variant/remove",[Prodotti::class,"removeVariant"]))->method(Route::METHOD_POST),


            "ecommerce.catalogo.prodotto.image"  =>  (new Route( "" ,Prodotto::getModLink()."/image",[Prodotti::class,"getImages"])),
            "ecommerce.catalogo.prodotto.image.add"  =>  (new Route( "" ,Prodotto::getModLink()."/image/add",[Prodotti::class,"addImage"]))->method(Route::METHOD_POST),
            "ecommerce.catalogo.prodotto.image.remove"  =>  (new Route( "" ,"image/remove/".Prodotto::getModLink(),[Prodotti::class,"removeImage"]))->method(Route::METHOD_POST),


            "ecommerce.catalogo.categoria.image"  =>  (new Route( "" ,"categoria/".Categoria::getModLink()."/image",[Catalogo::class,"getCategoryImages"])),
            "ecommerce.catalogo.categoria.image.add"  =>  (new Route( "" ,"categoria/".Categoria::getModLink()."/image/add",[Catalogo::class,"addCategoryImage"]))->method(Route::METHOD_POST),
            "ecommerce.catalogo.categoria.image.remove"  =>  (new Route( "" ,"categoria/image/remove/".Categoria::getModLink(),[Catalogo::class,"removeCategoryImage"]))->method(Route::METHOD_POST),




        ]);



        $attributo = Attributo::declareRoutes();

        RouterService::addRoutesPrefixed($prodotto,"/backend/ecommerce/prodotti/");

        RouterService::addRoutesPrefixed(Attributo::declareRoutes(),"/backend/ecommerce/");
        RouterService::addRoutesPrefixed(\applications\ecommerce\TipologiaProdotto::declareRoutes(),"/backend/ecommerce/tipologia-prodotto/");

        RouterService::addRoutesPrefixed(\applications\ecommerce\Spedizioni::declareRoutes(),"/backend/ecommerce/spedizioni/");

        RouterService::addRoutesPrefixed(\applications\ecommerce\Clienti::declareRoutes(),"/backend/ecommerce/clienti/");
        RouterService::addRoutesPrefixed(\applications\ecommerce\Ordini::declareRoutes(),"/backend/ecommerce/ordini/");

        RouterService::addRoutesPrefixed(\applications\ecommerce\Varianti::declareRoutes(),"/backend/ecommerce/varianti/");
        RouterService::addRoutesPrefixed(\applications\ecommerce\MetodiPagamento::declareRoutes(),"/backend/ecommerce/metodi-di-pagamento/");


        RouterService::addRoutesPrefixed(\applications\ecommerce\CouponApplication::declareRoutes(),"/backend/ecommerce/coupon/");

        RouterService::addRoutesPrefixed(\applications\ecommerce\Prodotti::declareRoutes(),"/backend/ecommerce/prodotti/");

        RouterService::addRoutesPrefixed(\applications\ecommerce\Promo::declareRoutes(),"/backend/ecommerce/promo/");
        RouterService::addRoutesPrefixed(\applications\ecommerce\PromoCarrelloBackend::declareRoutes(),"/backend/ecommerce/promocarrello/");


        RouterService::addRoutesPrefixed(\applications\ecommerce\Pagamenti::declareRoutes(),"/backend/ecommerce/ordini/pagamenti/");



        RouterService::addRoute("ecommerce.emails.preview",new Route("","/backend/ecommerce/email/preview/{nome:(.*)}",[Ordini::class,"_previewEmail"]));


        RouterService::addRoutesPrefixed(\applications\ecommerce\RegoleCarrello::declareRoutes(),"/backend/ecommerce/regole-carrello/");


        return array_merge(
            [
               //"ecommerce.ordini"  =>  new Route("ecommerce.ordini","/backend/ecommerce/ordini",[Ordini::class ,"ordini"]),
                "ecommerce.catalogo"  =>  new Route("ecommerce.catalogo","/backend/ecommerce/catalogo",[Catalogo::class ,"catalogo"]),

            ],$categoria
        );
        return [
            "ecommerce.ordini"  =>  new Route("ecommerce.ordini","/backend/ecommerce/ordini",[Ordini::class ,"ordini"]),
            "ecommerce.catalogo"  =>  new Route("ecommerce.catalogo","/backend/ecommerce/catalogo",[Catalogo::class ,"catalogo"]),


        ];
    }


    static function ordini(){
        echo "we";
        exit;
    }

    static function getFrontendApplication()
    {
        self::$config= Config::getFile("ecommerce");
        $frontendClass = isset(self::$config['applications']['frontend']) ? self::$config['applications']['frontend'] : null;

        if( $frontendClass == null ){
            $frontendClass = EcommerceFrontend::class;
        }
        return $frontendClass;
    }

    static function getBackendApplication()
    {
        return null;
    }

    static function getEntityClass()
    {
        return null;
    }

}