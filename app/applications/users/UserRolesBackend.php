<?php
/**
 * Created by PhpStorm.
 * User: phome
 * Date: 22/05/2018
 * Time: 20:55
 */

namespace applications\users;
use applications\banner\BannerApplication;
use applications\login\entities\RolePermission;
use applications\login\entities\UserRole;
use applications\login\LoginApplication;
use core\abstracts\Application;
use core\Route;
use core\services\Response;
use core\services\RouterService;

class UserRolesBackend extends \core\abstracts\BackendApplication{
    static function getApplication()
    {
        return UsersApplication::class;
    }

    static function getEntityClass()
    {
        return UserRole::class;
    }

    static function declareRoutes()
    {
        return array_merge(
            parent::declareRoutes(),[
                "backend.users.permessi.update" =>  (new Route("",UserRole::getModLink()."/aggiornaruoli",[self::class,"_aggiornaPermessiRuolo"]))->method(Route::METHOD_POST)
            ]
        );
    }


    static function getDescription( $method ="")
    {
        return "Gestisci i ruoli dell'utente.";
    }

    static function getTitle( $method ="")
    {
        return "Gestione ruoli";
    }

    static function getIcon( $method ="")
    {
        return "users";
    }

    static function checkRoutePermission( $route, $userrole = null ){
        if(!LoginApplication::getUserLogged() ) return true;

        if($userrole == null ){
            $user = LoginApplication::getUserLogged();
            $userRole = $user->type;
        }






        $permission = RolePermission::query()->where("userrole_id=$userRole")->where('route="'.str_replace("\\","\\\\",$route->name).'"')->getOne();


        if(!$permission){
            return true;
        }
        if($permission->isActive()){
            return true;
        }

        return false;
    }


    static function _filterPermission( $route ){
        if(!LoginApplication::getUserLogged() ) return true;

        $user = LoginApplication::getUserLogged();
        $userRole = $user->type;


        $permission = RolePermission::query()->where("userrole_id=$userRole")->where('route="'.str_replace("\\","\\\\",$route->name).'"')->getOne();

        if(!$permission){
            return true;
        }
        if($permission->isActive()){
            return true;
        }

        $route->callback = [self::class,"_permissionDenied"];
    }

    static function _permissionDenied(){
        return [
            "users/templates/permessonegato",[
                "data"  =>  [
                    "type"=> "error",
                    "error" =>  101,
                    "msg"   =>  "Non hai i permessi per effettuare questa operazione"
                ]
            ]
        ];

    }


    static function actionAdd( $params =[] ){
        $entity = static::getEntityClass();
        if( isset($params['id']) ) {
            $data = $entity::findById($params['id']);
        }else{
            $data = new $entity($params);
        }

        $fields = static::generateFields($entity,$data);

        Response::addVariable(
            [
                "title"         =>  "Modifica ".$entity::getEntityName(),
                "breadcrumbs"   =>  [
                    ["link"=>"qwe","label"=>"qwe"]
                ],
                "application_info"  =>  [
                    "icon"   =>  static::getIcon("actionMod"),
                    "title"   =>  static::getTitle("actionMod"),
                    "description"   =>  static::getDescription("actionMod")
                ]
            ]
        );


        return [
            "mod",[

                "data"  =>  $data,
                "fields"    =>  $fields,
                "entity"    =>  $entity

            ]
        ];

    }

    static function actionMod($params = [])
    {
        $mod = parent::actionMod($params); // TODO: Change the autogenerated stub

        $routes = RouterService::$routes;

        $permessi = [];


        foreach ($routes as $key=>$value){

            $query = RolePermission::query();

            $permessi[$key] = $query->where("userrole_id=".$params['id'])->where('route="'.str_replace("\\","\\\\",$key).'"')->getOne();




        }


        return [
            "tabs",[
                "tabs" => [
                    "ruolo" => [
                        "label" =>  "Ruolo",
                        "content"   =>  Response::getTemplateToUse($mod[0],$mod[1],"empty.twig")->render()
                    ],
                    "permessi"  =>  [
                        "label" =>  "Permessi",
                        "content"   =>  Response::getTemplateToUse("users/templates/permessi",[
                            "routes"    =>  $routes,
                            "user"      =>  $mod[1]["data"],
                            "permessi"  =>  $permessi
                        ],"empty.twig")->render()
                    ]
                ]
            ]
        ];
    }


    static function _aggiornaPermessiRuolo( $get, $post=[]){




        foreach ($post["routes"] as $key=>$v){
            $name = $v['name'];
            $value = isset($v['value']) ? $v['value'] : 0;
            $permesso = RolePermission::query()->where('route="'.str_replace("\\","\\\\",$name).'"')->where("userrole_id=".$get['id'])->getOne();

            if($permesso){
                $permesso->active = $value;
                $permesso->save();
            }else{


                $permesso = new RolePermission([
                    "userrole_id"   =>  $get['id'],
                    "route" =>  $name,
                    "active"    =>  $value
                ]);
                $permesso->save();
            }
        }
        exit;
    }

}