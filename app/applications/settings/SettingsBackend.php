<?php
namespace applications\settings;

use applications\settings\entities\Setting;
use core\abstracts\BackendApplication;
use core\Cache;
use core\Config;
use core\Environment;
use core\Route;
use core\services\ApplicationsService;
use core\services\Request;
use core\services\Response;
use core\services\RouterService;
use DirectoryIterator;

class SettingsBackend extends BackendApplication{
    static function getApplication()
    {
        return SettingsApplication::class; // TODO: Change the autogenerated stub
    }


    public static function declareRoutes()
    {
        return array_merge(
            parent::declareRoutes(),[
                "backend.settings.cache" => new Route("","cache",[self::class ,"impostazioniCache"]),
                "backend.settings.cache.save" => (new Route("","cache",[self::class ,"impostazioniCache"]))->method(Route::METHOD_POST),
                "backend.settings.cache.cleantemplates" =>  new Route("","cache/clean-templates",[self::class,"cleanTemplates"]),
                "backend.settings.cache.cleanqueries" =>  new Route("","cache/clean-queries",[self::class,"cleanQueries"]),
                "backend.settings.applications" =>  new Route("","applications",[static::class,"applications"]),
                "backend.settings.applications.save" =>  (new Route("","applications",[static::class,"applications"]))->method(Route::METHOD_POST)
        ]); // TODO: Change the autogenerated stub
    }

    static function applications($params=[],$data=[]){

        $availableApplications = ApplicationsService::getAvailableApplications();
        if(Request::isPost()){
            $activeApplications = [];

            foreach($data['app'] as $key=>$value){
                if($value == 1){
                    $activeApplications[$key] = $data['appclass'][$key]; 
                    
                }
            }

            $a = Config::getCoreFile("applications");
            $activeApplications = array_merge($a,$activeApplications);


            $v =  var_export($activeApplications,true);
            file_put_contents(Environment::$ROOT."/config/applications.php",'<?php return '.$v.";");

            RouterService::getRoute("backend.settings.applications")->go();
            exit;
        }else{
            
            return [
                "settings/templates/backend.settings.applications",[
                    "availableApplications" => $availableApplications
                ]
            ];
        }
     
        
    }

    static function rrmdir($path) {

        // Remove a dir (all files and folders in it)
        $i = new DirectoryIterator($path);
        foreach($i as $f) {
            if($f->isFile()) {
                unlink($f->getRealPath());
            } else if(!$f->isDot() && $f->isDir()) {
                self::rrmdir($f->getRealPath());
                rmdir($f->getRealPath());
            }
        }
    }





    public static function getIcon($method = "")
    {
        return "cog"; // TODO: Change the autogenerated stub
    }

    public static function cleanTemplates(){


        $template = Response::getFrontendTemplate();
        $btemplate = Response::getBackendTemplate();

        self::rrmdir( $template->getCacheDir() );
        self::rrmdir( $btemplate->getCacheDir() );

        return Response::redirect(RouterService::getRoute("backend.settings.cache")->build());
    }

    public static function cleanQueries(){





        $path = Environment::$CACHE_ROOT."/query";

        self::rrmdir( $path );

        return Response::redirect(RouterService::getRoute("backend.settings.cache")->build());
    }


    public static function impostazioniCache($params =[],$post=[]){

        if(Request::isPost()){


            foreach ($post as $key=>$value){
                $setting = Setting::fromKey($key);
                $setting->buildProperties($value);
                $setting->save();
            }

            return Response::redirect(RouterService::getRoute("backend.settings.cache")->build());
        }

        return[
            "settings/templates/backend.settings.cache",[

            ]
        ];
    }


    static function actionList($params = [])
    {
        return parent::actionList(array_merge($params,[
            "where"=>[
                "and"=>[
                    'setting_group != "system"'
                ]
            ]
        ]));    
    }
}