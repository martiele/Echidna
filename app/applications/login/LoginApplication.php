<?php

namespace applications\login;

use applications\login\entities\RolePermission;
use applications\login\entities\User;
use applications\login\entities\UserRole;
use core\Route;
use core\RouteFilter;
use core\services\Response;
use core\services\RouterService;
use core\services\SessionService;

class LoginApplication extends \core\abstracts\Application{
    const LOGGED_KEY = "logged";
    const LOGGER_USER   =   "logged_user";

    static function getFrontendApplication()
    {
        return null;
    }

    static function getBackendApplication()
    {
        return null;
    }

    static function getEntityClass()
    {
       return null;
    }

    static function init($n = null)
    {
        parent::init($n); // TODO: Change the autogenerated stub

        RouterService::addRoute("backend.authenticate",
            (new Route("backend.authenticate","/backend/login",[self::class,"actionAuthenticate"]))->method(Route::METHOD_POST)
        );

        RouterService::addRoute("backend.login",
            (new Route("backend.login","/backend/login",[self::class,"actionLogin"]))
        );

        RouterService::addRoute("backend.logout",
            (new Route("backend.logout","/backend/logout",[self::class,"actionLogout"]))
        );

        RouterService::addFilter(
            (new RouteFilter())->setName("filter.backend.login")->setRegex("/backend/{a:(.*)}")->setCallback([self::class,"loginBackendFilter"])
        );
       /*RouterService::addRoute("backend.checklogin",
            (new Route("backend.login","/backend/{a:(.*)}",[self::class,"actionLogin"]))->addFilter([self::class,"loginBackendFilter"])
        );*/


       Response::addVariable([
           "admin_user" =>  self::getUserLogged()
       ]);

    }


    static function actionLogout(){

        SessionService::set(self::LOGGED_KEY,false);
        SessionService::delete(self::LOGGER_USER);


        RouterService::getRoute("backend.login")->go();
        exit;
    }

    static function generateHash($s){
        $salt = 'prova';
        $hash = md5($salt . $s);
        return $hash;
    }

    static function actionAuthenticate( $get, $post ){


        $user = User::findByUsername( $post['username']);

        if( !empty($user) && $user[0]->password === self::generateHash( $post['password'] )){
            self::setUserLogged($user[0]);
            RouterService::getRoute("dashboard")->go([]);
        }else{
            RouterService::getRoute("backend.login")->go();
        }


    }

    static function setUserLogged( $user ){
        SessionService::set(self::LOGGED_KEY,true);
        SessionService::set(self::LOGGER_USER,$user);
    }

    static function actionLogin(){
        Response::setTemplateToUse("backendTemplate");
        return[
            "login",[]
        ];
    }

    static function loginBackendFilter(&$route){



        if($route->name == "backend.login" || $route->name == "backend.authenticate"){
            return true;
        }




        if( SessionService::get(self::LOGGED_KEY)  ){

            return true;
        }else{
            RouterService::getRoute("backend.login")->go(["a"=> "login"]);
            echo "wewqeqweqweqw";
            exit;
        }
    }

    static function getUserLogged(){

       return SessionService::get(self::LOGGER_USER);
    }

    static function install()
    {
        return [
            UserRole::class,
            User::class,
            RolePermission::class
        ];
    }

}