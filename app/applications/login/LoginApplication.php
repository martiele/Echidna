<?php

namespace applications\login;

use applications\login\entities\RolePermission;
use applications\login\entities\User;
use applications\login\entities\UserRole;
use applications\main\MainBackend;
use core\Email;
use core\Route;
use core\RouteFilter;
use core\services\Request;
use core\services\Response;
use core\services\RouterService;
use core\services\SessionService;

class LoginApplication extends \core\abstracts\Application{
    const LOGGED_KEY = "logged";
    const LOGGER_USER   =   "logged_user";

    static function getFrontendApplication()
    {
        return null;
    }

    static function getBackendApplication()
    {
        return null;
    }

    static function getEntityClass()
    {
       return null;
    }

    static function init($n = null)
    {
        parent::init($n); // TODO: Change the autogenerated stub

        RouterService::addRoute("backend.authenticate",
            (new Route("backend.authenticate","/backend/login",[self::class,"actionAuthenticate"]))->method(Route::METHOD_POST)
        );

        RouterService::addRoute("backend.login",
            (new Route("backend.login","/backend/login",[self::class,"actionLogin"]))
        );

        RouterService::addRoute("backend.login.resetpassword",
            (new Route("backend.login","/backend/login/resetpassword",[self::class,"actionResetPassword"]))
        );
        RouterService::addRoute("backend.login.resetpassword.save",
            (new Route("backend.login","/backend/login/resetpassword",[self::class,"actionResetPassword"]))->method(Route::METHOD_POST)
        );
        RouterService::addRoute("backend.login.resetpassword.insert",
            (new Route("backend.login","/backend/login/resetpassword/{sid:(.*)}",[self::class,"actionResetPasswordInsert"]))
        );
        RouterService::addRoute("backend.login.resetpassword.insert.save",
            (new Route("backend.login","/backend/login/resetpassword/{sid:(.*)}",[self::class,"actionResetPasswordInsert"]))->method(Route::METHOD_POST)
        );


        RouterService::addRoute("backend.logout",
            (new Route("backend.logout","/backend/logout",[self::class,"actionLogout"]))
        );


        RouterService::addFilter(
            (new RouteFilter())->setName("filter.backend.login")->setRegex("/backend/{a:(.*)}")->setCallback([self::class,"loginBackendFilter"])
        );
       /*RouterService::addRoute("backend.checklogin",
            (new Route("backend.login","/backend/{a:(.*)}",[self::class,"actionLogin"]))->addFilter([self::class,"loginBackendFilter"])
        );*/




    }

    static function actionResetPasswordInsert($params=[], $post = []){

        $utente = User::query(true)->where('sid="'.$params['sid'].'"')->getOne();


        if( Request::isPost()){

            if($params['sid'] != $post['sid']){
                echo "errore";
                exit;
            }

            if( $post['password'] != $post['password_check']){
                echo "le password non coincidono";
                exit;
            }


            $utente->sid = "";
            $utente->password = self::generateHash($post['password']);
            $utente->save();
            RouterService::getRoute("backend.login")->go();
            exit;
        }else{


                Response::setTemplateToUse("backendTemplate");

            if($utente) {
                return [
                    "applications/login/templates/reset.password.form", [
                        "utente" => $utente
                    ]
                ];
            }else{
                return [
                    "applications/login/templates/reset.password.message", [
                        "message" => "Token scaduto"
                    ]
                ];
            }
        }
    }

    static function actionResetPassword( $params = [], $post=[] ){

        Response::setTemplateToUse("backendTemplate");



        if(Request::isPost()){

            $sid =  md5(time().$utente->username);


            $utente = User::query(true)->where('username="'.$post['utente'].'"')->getOne();

            $utente->sid = $sid;
            $utente->save();

            $mail = new Email();
            $mail->template ="login/templates/email";
            $mail->bindData( Response::getBackendTemplate());

            $mail->data=[
                "msg"   =>  Response::$response['host'].RouterService::getRoute("backend.login.resetpassword.insert")->build([
                    "sid"   => $sid
                ])
            ];

            $mail->to = $utente->email;
            $mail->from = "info";
            $mail->subject = "Reset password";
            $r = $mail->send();

            return[
                "applications/login/templates/reset.password.message",[
                    "message"   =>  "Ti abbiamo inviato una mail sulla tua casella di posta, segui il link per resettare la password"
                ]
            ];
        }else {
            return [
                "applications/login/templates/reset.password", []
            ];
        }


    }

    static function actionLogout(){

        SessionService::set(self::LOGGED_KEY,false);
        SessionService::delete(self::LOGGER_USER);

        SessionService::delCookie("user");
        SessionService::delCookie("code");

        RouterService::getRoute("backend.login")->go();
        exit;
    }

    static function generateHash($s){
        $salt = 'prova';
        $hash = md5($salt . $s);
        return $hash;
    }

    static function actionAuthenticate( $get, $post ){



        $user = User::findByUsername( $post['username']);

        if( !empty($user) && $user[0]->password === self::generateHash( $post['password'] )){
            self::setUserLogged($user[0]);

            if($post['rememberme']=="1"){
                SessionService::setCookie("user", $post['username']);
                SessionService::setCookie("code", $user[0]->password);
            }


            if( !$user[0]->checkPermission("environment.prod.access")){
                MainBackend::startDemoMode();
                RouterService::getRoute("demomode.aftertoggle")->go();
            }

            RouterService::getRoute("dashboard")->go([]);
        }else{
            RouterService::getRoute("backend.login")->go();
        }


    }

    static function setUserLogged( $user ){


        SessionService::set(self::LOGGED_KEY,true);
        SessionService::set(self::LOGGER_USER,$user);

    }

    static function actionLogin(){


        if( MainBackend::demoMode() ){
            MainBackend::stopDemoMode();
            RouterService::getRoute("backend.login")->go();exit;
        }
        if( LoginApplication::getUserLogged() ){
            RouterService::getRoute("dashboard")->go();
            exit;
        }

        if(SessionService::getCookie("user") && SessionService::getCookie("code")){
            //effetto la login via cookies
            $user = User::findByUsername( SessionService::getCookie("user") );
            if( !empty($user) && $user[0]->password === SessionService::getCookie("code") ){

                self::setUserLogged($user[0]);
                RouterService::getRoute("dashboard")->go([]);
                exit;
            }
        }


        Response::setTemplateToUse("backendTemplate");
        return[
            "login",[]
        ];
    }

    static function loginBackendFilter(&$route){

        Response::addVariable([
            "admin_user" =>  self::getUserLogged()
        ],true);



        if(
            in_array($route->name,[
                "backend.login",
                "backend.authenticate",
                "backend.login.resetpassword",
                "backend.login.resetpassword.save",
                "backend.login.resetpassword.insert",
                "backend.login.resetpassword.insert.save"
            ])){


            return true;
        }




        if( SessionService::get(self::LOGGED_KEY)  ){

            return true;
        }else{
            RouterService::getRoute("backend.login")->go(["a"=> "login"]);
            exit;
        }
    }

    /**
     * @return User
     */
    static function getUserLogged(){

       return SessionService::get(self::LOGGER_USER);
    }

    static function install()
    {
        return [
            UserRole::class,
            User::class,
            RolePermission::class
        ];
    }


}