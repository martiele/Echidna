<?php

namespace backend;

use core\Environment;
use core\services\Request;
use core\services\Response;
use core\template\TwigTemplate;

class BackendTemplate extends TwigTemplate {
    static $menu = [];

    static function getFieldTemplate( $t ){
        if( strpos($t,"@custom/") !== false ){
 
            return str_replace("@custom/","",$t);
        }else{
            return "fields/".$t;
        }
    }

    function getTemplatesDirectory()
    {

        $r = [ __DIR__."/template"];
        if( file_exists( Response::getFrontendTemplate()::getBaseDirectory()."/frontend/spagnesi/applications"))
            $r[] =  Response::getFrontendTemplate()::getBaseDirectory()."/frontend/spagnesi/applications";

        if( file_exists( Response::getFrontendTemplate()::getBaseDirectory()."/frontend/spagnesi/template"))
            $r[] =  Response::getFrontendTemplate()::getBaseDirectory()."/frontend/spagnesi/template";

        return $r;
    }

    static function getBaseDirectory()
    {
        return __DIR__;
    }


    static function addMenu( $menu , $position=0){




        static::$menu[] =[
            "menu"  =>  $menu,
            "position"  =>  $position
        ];
    }

    public function render()
    {




        if( isset($this->response['data']) ){
            if(is_array($this->response['data']) && isset($this->response['data']['type']) && $this->response['data']['type'] == 'redirect'){
                Response::go($this->response['data']['to']);
                exit;
            }
        }


        usort(static::$menu,function($a,$b){
            if($a['position'] < $b['position']){
                return -1;
            }
            if($a['position'] > $b['position']){
                return 1;
            }
            return 0;
        });

        $this->response['backend_menu'] = [];

        foreach (static::$menu as $menu){
            $this->response['backend_menu'][] = $menu['menu'];
        }




        return parent::render(); // TODO: Change the autogenerated stub
    }



    static function renderTemplateSingleTab($label,$template,$data,$template_extend = "empty.twig"){
        /*
         *    [
                        "label" =>  "Informazioni condominio",
                        "content"   =>  Response::getTemplateToUse($mod[0],$mod[1],"empty.twig")->render()
                    ],
         */


        return [
            "label" =>  $label,
            "content"  =>  Response::getTemplateToUse($template,$data,$template_extend)->render()
        ];
    }

    static function renderTemplate($template,$data,$template_extend = "empty.twig"){
        return Response::getTemplateToUse($template,$data,$template_extend)->render();
    }

    static function renderTemplateGroup($label,$name,$content = [],$open = false){

        return self::renderTemplate("parts/collapse-group",[
            "content"   =>  $content,
            "label" =>  $label,
            "name"  =>  $name,
            "open"  =>  $open
        ]);

    }

    static function mergeTemplates($templates = []){
        return implode("",$templates);
    }

}