<?php
namespace core\services;

use core\abstracts\Service;
use core\db\DbPdo;

class Db extends Service {

    static $version=null;


    /**
     * @var DbPdo
     */
    static $connection = null;

    static function getVersion(){
        $r = self::$connection->fetchOne("SELECT * from settings WHERE setting_key = 'echidna.version'");
        if($r){
            return $r['setting_value'];
        }
        return false;
    }
    static function init()
    {
        parent::init(); // TODO: Change the autogenerated stub


        try {
            $host   =  isset($_ENV["MYSQL_HOST"]) ? $_ENV['MYSQL_HOST'] : self::$config['host'];
            $db     =   isset($_ENV['MYSQL_DATABASE']) ? $_ENV['MYSQL_DATABASE'] : self::$config['db'];
            $user   =   isset($_ENV['MYSQL_USER']) ? $_ENV['MYSQL_USER'] : self::$config['user'];
            $password=  isset($_ENV['MYSQL_PASSWORD']) ? $_ENV['MYSQL_PASSWORD'] : self::$config['password'];

            // stringa di connessione al DBMS
            self::$connection = new DbPdo("mysql:host=$host;dbname=$db", $user, $password);
            self::getVersion();
        }
        catch(\PDOException $e)
        {


            header("Location: /install");
            exit;

        }
    }

    static function getName()
    {
        return "db";
    }


    /**
     * @return DbPdo
     */
    static function getInstance(){
        return self::$connection;
    }

    static function tableExists( $table ){
        $query = "SHOW TABLES LIKE '".$table."';";
        $r = static::getInstance()->query($query)->fetchAll();
        return count($r) > 0;
    }




}