<?php

namespace core\services;

use applications\schematics\entities\Schematics;
use applications\schematics\SchematicsApplication;
use core\abstracts\Application;
use core\Config;
use core\db\Field;
use core\Environment;
use core\Events;
use core\Setting;
use core\template\BaseTemplate;


class ApplicationsService extends \core\abstracts\Service {

    /**
     * @var Application[]
     */
    static $applications = array();

    static function getName()
    {
        return "applications";
    }

    static function getAvailableApplications(){
        $app = [];
        $dirs = array_filter(glob(Environment::$APPLICATION_ROOT.'/*'), 'is_dir');
        foreach($dirs as $key=>$value){
            if(file_exists($value."/application.php") ){
                $app[$key] = include $value."/application.php";
            }
        }
    
        return $app;
    }

    static function installSchema($table,$schema){
        $schema['__active__'] = Field::boolean()->setDefault(1);

        $db = Db::getInstance();
        if(!Db::tableExists($table)){
            $query = "\nCREATE TABLE $table (\n";
            $createFields = [];
            foreach ($schema as $key=>$value){
                if( !empty($f = Field::getCreateSql($key,$value)) )
                $createFields [] = $f;
            }
            $query .= implode(",\n",$createFields);
            $query .= "\n)\n";
            // echo $query;


            $r = $db->query($query);
        }else{
            $alters = [];
            $fieldsDb = [];

            foreach ($db->query("DESCRIBE $table") as $key=> $value){
                $fieldsDb[] = $value['Field'];
                if( !isset($schema[$value["Field"]])){
                    $sql = "ALTER TABLE $table\n";
                    $sql .= "DROP COLUMN ".$value['Field'];
                    if( $db->query($sql) ){
                        // echo "++Colonna $table.$key rimossa correttamente\n";
                    }
                    continue;
                }

                if( !Field::compare( $schema[$value["Field"]], $value ) ){

                    $alters[] ="CHANGE ".$value['Field']." ".Field::getCreateSql( $value['Field'], $schema[$value['Field']],true);
                }

            }
            if(count($alters)>0){
                $sql = "ALTER TABLE $table\n";
                $sql.=implode(",\n",$alters);


                $r = $db->query($sql);
            }

            foreach ($schema as $key=>$value){
                if(!in_array($key,$fieldsDb)){
                    $sql = "ALTER TABLE $table\n";

                    if(Field::getCreateSql( $key, $value) ) {
                        $sql .= "ADD " . Field::getCreateSql($key, $value);


                        if ($db->query($sql)) {
                            //echo "++Colonna $table.$key aggiunta correttamente\n";
                        }
                    }
                }


                if( $value->index ){

                    if( !$db->fetchOne("show index from `$table` where Key_name=\"$key\"") ) {
                            $db->query("ALTER TABLE `$table` ADD INDEX (`$key`)");
                    }
                }
            }
        }
    }

    static function install($e){


        $schema = $e::schema();
        $table = $e::getTable();




        self::installSchema($table,$schema);


    }

    static function init()
    {
        parent::init(); // TODO: Change the autogenerated stub


        Events::dispatch(Events::APPLICATIONS_INIT_BEFORE,[]);

        if( count(self::$config) > 0 ){
            foreach (self::$config as $name => $item) {
                /**
                 * @var $item Application
                 */











                if(Environment::is(Environment::DEV)){

                    $version = Setting::findByKey($name.".version",1);

                    if($version < $item::getVersion() ){


                        $newversion=$item::getVersion();

                        $item::upgrade($version,$newversion);
                        $version = $newversion;

                        Setting::setByKey($name.".version",$version);
                    }

                    $e = $item::getEntityClass();



                    if( is_string($e)) {
                        static::install($e);
                    }
                    $entities = $item::install();



                    if(count($entities) > 0 ){


                        foreach ($entities as $key=>$value){

                            try {
                                static::install($value);
                            }catch (\Exception $e){
                                echo $e->getMessage();
                                var_dump($item);
                                exit;
                            }
                        }
                    }
                }

                $item::init( $name );
                static::$applications[$name] = $item;


            }
        }


        Events::dispatch(Events::APPLICATIONS_INIT_FINISH,[]);

    }


    /**
     * @return Application[]
     */
    static function getAll(){
        return self::$config;
    }
}