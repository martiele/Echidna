<?php
namespace core\services;

use core\abstracts\Service;
use core\exceptions\NotFoundException;
use core\Route;
use core\RouteFilter;


class RouterService extends Service{

    static public $config;
    static public $routes = [];

    /**
     * @var RouteFilter[]
     */
    static public $filters = [];


    static function getName(){
        return "router";
    }

    public $languages=array(
        "it",
        "en"
    );

    static function init()
    {
        Response::addVariable(
            [
                "router_service"    =>   new self()
            ]
        );
        parent::init(); // TODO: Change the autogenerated stub
    }

    public static function addRoute( $name, $route ){
        self::$routes[$name] = $route;
    }
    public static function addRoutes( $routes ){

        foreach ($routes as $key => $route) {
            self::$routes[$key] = $route;
        }
        //self::$routes += $routes;
    }

    /**
     * @param $name
     * @return Route|mixed
     */
    public static function getRoute( $name ){

        return isset(self::$routes[$name]) ? self::$routes[$name] : new Route("","",[]) ;
    }

    /**
     * @param $routes Route[]
     * @param $prefix
     */
    public static function addRoutesPrefixed( $routes , $prefix , $filter=null){
        foreach ($routes as $key => $value){
            if($filter != null){
                $value->addFilter($filter);
            }
            $app = $routes[$key]->regex;
            $routes[$key]->regex = $prefix . $app;
        }
        self::$routes += $routes;
    }

    public static function getAll(){
        return static::$routes;
    }


    public static function parseUrl($u){
        foreach (self::getAll() as $key => $value) {

            if(preg_match("|".$key."$|i", $u))
                return $value;
        }

        return false;
    }


    public static function buildUrl($pattern,$params){





        $variabili = [];

        preg_match_all("|{([a-z-_]*):([\[\]\^/\(\)\.\[\]a-zA-Z0-9+*-]*)}|i",$pattern,$mm);


        foreach($mm[0] as $key=>$value){

            //array_push($variabili,$mm[1][$key]);

            $variabili[$mm[1][$key]] = $params[$mm[1][$key]];
            //$pattern = preg_replace("|{([\(\)A-Za-z:*^{^}.]*)}|i",$mm[2][$key],$pattern);

            //$pattern = preg_replace("|".$mm[0][$key]."|i",$mm[2][$key],$pattern);

            $pattern = str_replace($mm[0][$key],$params[$mm[1][$key]],$pattern);


            ///$pattern = str_replace($mm[0][$key],$mm[2][$key],$pattern);
        }


        if(is_array($params)) {

            $params = array_diff_key($params, $variabili);


            if (count($params) > 0) {
                $pattern .= "?" . implode("&", array_map(function ($value, $index) {
                        return $index . "=" . $value;
                    }, $params, array_keys($params)));
            }
        }

        //$pattern = trim(str_replace($method,"",$pattern));
        return $pattern;
    }

    public static function parseQuery($url,$u){






        if($url == $u){
            return [];
        }

        $method = Request::getMethod();

        $pattern = $u;


        $urlcompleta=$method." ".$url;
        $variabili = [];






        preg_match_all("|{([a-z-_]*):([\[\]\^/\(\)\.\[\]a-zA-Z0-9+*-]*)}|i",$u,$mm);





        foreach($mm[0] as $key=>$value){

            array_push($variabili,$mm[1][$key]);
            //$pattern = preg_replace("|{([\(\)A-Za-z:*^{^}.]*)}|i",$mm[2][$key],$pattern);

            //$pattern = preg_replace("|".$mm[0][$key]."|i",$mm[2][$key],$pattern);

            $pattern = str_replace($mm[0][$key],$mm[2][$key],$pattern);
        }






        $r = preg_match("|^".$pattern."$|i",$urlcompleta,$matches);


        if(!$r)
            return false;



        $params = [];



        for($i=1;$i<count($matches);$i++){
            if(isset($variabili[$i-1]))
                $params[$variabili[$i-1]] = $matches[$i];

            //array_push($where,.'="'.$matches[$i].'"');
        }

        $_GET['router-pattern'] = $u;

        $_GET = array_merge($_GET,$params);

        return $params;

        if( strpos($u,$method) === false){
            return false;
        }





        $u = str_replace($method." ","",$u);



        return preg_match("|".$u."$|i", $url);




    }

    public static function getAction(){


        //if(!isset($_GET['query'])||$_GET['query']=="") return "";

        //$g=$_GET['query'];

        $g = Service(Request)->getQuery();

        if(strpos($g,'admin/') == 0){
            $g = str_replace("admin/","",$g);
        }
        if(strpos($g,'admin') == 0){
            $g = str_replace("admin","",$g);
        }

        $g=str_replace( Service(Router)->getApplication(),"",$g);
        //if(substr($g,0,1)=="/") $g=substr($g,1,strlen($g)-1);
        $g = ltrim($g,"/");

        $ex=explode("/",$g);


        if( substr($ex[0],0,1) =="-"){
            if( count($ex) > 1){
                return $ex[1];
            }else{
                return "";
            }
        }else
            return $ex[0];
    }

    public static function getApplication(){
        //$g=isset($_GET['query']) && $_GET['query']!="" ? $_GET['query'] : 'main';
        $g = Service(Request)->getQuery();

        if(strpos($g,'admin/') == 0){
            $g = str_replace("admin/","",$g);
        }
        if(strpos($g,'admin') == 0){
            $g = str_replace("admin","",$g);
        }

        if($g == '') $g = 'main';

        $ex=explode("/",$g);





        if(strpos($ex[0],"-") === false){
            return $ex[0];
        }else{
            $exx = explode("-", $ex[0]);
            return $exx[0];
        }

    }

    public static function getApplicationClass(){


        $g = Service(Request)->getQuery();
        if($g == '') $g = 'main';

        $ex=explode("/",$g);


        if(!isset($ex[1]) || strpos($ex[1],"-") === false){
            return "Application";
        }else{
            if(!isset($ex[1])) return false;
            $exx = explode("-", $ex[1]);

            return ucfirst($exx[1]);
        }

    }


    public static function getVariables(){
        global $echidna;

        //$g=isset($_GET['query']) && $_GET['query']!="" ? $_GET['query'] : 'default';


        $g = Service(Request)->getQuery();
        if($g == '') $g = 'default';

        //$g = str_replace($echidna->application"-".$echidna->applicationClass."/","",$g);

        /*
        $g=str_replace(Routes::getApplication()."/","",$g);
        $g=str_replace(Routes::getApplication()."/","",$g);
        $g=str_replace(Routes::getAction()."/","",$g);
        */
        $ex=explode("/",$g);


        if(count($ex)>2){
            unset($ex[0]);
            unset($ex[1]);
            unset($ex[2]);
            $ex = array_values($ex);
            return $ex;
        }else{
            return [];
        }


        var_dump($ex);
        exit();
        if(count($ex)>0){
            if(strtolower( $ex[0] ) == strtolower( $echidna->application."-". $echidna->applicationClass) ) {
                unset($ex[0]);
            }elseif ($ex[0] == $echidna->application) {
                unset($ex[0]);
            }
            $ex = array_values($ex);
        }
        if(count($ex)>0){
            if(strtolower( $ex[0] ) == strtolower( $echidna->action) ) {
                unset($ex[0]);
            }
            $ex = array_values($ex);
        }

        $g=$_GET;
        unset($g['mode']);
        unset($g['query']);


        $ex=array_merge($ex,$g);


        return $ex;
    }


    static function extractFromUrl($url,$pattern){

    }


    public function  findApplication(){
        $return = [];

        foreach ( Service(Applications)->getAll() as $key => $value) {

            $a = $value['Application'];
            $r = $a::routes();
            //$app = Service(Echidna)->get_app($key);
            //var_dump( $app->routes());



            if( count($r)>0 ){
                $trovato = false;
                foreach ($r as $route => $action) {
                    if(!$trovato){
                        $rr = $this->parseQuery( Service(Request)->getQuery() , $route);

                        if($rr!== false){
                            $app = Service(Echidna)->get_app($key);




                            $return[] = [$app,$action,$rr];
                            $trovato =true;
                        }
                    }


                }
            }
        }



        return $return;
    }


    static function addFilter( $filter ){


        self::$filters[$filter->name] = $filter;

    }

    static function dispatch(){






        $method = Request::getMethod();
        $query = Request::getQuery();

        foreach (self::$routes as $key => $route) {


            //if( $route->applyFilters() === false ) continue;

            /**
             * @var $route Route
             */
            $r = self::parseQuery("/".$query,$route->method." ".$route->regex);


            if( is_array($r) ){



                if( $route->applyFilters( $query ) === false ) continue;



                call_user_func([$route->callback[0],"init"]);





                $response = false;

                $r = array_merge($r,$_GET);
                if( in_array(Request::getMethod(),["POST","PUT"] )){
                    $response = call_user_func_array($route->callback,
                        [
                            "params"=>$r,
                            "data"  =>  Request::getData()
                        ]
                    );

                }else{
                    $response = call_user_func($route->callback,$r);
                }



                if($response) {
                    Response::add($response);

                    return;
                }


            }

        }



        throw new NotFoundException();
        exit;

    }
}
