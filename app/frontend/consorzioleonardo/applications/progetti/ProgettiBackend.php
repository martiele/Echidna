<?php

namespace frontend\consorzioleonardo\applications\progetti;


use core\abstracts\BackendApplication;
use core\Route;
use core\services\Response;
use frontend\consorzioleonardo\applications\progetti\entities\AziendaProgetto;
use frontend\consorzioleonardo\applications\progetti\entities\Progetto;
use frontend\consorzioleonardo\applications\progetti\ProgettiApplication;


class ProgettiBackend extends BackendApplication{
    static function getApplication()
    {
        return ProgettiApplication::class;
    }

    static function actionAdd( $params =[] ){
        $entity = static::getEntityClass();
        if( isset($params['id']) ) {
            $data = $entity::findById($params['id']);
        }else{
            $data = new $entity($params);
        }

        $fields = static::generateFields($entity,$data);




        return [
            "mod",[
                "title" =>  "Modifica",
                "data"  =>  $data,
                "fields"    =>  $fields,
                "entity"    =>  $entity

            ]
        ];

    }

    static function actionMod($params = [])
    {
        $mod = parent::actionMod($params); // TODO: Change the autogenerated stub

        $imprese = AziendaProgetto::query()->where("progetto_id=".$mod[1]['data']->id)->getAll();
        AziendaProgetto::expandArray($imprese);


        return [
            'tabs',[
                "tabs"  =>  [
                    "progetto"    =>  [
                        "label" =>  "Dati progetto",
                        "content"   => Response::getTemplateToUse($mod[0],array_merge($mod[1],["template_extend"=>"empty.twig"]))->render()
                    ],
                    "meta"    =>  [
                        "label" =>  "Risposte aziende",
                        "content"   => Response::getTemplateToUse("progetti/templates/progetto.risposteaziende",[
                            "progetto"  =>  $mod[1]['data'],
                            "template_extend"=>"empty.twig",
                            "imprese"   =>  $imprese
                        ])->render()
                    ]
                ],

            ]
        ];

    }

    static function declareRoutes()
    {

        $r = (new Route("",Progetto::getModLink()."/aggiornarisposta",[self::class,"_aggiornaRisposta"]))->method(Route::METHOD_POST);


        return array_merge(
            parent::declareRoutes(),
            [
                "backend.progetti.aggiornarisposta" =>  (new Route("",Progetto::getModLink()."/aggiornarisposta",[self::class,"_aggiornaRisposta"]))->method(Route::METHOD_POST)
            ]
        );
    }


    static function _aggiornaRisposta( $get, $data = []){
        $ap = AziendaProgetto::findById($data['id']);
        $ap->risposta = $data['valore'];
        $ap->save();
        return[
            "",[
                "data"  =>  $ap
            ]
        ];
    }


}