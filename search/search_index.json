{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"infrastruttura/struttura/","text":"Come \u00e8 strutturato Echidna \u00b6 Applicazioni ed entit\u00e0 \u00b6 Echidna si basa su applicazioni, ognuna delle quali ha il compito di gestire idealmente una entit\u00e0. L' entit\u00e0 \u00e8 una classe che estende core\\Model e che si occupa di mappare una singola tabella del DB e offrire funzionalit\u00e0 di ricerca, salvataggio e personalizzate Ogni applicazione si occupa di inizializzare la propria corrispettiva backend e frontend e le entit\u00e0 collegate. Si occupa inoltre di dichiarare i men\u00f9 da utilizzare nel backend. Sotto applicazione backend \u00b6 La sotto applicazione backend avr\u00e0 il compito di dichiarare e gestire le route relative alla propria entit\u00e0 gestita. Parte di queste route vengono inizializzate in automatico ma l'argomento sar\u00e0 trattato nella sezione backend. Sotto applicazione frontend \u00b6 La sotto applicazione frontend, invece, \u00e8 quella delegata alla gestione di tutta la parte pubblica del sito. Non ha nessuna route di default inizializzata ed \u00e8 quindi totalmente personalizzabile nel comportamento. Servizi \u00b6 In Echidna esistono svariati servizi, sempre disponibili, che vengono inzializzati all'avvio dell'applicazione. ApplicationService : inizializza le applicazioni e le entit\u00e0 Db : effettua la connessione al database ed espone l'oggetto PDO Request : mantiene i dati della richiesta ed espone metodi facilitati per accedervi Response : inizializza i vari templateEngines che serviranno ad Echidna, i dati da passare ai template ed espone metodi per gestire le risposta del server o effettuare redirects EmailService : servizio per l'invio delle mail, via sendmail o smtp RuntimeService : il servizio genera una cache del codice comune per velocizzare l'ambiente di produzione RouterService : servizio per la gestione delle route. Contiene metodi per l'aggiunta di route ed effettua il parsing della url ed il match con eventuali route dichiarate UrlService : non utilizzato Bootstrap \u00b6 Il bootstrap dell'applicazione \u00e8 delegato alla classe core\\Bootstrap che si occupa, in ordine, di : - Inizializzare l'ambiente - Inizializzare il servizio email - Inizializzare il servizio di routing - Inizializzare il servizio applicazioni","title":"Come \u00e8 strutturato Echidna"},{"location":"infrastruttura/struttura/#come-e-strutturato-echidna","text":"","title":"Come \u00e8 strutturato Echidna"},{"location":"infrastruttura/struttura/#applicazioni-ed-entita","text":"Echidna si basa su applicazioni, ognuna delle quali ha il compito di gestire idealmente una entit\u00e0. L' entit\u00e0 \u00e8 una classe che estende core\\Model e che si occupa di mappare una singola tabella del DB e offrire funzionalit\u00e0 di ricerca, salvataggio e personalizzate Ogni applicazione si occupa di inizializzare la propria corrispettiva backend e frontend e le entit\u00e0 collegate. Si occupa inoltre di dichiarare i men\u00f9 da utilizzare nel backend.","title":"Applicazioni ed entit\u00e0"},{"location":"infrastruttura/struttura/#sotto-applicazione-backend","text":"La sotto applicazione backend avr\u00e0 il compito di dichiarare e gestire le route relative alla propria entit\u00e0 gestita. Parte di queste route vengono inizializzate in automatico ma l'argomento sar\u00e0 trattato nella sezione backend.","title":"Sotto applicazione backend"},{"location":"infrastruttura/struttura/#sotto-applicazione-frontend","text":"La sotto applicazione frontend, invece, \u00e8 quella delegata alla gestione di tutta la parte pubblica del sito. Non ha nessuna route di default inizializzata ed \u00e8 quindi totalmente personalizzabile nel comportamento.","title":"Sotto applicazione frontend"},{"location":"infrastruttura/struttura/#servizi","text":"In Echidna esistono svariati servizi, sempre disponibili, che vengono inzializzati all'avvio dell'applicazione. ApplicationService : inizializza le applicazioni e le entit\u00e0 Db : effettua la connessione al database ed espone l'oggetto PDO Request : mantiene i dati della richiesta ed espone metodi facilitati per accedervi Response : inizializza i vari templateEngines che serviranno ad Echidna, i dati da passare ai template ed espone metodi per gestire le risposta del server o effettuare redirects EmailService : servizio per l'invio delle mail, via sendmail o smtp RuntimeService : il servizio genera una cache del codice comune per velocizzare l'ambiente di produzione RouterService : servizio per la gestione delle route. Contiene metodi per l'aggiunta di route ed effettua il parsing della url ed il match con eventuali route dichiarate UrlService : non utilizzato","title":"Servizi"},{"location":"infrastruttura/struttura/#bootstrap","text":"Il bootstrap dell'applicazione \u00e8 delegato alla classe core\\Bootstrap che si occupa, in ordine, di : - Inizializzare l'ambiente - Inizializzare il servizio email - Inizializzare il servizio di routing - Inizializzare il servizio applicazioni","title":"Bootstrap"},{"location":"introduzione/","text":"Echidna framework \u00b6 Echidna \u00e8 un framework basato su php e mysql. Si basa sul concetto di applicazioni ed entit\u00e0 e punta a velocizzare lo sviluppo di progetti web. Possiede un backend autogenerante in grado di soddisfare la maggior parte delle richieste out of the box ma con la possibilit\u00e0 di essere esteso e customizzato. Per cosa \u00e8 possibile usare Echidna? Quick start Utilizzo con Docker","title":"Echidna"},{"location":"introduzione/#echidna-framework","text":"Echidna \u00e8 un framework basato su php e mysql. Si basa sul concetto di applicazioni ed entit\u00e0 e punta a velocizzare lo sviluppo di progetti web. Possiede un backend autogenerante in grado di soddisfare la maggior parte delle richieste out of the box ma con la possibilit\u00e0 di essere esteso e customizzato. Per cosa \u00e8 possibile usare Echidna? Quick start Utilizzo con Docker","title":"Echidna framework"},{"location":"introduzione/docker/","text":"Utilizzo con docker \u00b6 Echidna \u00e8 gi\u00e0 predisposto per essere utilizzando con docker e docker-compose. Dopo aver installato docker sul tuo pc ti baster\u00e0 aprire un terminale nella root del progetto ed eseguire il seguente comando . docker-compose up Docker compose si occuper\u00e0 di inizializzare apache, creare il database e installare composer. Potrai quindi dirigerti all'indirizzo root del tuo sito, sulla porta 8080, per procedere con l'installazione.","title":"Utilizzo con Docker"},{"location":"introduzione/docker/#utilizzo-con-docker","text":"Echidna \u00e8 gi\u00e0 predisposto per essere utilizzando con docker e docker-compose. Dopo aver installato docker sul tuo pc ti baster\u00e0 aprire un terminale nella root del progetto ed eseguire il seguente comando . docker-compose up Docker compose si occuper\u00e0 di inizializzare apache, creare il database e installare composer. Potrai quindi dirigerti all'indirizzo root del tuo sito, sulla porta 8080, per procedere con l'installazione.","title":"Utilizzo con docker"},{"location":"introduzione/per-cosa-usare-echidna/","text":"Per cosa \u00e8 possibile utilizzare echidna \u00b6 Echidna \u00e8 un framework pensato principalmente per facilitare lo sviluppo di siti web altamente personalizzati. Ha gi\u00e0 incluse diverse applicazioni che lo rendono adatto sia per lo sviluppo di semplici siti vetrina che di blog o ecommerce pi\u00f9 complessi. Echidna pu\u00f2 essere utilizzato anche per la realizzazione di gestionali personalizzati, prototipi e backoffice di gestione API e inserimento dati. La sua struttura flessibile e la capacit\u00e0 di autogenerare i pi\u00f9 comuni pattern crud sulle entit\u00e0 coinvolte lo configura come uno strumento perfetto e personalizzabile per ogni progetto.","title":"Per cosa \u00e8 possibile utilizzare echidna?"},{"location":"introduzione/per-cosa-usare-echidna/#per-cosa-e-possibile-utilizzare-echidna","text":"Echidna \u00e8 un framework pensato principalmente per facilitare lo sviluppo di siti web altamente personalizzati. Ha gi\u00e0 incluse diverse applicazioni che lo rendono adatto sia per lo sviluppo di semplici siti vetrina che di blog o ecommerce pi\u00f9 complessi. Echidna pu\u00f2 essere utilizzato anche per la realizzazione di gestionali personalizzati, prototipi e backoffice di gestione API e inserimento dati. La sua struttura flessibile e la capacit\u00e0 di autogenerare i pi\u00f9 comuni pattern crud sulle entit\u00e0 coinvolte lo configura come uno strumento perfetto e personalizzabile per ogni progetto.","title":"Per cosa \u00e8 possibile utilizzare echidna"},{"location":"introduzione/quick-start/","text":"Quick start \u00b6 Puoi utilizzare echidna direttamente con un server apache puntando il vhost alla root del progetto. ( in locale puoi utilizzare anche applicazioni standalone come MAMP o XAMMP) Segui questi passaggi per la configurazione iniziale : Installa composer nella cartella /app 1 Compila il file di configurazione per l'accesso al db con i dati di accesso al tuo mysql server /app/config/db.php <?php return array ( 'host' => 'localhost', 'db' => 'dbname', 'user' => 'dbuser', 'password' => 'dbpassword', ); Vai alla url del tuo sito web e segui la procedura di installazione per creare l'utente admin. Phasellus posuere in sem ut cursus Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Se non conosci composer o non sai come installare puoi controllare a questo link \u21a9","title":"Quick start"},{"location":"introduzione/quick-start/#quick-start","text":"Puoi utilizzare echidna direttamente con un server apache puntando il vhost alla root del progetto. ( in locale puoi utilizzare anche applicazioni standalone come MAMP o XAMMP) Segui questi passaggi per la configurazione iniziale : Installa composer nella cartella /app 1 Compila il file di configurazione per l'accesso al db con i dati di accesso al tuo mysql server /app/config/db.php <?php return array ( 'host' => 'localhost', 'db' => 'dbname', 'user' => 'dbuser', 'password' => 'dbpassword', ); Vai alla url del tuo sito web e segui la procedura di installazione per creare l'utente admin. Phasellus posuere in sem ut cursus Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Se non conosci composer o non sai come installare puoi controllare a questo link \u21a9","title":"Quick start"},{"location":"template/","text":"Frontend template \u00b6 Echidna usa Twig come Template Engine di default. I template frontend risiedono normalmente nella cartella /app/frontend e devono, come minimo, dichiarare la class template che estenda core\\template\\TwigTemplate . La configurazione del template da utilizzare avviene nel file di configurazione /app/config/response.php , alla voce frontendTemplate . Qui andr\u00e0 inserito il full namespace del template da utilizzare use frontend\\standard\\StandardTemplate; return [ \"templateEngines\" => [ \"frontendTemplate\" => StandardTemplate::class, \"backendTemplate\" => \\backend\\BackendTemplate::class, \"jsonTemplate\" => \\core\\template\\JsonTemplate::class ] ]; TwigTemplate \u00b6 Un template che estende TwigTemplate deve necessariamente implementare i seguenti metodi astratti : 1. function getTemplatesDirectory() -> deve ritornare un valore di tipo stringa che rappresenta il path assoluto della directory dove risiedono i template twig da utilizzare php function getTemplatesDirectory() { return __DIR__.\"/template\"; } static function getBaseDirectory() deprecata -> ritorna la directory dove risiede la classe template. Verr\u00e0 rimossa nelle prossime versioni Strutura del template frontend standard \u00b6 Echidna dispone out of the box di un semplicissimo template frontend pronto all'utilizzo. Il template standard \u00e8 un barebone dal quale costruire il proprio template personalizzato. Struttura \u00b6 app/frontend/standard/ | StandardTemplate.php | assets | css | style.less | template | pages | default.twig | home.twig | base.twig | nofound.twig StandardTemplate.php \u00b6 La classe template che definisce le directory e si occupa di effettuare il render. Estende TwigTemplate. <?php namespace frontend\\standard; use core\\services\\Request; use core\\template\\TwigTemplate; class StandardTemplate extends TwigTemplate { function getTemplatesDirectory() { return __DIR__.\"/template\"; } static function getBaseDirectory() { return __DIR__; } } NOTA BENE : ogni risorsa viene caricato usando l'autoloader composer secondo lo standard psr-4. Ogni classe deve quindi essere dichiarata all'interno di un namespace che rispecchi fedelmente la struttura delle directory ed avere il proprio nome uguale al file in cui risiede. assets \u00b6 La directory assets contiene tutte le risorse web. css \u00b6 Echidna utilizza il preprocessore less per compilare il css. Ogni risorsa css richiesta dal template viene valutata tramite htaccess e, se non presente, riscritta in modo da processare il file less corrispondente, partendo direttamente dalla root web. esempio : La richiesta a -> miosito.it/assets/css/style.css verr\u00e0 riscritta in -> miosito.it/frontend/{nometemplate}/assets/css/style.css Nel caso in cui esista il file style.css, questo verr\u00e0 servito direttamente da apache. Se, invece, il file style.css non esiste ma esiste la sua versione style.less la richiesta verr\u00e0 passata all'applicaziona Assets che lo compiler\u00e0 creando la versione css js, img, images, video \u00b6 Cos\u00ec come per il css, anche per queste cartelle all'interno di assets esistono delle regole di rewrite gi\u00e0 inserite dentro il file htaccess. L'accesso ai file js ( ad esempio ) presenti nel template frontend avverr\u00e0 quindi partendo sempre dalla root web. esempio : La richiesta a -> miosito.it/assets/js/main.js verr\u00e0 riscritta in -> miosito.it/frontend/{nometemplate}/assets/js/main.js template \u00b6 La cartella template contiene tutti i file twig che rappresentano il nostro sito web. La struttura all'interno di questa directory pu\u00f2 essere decisa a piacimento, tranne le cartelle specifiche legate alle singole applicazioni Ad esempio la cartella \"pages\" viene utilizzata dall'applicazione \"Pages\" e contiene i layout che possono essere utilizzati per renderizzare le pagine del sito L'unico template obbligatorio \u00e8 notfound.twig, che viene chiamato direttamente da Echidna nel caso la risorsa web richiesta non sia disponibile ( errore 404)","title":"I template frontend"},{"location":"template/#frontend-template","text":"Echidna usa Twig come Template Engine di default. I template frontend risiedono normalmente nella cartella /app/frontend e devono, come minimo, dichiarare la class template che estenda core\\template\\TwigTemplate . La configurazione del template da utilizzare avviene nel file di configurazione /app/config/response.php , alla voce frontendTemplate . Qui andr\u00e0 inserito il full namespace del template da utilizzare use frontend\\standard\\StandardTemplate; return [ \"templateEngines\" => [ \"frontendTemplate\" => StandardTemplate::class, \"backendTemplate\" => \\backend\\BackendTemplate::class, \"jsonTemplate\" => \\core\\template\\JsonTemplate::class ] ];","title":"Frontend template"},{"location":"template/#twigtemplate","text":"Un template che estende TwigTemplate deve necessariamente implementare i seguenti metodi astratti : 1. function getTemplatesDirectory() -> deve ritornare un valore di tipo stringa che rappresenta il path assoluto della directory dove risiedono i template twig da utilizzare php function getTemplatesDirectory() { return __DIR__.\"/template\"; } static function getBaseDirectory() deprecata -> ritorna la directory dove risiede la classe template. Verr\u00e0 rimossa nelle prossime versioni","title":"TwigTemplate"},{"location":"template/#strutura-del-template-frontend-standard","text":"Echidna dispone out of the box di un semplicissimo template frontend pronto all'utilizzo. Il template standard \u00e8 un barebone dal quale costruire il proprio template personalizzato.","title":"Strutura del template frontend standard"},{"location":"template/#struttura","text":"app/frontend/standard/ | StandardTemplate.php | assets | css | style.less | template | pages | default.twig | home.twig | base.twig | nofound.twig","title":"Struttura"},{"location":"template/#standardtemplatephp","text":"La classe template che definisce le directory e si occupa di effettuare il render. Estende TwigTemplate. <?php namespace frontend\\standard; use core\\services\\Request; use core\\template\\TwigTemplate; class StandardTemplate extends TwigTemplate { function getTemplatesDirectory() { return __DIR__.\"/template\"; } static function getBaseDirectory() { return __DIR__; } } NOTA BENE : ogni risorsa viene caricato usando l'autoloader composer secondo lo standard psr-4. Ogni classe deve quindi essere dichiarata all'interno di un namespace che rispecchi fedelmente la struttura delle directory ed avere il proprio nome uguale al file in cui risiede.","title":"StandardTemplate.php"},{"location":"template/#assets","text":"La directory assets contiene tutte le risorse web.","title":"assets"},{"location":"template/#css","text":"Echidna utilizza il preprocessore less per compilare il css. Ogni risorsa css richiesta dal template viene valutata tramite htaccess e, se non presente, riscritta in modo da processare il file less corrispondente, partendo direttamente dalla root web. esempio : La richiesta a -> miosito.it/assets/css/style.css verr\u00e0 riscritta in -> miosito.it/frontend/{nometemplate}/assets/css/style.css Nel caso in cui esista il file style.css, questo verr\u00e0 servito direttamente da apache. Se, invece, il file style.css non esiste ma esiste la sua versione style.less la richiesta verr\u00e0 passata all'applicaziona Assets che lo compiler\u00e0 creando la versione css","title":"css"},{"location":"template/#js-img-images-video","text":"Cos\u00ec come per il css, anche per queste cartelle all'interno di assets esistono delle regole di rewrite gi\u00e0 inserite dentro il file htaccess. L'accesso ai file js ( ad esempio ) presenti nel template frontend avverr\u00e0 quindi partendo sempre dalla root web. esempio : La richiesta a -> miosito.it/assets/js/main.js verr\u00e0 riscritta in -> miosito.it/frontend/{nometemplate}/assets/js/main.js","title":"js, img, images, video"},{"location":"template/#template","text":"La cartella template contiene tutti i file twig che rappresentano il nostro sito web. La struttura all'interno di questa directory pu\u00f2 essere decisa a piacimento, tranne le cartelle specifiche legate alle singole applicazioni Ad esempio la cartella \"pages\" viene utilizzata dall'applicazione \"Pages\" e contiene i layout che possono essere utilizzati per renderizzare le pagine del sito L'unico template obbligatorio \u00e8 notfound.twig, che viene chiamato direttamente da Echidna nel caso la risorsa web richiesta non sia disponibile ( errore 404)","title":"template"}]}